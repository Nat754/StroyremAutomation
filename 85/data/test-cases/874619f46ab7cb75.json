{"uid":"874619f46ab7cb75","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke","historyId":"2319df26c5c8a1c6f15c67e5b550813c","time":{"start":1696468003274,"stop":1696468005611,"duration":2337},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x55aa04d3c933 <unknown>\n#1 0x55aa04a166f7 <unknown>\n#2 0x55aa04a63b9d <unknown>\n#3 0x55aa04a61f3d <unknown>\n#4 0x55aa04a5fcf8 <unknown>\n#5 0x55aa04a5ed67 <unknown>\n#6 0x55aa04a53a29 <unknown>\n#7 0x55aa04a7f602 <unknown>\n#8 0x55aa04a53446 <unknown>\n#9 0x55aa04a7f7ce <unknown>\n#10 0x55aa04a98857 <unknown>\n#11 0x55aa04a7f3d3 <unknown>\n#12 0x55aa04a51e64 <unknown>\n#13 0x55aa04a52c4e <unknown>\n#14 0x55aa04d02558 <unknown>\n#15 0x55aa04d064a0 <unknown>\n#16 0x55aa04d1097c <unknown>\n#17 0x55aa04d070b8 <unknown>\n#18 0x55aa04cd2cdf <unknown>\n#19 0x55aa04d2b048 <unknown>\n#20 0x55aa04d2b219 <unknown>\n#21 0x55aa04d3bac3 <unknown>\n#22 0x7f5b968b1044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420076a150>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f4200825910>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4200824510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55aa04d2b219 \\\\u003Cunknown>\\\\n#21 0x55aa04d3bac3 \\\\u003Cunknown>\\\\n#22 0x7f5b968b1044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x55aa04d3c933 <unknown>\nE       #1 0x55aa04a166f7 <unknown>\nE       #2 0x55aa04a63b9d <unknown>\nE       #3 0x55aa04a61f3d <unknown>\nE       #4 0x55aa04a5fcf8 <unknown>\nE       #5 0x55aa04a5ed67 <unknown>\nE       #6 0x55aa04a53a29 <unknown>\nE       #7 0x55aa04a7f602 <unknown>\nE       #8 0x55aa04a53446 <unknown>\nE       #9 0x55aa04a7f7ce <unknown>\nE       #10 0x55aa04a98857 <unknown>\nE       #11 0x55aa04a7f3d3 <unknown>\nE       #12 0x55aa04a51e64 <unknown>\nE       #13 0x55aa04a52c4e <unknown>\nE       #14 0x55aa04d02558 <unknown>\nE       #15 0x55aa04d064a0 <unknown>\nE       #16 0x55aa04d1097c <unknown>\nE       #17 0x55aa04d070b8 <unknown>\nE       #18 0x55aa04cd2cdf <unknown>\nE       #19 0x55aa04d2b048 <unknown>\nE       #20 0x55aa04d2b219 <unknown>\nE       #21 0x55aa04d3bac3 <unknown>\nE       #22 0x7f5b968b1044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696467986497,"stop":1696467987310,"duration":813},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696467987310,"stop":1696467987310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696467987310,"stop":1696468003274,"duration":15964},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x55aa04d3c933 <unknown>\n#1 0x55aa04a166f7 <unknown>\n#2 0x55aa04a63b9d <unknown>\n#3 0x55aa04a61f3d <unknown>\n#4 0x55aa04a5fcf8 <unknown>\n#5 0x55aa04a5ed67 <unknown>\n#6 0x55aa04a53a29 <unknown>\n#7 0x55aa04a7f602 <unknown>\n#8 0x55aa04a53446 <unknown>\n#9 0x55aa04a7f7ce <unknown>\n#10 0x55aa04a98857 <unknown>\n#11 0x55aa04a7f3d3 <unknown>\n#12 0x55aa04a51e64 <unknown>\n#13 0x55aa04a52c4e <unknown>\n#14 0x55aa04d02558 <unknown>\n#15 0x55aa04d064a0 <unknown>\n#16 0x55aa04d1097c <unknown>\n#17 0x55aa04d070b8 <unknown>\n#18 0x55aa04cd2cdf <unknown>\n#19 0x55aa04d2b048 <unknown>\n#20 0x55aa04d2b219 <unknown>\n#21 0x55aa04d3bac3 <unknown>\n#22 0x7f5b968b1044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420076a150>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f4200825910>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4200824510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55aa04d2b219 \\\\u003Cunknown>\\\\n#21 0x55aa04d3bac3 \\\\u003Cunknown>\\\\n#22 0x7f5b968b1044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x55aa04d3c933 <unknown>\nE       #1 0x55aa04a166f7 <unknown>\nE       #2 0x55aa04a63b9d <unknown>\nE       #3 0x55aa04a61f3d <unknown>\nE       #4 0x55aa04a5fcf8 <unknown>\nE       #5 0x55aa04a5ed67 <unknown>\nE       #6 0x55aa04a53a29 <unknown>\nE       #7 0x55aa04a7f602 <unknown>\nE       #8 0x55aa04a53446 <unknown>\nE       #9 0x55aa04a7f7ce <unknown>\nE       #10 0x55aa04a98857 <unknown>\nE       #11 0x55aa04a7f3d3 <unknown>\nE       #12 0x55aa04a51e64 <unknown>\nE       #13 0x55aa04a52c4e <unknown>\nE       #14 0x55aa04d02558 <unknown>\nE       #15 0x55aa04d064a0 <unknown>\nE       #16 0x55aa04d1097c <unknown>\nE       #17 0x55aa04d070b8 <unknown>\nE       #18 0x55aa04cd2cdf <unknown>\nE       #19 0x55aa04d2b048 <unknown>\nE       #20 0x55aa04d2b219 <unknown>\nE       #21 0x55aa04d3bac3 <unknown>\nE       #22 0x7f5b968b1044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1696468003274,"stop":1696468003320,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1696468003387,"stop":1696468003420,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468004472,"stop":1696468004527,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"651544355b94aa15","name":"Screenshot","source":"651544355b94aa15.png","type":"image/png","size":79209},{"uid":"84f2b989cb8a84f1","name":"HTML source","source":"84f2b989cb8a84f1.html","type":"text/html","size":641400}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1696468005804,"stop":1696468005872,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1696468005804,"stop":1696468005804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":79,"unknown":0,"total":85},"items":[{"uid":"2d93b2a805f716ea","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/2d93b2a805f716ea","status":"passed","time":{"start":1696381317447,"stop":1696381325842,"duration":8395}},{"uid":"b6e9a291714ea802","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/b6e9a291714ea802","status":"passed","time":{"start":1696294863954,"stop":1696294872292,"duration":8338}},{"uid":"f4ca436a8c1eb2c4","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/f4ca436a8c1eb2c4","status":"passed","time":{"start":1696282751096,"stop":1696282760770,"duration":9674}},{"uid":"65367f61b2f3f8f4","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/65367f61b2f3f8f4","status":"passed","time":{"start":1696258370301,"stop":1696258378229,"duration":7928}},{"uid":"5453c4aa15fe84b5","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/5453c4aa15fe84b5","status":"passed","time":{"start":1696208509174,"stop":1696208516775,"duration":7601}},{"uid":"a4383e499fdd096f","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/a4383e499fdd096f","status":"passed","time":{"start":1696122494524,"stop":1696122502029,"duration":7505}},{"uid":"c36e590f4b86a42c","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/c36e590f4b86a42c","status":"passed","time":{"start":1696035473915,"stop":1696035480738,"duration":6823}},{"uid":"6e4f8775cf40ae9e","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/6e4f8775cf40ae9e","status":"passed","time":{"start":1695949201447,"stop":1695949208614,"duration":7167}},{"uid":"364f729adb71efc6","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/364f729adb71efc6","status":"passed","time":{"start":1695863006202,"stop":1695863014380,"duration":8178}},{"uid":"b2c755f091137ade","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/b2c755f091137ade","status":"passed","time":{"start":1695776825704,"stop":1695776834198,"duration":8494}},{"uid":"73a6a5aca1190769","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/73a6a5aca1190769","status":"passed","time":{"start":1695690295635,"stop":1695690303452,"duration":7817}},{"uid":"4db5b1c953df4904","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/4db5b1c953df4904","status":"passed","time":{"start":1695603861472,"stop":1695603870081,"duration":8609}},{"uid":"b489825d7ff34721","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/b489825d7ff34721","status":"passed","time":{"start":1695517327842,"stop":1695517334700,"duration":6858}},{"uid":"366367a142492397","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/366367a142492397","status":"passed","time":{"start":1695430905176,"stop":1695430914010,"duration":8834}},{"uid":"f4b71da2dd34372e","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/f4b71da2dd34372e","status":"passed","time":{"start":1695406203657,"stop":1695406212643,"duration":8986}},{"uid":"d650b5d878a8c5b0","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/d650b5d878a8c5b0","status":"passed","time":{"start":1695344395478,"stop":1695344402557,"duration":7079}},{"uid":"26b54a3d01d3d30d","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/26b54a3d01d3d30d","status":"passed","time":{"start":1695257972176,"stop":1695257980020,"duration":7844}},{"uid":"a375b3ea3ef7fa8","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/a375b3ea3ef7fa8","status":"passed","time":{"start":1695171992465,"stop":1695172000881,"duration":8416}},{"uid":"53c4bcec9679821f","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/53c4bcec9679821f","status":"passed","time":{"start":1695085310946,"stop":1695085318615,"duration":7669}},{"uid":"558f43210d30264e","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/558f43210d30264e","status":"passed","time":{"start":1695063868957,"stop":1695063877209,"duration":8252}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"874619f46ab7cb75.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}