{"uid":"89e95e5e6284f0db","name":"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","historyId":"15991ae52c76717db33988570d6dec01","time":{"start":1696468425416,"stop":1696468427765,"duration":2349},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5615d4bb4933 <unknown>\n#1 0x5615d488e6f7 <unknown>\n#2 0x5615d48dbb9d <unknown>\n#3 0x5615d48d9f3d <unknown>\n#4 0x5615d48d7cf8 <unknown>\n#5 0x5615d48d6d67 <unknown>\n#6 0x5615d48cba29 <unknown>\n#7 0x5615d48f7602 <unknown>\n#8 0x5615d48cb446 <unknown>\n#9 0x5615d48f77ce <unknown>\n#10 0x5615d4910857 <unknown>\n#11 0x5615d48f73d3 <unknown>\n#12 0x5615d48c9e64 <unknown>\n#13 0x5615d48cac4e <unknown>\n#14 0x5615d4b7a558 <unknown>\n#15 0x5615d4b7e4a0 <unknown>\n#16 0x5615d4b8897c <unknown>\n#17 0x5615d4b7f0b8 <unknown>\n#18 0x5615d4b4acdf <unknown>\n#19 0x5615d4ba3048 <unknown>\n#20 0x5615d4ba3219 <unknown>\n#21 0x5615d4bb3ac3 <unknown>\n#22 0x7fb28b027044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420082e710>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f420067fcd0>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe87bc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5615d4ba3219 \\\\u003Cunknown>\\\\n#21 0x5615d4bb3ac3 \\\\u003Cunknown>\\\\n#22 0x7fb28b027044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5615d4bb4933 <unknown>\nE       #1 0x5615d488e6f7 <unknown>\nE       #2 0x5615d48dbb9d <unknown>\nE       #3 0x5615d48d9f3d <unknown>\nE       #4 0x5615d48d7cf8 <unknown>\nE       #5 0x5615d48d6d67 <unknown>\nE       #6 0x5615d48cba29 <unknown>\nE       #7 0x5615d48f7602 <unknown>\nE       #8 0x5615d48cb446 <unknown>\nE       #9 0x5615d48f77ce <unknown>\nE       #10 0x5615d4910857 <unknown>\nE       #11 0x5615d48f73d3 <unknown>\nE       #12 0x5615d48c9e64 <unknown>\nE       #13 0x5615d48cac4e <unknown>\nE       #14 0x5615d4b7a558 <unknown>\nE       #15 0x5615d4b7e4a0 <unknown>\nE       #16 0x5615d4b8897c <unknown>\nE       #17 0x5615d4b7f0b8 <unknown>\nE       #18 0x5615d4b4acdf <unknown>\nE       #19 0x5615d4ba3048 <unknown>\nE       #20 0x5615d4ba3219 <unknown>\nE       #21 0x5615d4bb3ac3 <unknown>\nE       #22 0x7fb28b027044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696468414722,"stop":1696468415536,"duration":814},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696468415536,"stop":1696468425415,"duration":9879},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696468415536,"stop":1696468415536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5615d4bb4933 <unknown>\n#1 0x5615d488e6f7 <unknown>\n#2 0x5615d48dbb9d <unknown>\n#3 0x5615d48d9f3d <unknown>\n#4 0x5615d48d7cf8 <unknown>\n#5 0x5615d48d6d67 <unknown>\n#6 0x5615d48cba29 <unknown>\n#7 0x5615d48f7602 <unknown>\n#8 0x5615d48cb446 <unknown>\n#9 0x5615d48f77ce <unknown>\n#10 0x5615d4910857 <unknown>\n#11 0x5615d48f73d3 <unknown>\n#12 0x5615d48c9e64 <unknown>\n#13 0x5615d48cac4e <unknown>\n#14 0x5615d4b7a558 <unknown>\n#15 0x5615d4b7e4a0 <unknown>\n#16 0x5615d4b8897c <unknown>\n#17 0x5615d4b7f0b8 <unknown>\n#18 0x5615d4b4acdf <unknown>\n#19 0x5615d4ba3048 <unknown>\n#20 0x5615d4ba3219 <unknown>\n#21 0x5615d4bb3ac3 <unknown>\n#22 0x7fb28b027044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420082e710>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f420067fcd0>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe87bc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5615d4ba3219 \\\\u003Cunknown>\\\\n#21 0x5615d4bb3ac3 \\\\u003Cunknown>\\\\n#22 0x7fb28b027044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5615d4bb4933 <unknown>\nE       #1 0x5615d488e6f7 <unknown>\nE       #2 0x5615d48dbb9d <unknown>\nE       #3 0x5615d48d9f3d <unknown>\nE       #4 0x5615d48d7cf8 <unknown>\nE       #5 0x5615d48d6d67 <unknown>\nE       #6 0x5615d48cba29 <unknown>\nE       #7 0x5615d48f7602 <unknown>\nE       #8 0x5615d48cb446 <unknown>\nE       #9 0x5615d48f77ce <unknown>\nE       #10 0x5615d4910857 <unknown>\nE       #11 0x5615d48f73d3 <unknown>\nE       #12 0x5615d48c9e64 <unknown>\nE       #13 0x5615d48cac4e <unknown>\nE       #14 0x5615d4b7a558 <unknown>\nE       #15 0x5615d4b7e4a0 <unknown>\nE       #16 0x5615d4b8897c <unknown>\nE       #17 0x5615d4b7f0b8 <unknown>\nE       #18 0x5615d4b4acdf <unknown>\nE       #19 0x5615d4ba3048 <unknown>\nE       #20 0x5615d4ba3219 <unknown>\nE       #21 0x5615d4bb3ac3 <unknown>\nE       #22 0x7fb28b027044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1696468425416,"stop":1696468425465,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1696468425537,"stop":1696468425575,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468426629,"stop":1696468426683,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"8b1ff33deee0c928","name":"Screenshot","source":"8b1ff33deee0c928.png","type":"image/png","size":72081},{"uid":"3aa49324a3a4cdcf","name":"HTML source","source":"3aa49324a3a4cdcf.html","type":"text/html","size":664087}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696468427982,"stop":1696468427982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696468427983,"stop":1696468428047,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":68,"unknown":0,"total":69},"items":[{"uid":"a395c1a7f2743f07","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/a395c1a7f2743f07","status":"passed","time":{"start":1696381764431,"stop":1696381775372,"duration":10941}},{"uid":"9af64236874bc1a1","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/9af64236874bc1a1","status":"passed","time":{"start":1696295291891,"stop":1696295302782,"duration":10891}},{"uid":"d7ef87b2741b1c8f","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/d7ef87b2741b1c8f","status":"passed","time":{"start":1696283308116,"stop":1696283320373,"duration":12257}},{"uid":"9414fb223b4cc534","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/9414fb223b4cc534","status":"passed","time":{"start":1696258907729,"stop":1696258918283,"duration":10554}},{"uid":"efd691cff870442b","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/efd691cff870442b","status":"passed","time":{"start":1696208927546,"stop":1696208937452,"duration":9906}},{"uid":"dfd0d0891fa1eaee","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/dfd0d0891fa1eaee","status":"passed","time":{"start":1696122937121,"stop":1696122947079,"duration":9958}},{"uid":"8e3dbcbd61440b36","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/8e3dbcbd61440b36","status":"passed","time":{"start":1696035872802,"stop":1696035882485,"duration":9683}},{"uid":"575b6a6e505598fd","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/575b6a6e505598fd","status":"passed","time":{"start":1695949595605,"stop":1695949605143,"duration":9538}},{"uid":"8ebc6e60e6f40397","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/8ebc6e60e6f40397","status":"passed","time":{"start":1695863539752,"stop":1695863550887,"duration":11135}},{"uid":"e4244224ea1c09bc","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/e4244224ea1c09bc","status":"passed","time":{"start":1695777370728,"stop":1695777381726,"duration":10998}},{"uid":"22fd3002275ff37c","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/22fd3002275ff37c","status":"passed","time":{"start":1695690803613,"stop":1695690813543,"duration":9930}},{"uid":"40e1696474f7b16a","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/40e1696474f7b16a","status":"passed","time":{"start":1695604386769,"stop":1695604397570,"duration":10801}},{"uid":"d43e2eee63461ceb","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/d43e2eee63461ceb","status":"passed","time":{"start":1695517723733,"stop":1695517733168,"duration":9435}},{"uid":"25f60059387017c9","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/25f60059387017c9","status":"passed","time":{"start":1695431460044,"stop":1695431471136,"duration":11092}},{"uid":"ce2b0fa4df1bdaea","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/ce2b0fa4df1bdaea","status":"passed","time":{"start":1695406757518,"stop":1695406768511,"duration":10993}},{"uid":"646b4f16748e3511","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/646b4f16748e3511","status":"passed","time":{"start":1695344813911,"stop":1695344823483,"duration":9572}},{"uid":"ee591fae0b6e31bc","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/ee591fae0b6e31bc","status":"passed","time":{"start":1695258398254,"stop":1695258407810,"duration":9556}},{"uid":"8b79b4ca1edafd49","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/8b79b4ca1edafd49","status":"passed","time":{"start":1695172540357,"stop":1695172551265,"duration":10908}},{"uid":"f2f046674841f84c","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/f2f046674841f84c","status":"passed","time":{"start":1695085789223,"stop":1695085799174,"duration":9951}},{"uid":"d262dc17409a7664","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/d262dc17409a7664","status":"passed","time":{"start":1695064378653,"stop":1695064389209,"duration":10556}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"89e95e5e6284f0db.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}