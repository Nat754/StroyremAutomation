{"uid":"7d40a0c8f70b4e46","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"dad3617134a119815037f972e0359b9c","time":{"start":1696468160177,"stop":1696468162447,"duration":2270},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x561ffd16c933 <unknown>\n#1 0x561ffce466f7 <unknown>\n#2 0x561ffce93b9d <unknown>\n#3 0x561ffce91f3d <unknown>\n#4 0x561ffce8fcf8 <unknown>\n#5 0x561ffce8ed67 <unknown>\n#6 0x561ffce83a29 <unknown>\n#7 0x561ffceaf602 <unknown>\n#8 0x561ffce83446 <unknown>\n#9 0x561ffceaf7ce <unknown>\n#10 0x561ffcec8857 <unknown>\n#11 0x561ffceaf3d3 <unknown>\n#12 0x561ffce81e64 <unknown>\n#13 0x561ffce82c4e <unknown>\n#14 0x561ffd132558 <unknown>\n#15 0x561ffd1364a0 <unknown>\n#16 0x561ffd14097c <unknown>\n#17 0x561ffd1370b8 <unknown>\n#18 0x561ffd102cdf <unknown>\n#19 0x561ffd15b048 <unknown>\n#20 0x561ffd15b219 <unknown>\n#21 0x561ffd16bac3 <unknown>\n#22 0x7fe5e216e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080eb90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41ffb73750>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe83ad50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561ffd15b219 \\\\u003Cunknown>\\\\n#21 0x561ffd16bac3 \\\\u003Cunknown>\\\\n#22 0x7fe5e216e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x561ffd16c933 <unknown>\nE       #1 0x561ffce466f7 <unknown>\nE       #2 0x561ffce93b9d <unknown>\nE       #3 0x561ffce91f3d <unknown>\nE       #4 0x561ffce8fcf8 <unknown>\nE       #5 0x561ffce8ed67 <unknown>\nE       #6 0x561ffce83a29 <unknown>\nE       #7 0x561ffceaf602 <unknown>\nE       #8 0x561ffce83446 <unknown>\nE       #9 0x561ffceaf7ce <unknown>\nE       #10 0x561ffcec8857 <unknown>\nE       #11 0x561ffceaf3d3 <unknown>\nE       #12 0x561ffce81e64 <unknown>\nE       #13 0x561ffce82c4e <unknown>\nE       #14 0x561ffd132558 <unknown>\nE       #15 0x561ffd1364a0 <unknown>\nE       #16 0x561ffd14097c <unknown>\nE       #17 0x561ffd1370b8 <unknown>\nE       #18 0x561ffd102cdf <unknown>\nE       #19 0x561ffd15b048 <unknown>\nE       #20 0x561ffd15b219 <unknown>\nE       #21 0x561ffd16bac3 <unknown>\nE       #22 0x7fe5e216e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696468142087,"stop":1696468142898,"duration":811},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696468142899,"stop":1696468142899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696468142899,"stop":1696468160177,"duration":17278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x561ffd16c933 <unknown>\n#1 0x561ffce466f7 <unknown>\n#2 0x561ffce93b9d <unknown>\n#3 0x561ffce91f3d <unknown>\n#4 0x561ffce8fcf8 <unknown>\n#5 0x561ffce8ed67 <unknown>\n#6 0x561ffce83a29 <unknown>\n#7 0x561ffceaf602 <unknown>\n#8 0x561ffce83446 <unknown>\n#9 0x561ffceaf7ce <unknown>\n#10 0x561ffcec8857 <unknown>\n#11 0x561ffceaf3d3 <unknown>\n#12 0x561ffce81e64 <unknown>\n#13 0x561ffce82c4e <unknown>\n#14 0x561ffd132558 <unknown>\n#15 0x561ffd1364a0 <unknown>\n#16 0x561ffd14097c <unknown>\n#17 0x561ffd1370b8 <unknown>\n#18 0x561ffd102cdf <unknown>\n#19 0x561ffd15b048 <unknown>\n#20 0x561ffd15b219 <unknown>\n#21 0x561ffd16bac3 <unknown>\n#22 0x7fe5e216e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080eb90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41ffb73750>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe83ad50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561ffd15b219 \\\\u003Cunknown>\\\\n#21 0x561ffd16bac3 \\\\u003Cunknown>\\\\n#22 0x7fe5e216e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x561ffd16c933 <unknown>\nE       #1 0x561ffce466f7 <unknown>\nE       #2 0x561ffce93b9d <unknown>\nE       #3 0x561ffce91f3d <unknown>\nE       #4 0x561ffce8fcf8 <unknown>\nE       #5 0x561ffce8ed67 <unknown>\nE       #6 0x561ffce83a29 <unknown>\nE       #7 0x561ffceaf602 <unknown>\nE       #8 0x561ffce83446 <unknown>\nE       #9 0x561ffceaf7ce <unknown>\nE       #10 0x561ffcec8857 <unknown>\nE       #11 0x561ffceaf3d3 <unknown>\nE       #12 0x561ffce81e64 <unknown>\nE       #13 0x561ffce82c4e <unknown>\nE       #14 0x561ffd132558 <unknown>\nE       #15 0x561ffd1364a0 <unknown>\nE       #16 0x561ffd14097c <unknown>\nE       #17 0x561ffd1370b8 <unknown>\nE       #18 0x561ffd102cdf <unknown>\nE       #19 0x561ffd15b048 <unknown>\nE       #20 0x561ffd15b219 <unknown>\nE       #21 0x561ffd16bac3 <unknown>\nE       #22 0x7fe5e216e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468160177,"stop":1696468160250,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1696468161307,"stop":1696468161363,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"dd6ff64cdfc38c71","name":"Screenshot","source":"dd6ff64cdfc38c71.png","type":"image/png","size":181849},{"uid":"349123a507316eae","name":"HTML source","source":"349123a507316eae.html","type":"text/html","size":749655}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696468162699,"stop":1696468162699,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696468162699,"stop":1696468162769,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":64,"unknown":0,"total":73},"items":[{"uid":"cb385f2e55a6e77f","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/cb385f2e55a6e77f","status":"passed","time":{"start":1696381478259,"stop":1696381489740,"duration":11481}},{"uid":"e48139040e69cdd6","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/e48139040e69cdd6","status":"passed","time":{"start":1696295016905,"stop":1696295028274,"duration":11369}},{"uid":"827cbd851b7c38fe","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/827cbd851b7c38fe","status":"passed","time":{"start":1696282957604,"stop":1696282970587,"duration":12983}},{"uid":"c7455aabb6bae697","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/c7455aabb6bae697","status":"passed","time":{"start":1696258545154,"stop":1696258556041,"duration":10887}},{"uid":"129848fd0ec97814","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/129848fd0ec97814","status":"passed","time":{"start":1696208666264,"stop":1696208676875,"duration":10611}},{"uid":"b02a0a253b0c44e2","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/b02a0a253b0c44e2","status":"passed","time":{"start":1696122654637,"stop":1696122665355,"duration":10718}},{"uid":"947ac07fc087018","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/947ac07fc087018","status":"passed","time":{"start":1696035620402,"stop":1696035630472,"duration":10070}},{"uid":"e2cdc14c83d943c1","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/e2cdc14c83d943c1","status":"passed","time":{"start":1695949343181,"stop":1695949353208,"duration":10027}},{"uid":"efb4ee431bda8beb","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/efb4ee431bda8beb","status":"passed","time":{"start":1695863212328,"stop":1695863223667,"duration":11339}},{"uid":"d4aa7e99f3e71d41","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/d4aa7e99f3e71d41","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1695777020808,"stop":1695777047406,"duration":26598}},{"uid":"20d65428ea400613","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/20d65428ea400613","status":"passed","time":{"start":1695690503207,"stop":1695690514273,"duration":11066}},{"uid":"593514533fc8cb70","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/593514533fc8cb70","status":"passed","time":{"start":1695604055853,"stop":1695604067104,"duration":11251}},{"uid":"1cc05677fd38a855","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/1cc05677fd38a855","status":"passed","time":{"start":1695517470745,"stop":1695517480632,"duration":9887}},{"uid":"eda9e94b5cf2c8b5","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/eda9e94b5cf2c8b5","status":"passed","time":{"start":1695431123543,"stop":1695431135206,"duration":11663}},{"uid":"516da037a240f614","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/516da037a240f614","status":"passed","time":{"start":1695406420550,"stop":1695406432319,"duration":11769}},{"uid":"7ba7922af1cbe179","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/7ba7922af1cbe179","status":"passed","time":{"start":1695344548477,"stop":1695344559165,"duration":10688}},{"uid":"3e325a5441405a1e","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/3e325a5441405a1e","status":"passed","time":{"start":1695258123727,"stop":1695258133633,"duration":9906}},{"uid":"55189764aafeeb71","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/55189764aafeeb71","status":"passed","time":{"start":1695172194825,"stop":1695172206676,"duration":11851}},{"uid":"bc1e2f15b7728f04","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/bc1e2f15b7728f04","status":"passed","time":{"start":1695085480996,"stop":1695085491365,"duration":10369}},{"uid":"aec386033d26ab1","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/aec386033d26ab1","status":"passed","time":{"start":1695064063846,"stop":1695064075305,"duration":11459}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"7d40a0c8f70b4e46.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/action'"]}