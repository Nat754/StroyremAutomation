{"uid":"db4da9b26e9926b7","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke","historyId":"5ec2250188f66239d7a557e2f16d23d1","time":{"start":1696467983894,"stop":1696467986237,"duration":2343},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x555840da6933 <unknown>\n#1 0x555840a806f7 <unknown>\n#2 0x555840acdb9d <unknown>\n#3 0x555840acbf3d <unknown>\n#4 0x555840ac9cf8 <unknown>\n#5 0x555840ac8d67 <unknown>\n#6 0x555840abda29 <unknown>\n#7 0x555840ae9602 <unknown>\n#8 0x555840abd446 <unknown>\n#9 0x555840ae97ce <unknown>\n#10 0x555840b02857 <unknown>\n#11 0x555840ae93d3 <unknown>\n#12 0x555840abbe64 <unknown>\n#13 0x555840abcc4e <unknown>\n#14 0x555840d6c558 <unknown>\n#15 0x555840d704a0 <unknown>\n#16 0x555840d7a97c <unknown>\n#17 0x555840d710b8 <unknown>\n#18 0x555840d3ccdf <unknown>\n#19 0x555840d95048 <unknown>\n#20 0x555840d95219 <unknown>\n#21 0x555840da5ac3 <unknown>\n#22 0x7f6857e49044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f4200769a90>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fff8ad10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe83bb50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555840d95219 \\\\u003Cunknown>\\\\n#21 0x555840da5ac3 \\\\u003Cunknown>\\\\n#22 0x7f6857e49044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x555840da6933 <unknown>\nE       #1 0x555840a806f7 <unknown>\nE       #2 0x555840acdb9d <unknown>\nE       #3 0x555840acbf3d <unknown>\nE       #4 0x555840ac9cf8 <unknown>\nE       #5 0x555840ac8d67 <unknown>\nE       #6 0x555840abda29 <unknown>\nE       #7 0x555840ae9602 <unknown>\nE       #8 0x555840abd446 <unknown>\nE       #9 0x555840ae97ce <unknown>\nE       #10 0x555840b02857 <unknown>\nE       #11 0x555840ae93d3 <unknown>\nE       #12 0x555840abbe64 <unknown>\nE       #13 0x555840abcc4e <unknown>\nE       #14 0x555840d6c558 <unknown>\nE       #15 0x555840d704a0 <unknown>\nE       #16 0x555840d7a97c <unknown>\nE       #17 0x555840d710b8 <unknown>\nE       #18 0x555840d3ccdf <unknown>\nE       #19 0x555840d95048 <unknown>\nE       #20 0x555840d95219 <unknown>\nE       #21 0x555840da5ac3 <unknown>\nE       #22 0x7f6857e49044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696467971788,"stop":1696467972602,"duration":814},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696467972602,"stop":1696467972602,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696467972603,"stop":1696467983894,"duration":11291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x555840da6933 <unknown>\n#1 0x555840a806f7 <unknown>\n#2 0x555840acdb9d <unknown>\n#3 0x555840acbf3d <unknown>\n#4 0x555840ac9cf8 <unknown>\n#5 0x555840ac8d67 <unknown>\n#6 0x555840abda29 <unknown>\n#7 0x555840ae9602 <unknown>\n#8 0x555840abd446 <unknown>\n#9 0x555840ae97ce <unknown>\n#10 0x555840b02857 <unknown>\n#11 0x555840ae93d3 <unknown>\n#12 0x555840abbe64 <unknown>\n#13 0x555840abcc4e <unknown>\n#14 0x555840d6c558 <unknown>\n#15 0x555840d704a0 <unknown>\n#16 0x555840d7a97c <unknown>\n#17 0x555840d710b8 <unknown>\n#18 0x555840d3ccdf <unknown>\n#19 0x555840d95048 <unknown>\n#20 0x555840d95219 <unknown>\n#21 0x555840da5ac3 <unknown>\n#22 0x7f6857e49044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f4200769a90>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fff8ad10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe83bb50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555840d95219 \\\\u003Cunknown>\\\\n#21 0x555840da5ac3 \\\\u003Cunknown>\\\\n#22 0x7f6857e49044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x555840da6933 <unknown>\nE       #1 0x555840a806f7 <unknown>\nE       #2 0x555840acdb9d <unknown>\nE       #3 0x555840acbf3d <unknown>\nE       #4 0x555840ac9cf8 <unknown>\nE       #5 0x555840ac8d67 <unknown>\nE       #6 0x555840abda29 <unknown>\nE       #7 0x555840ae9602 <unknown>\nE       #8 0x555840abd446 <unknown>\nE       #9 0x555840ae97ce <unknown>\nE       #10 0x555840b02857 <unknown>\nE       #11 0x555840ae93d3 <unknown>\nE       #12 0x555840abbe64 <unknown>\nE       #13 0x555840abcc4e <unknown>\nE       #14 0x555840d6c558 <unknown>\nE       #15 0x555840d704a0 <unknown>\nE       #16 0x555840d7a97c <unknown>\nE       #17 0x555840d710b8 <unknown>\nE       #18 0x555840d3ccdf <unknown>\nE       #19 0x555840d95048 <unknown>\nE       #20 0x555840d95219 <unknown>\nE       #21 0x555840da5ac3 <unknown>\nE       #22 0x7f6857e49044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1696467983894,"stop":1696467983932,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1696467984001,"stop":1696467984044,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696467985096,"stop":1696467985149,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"4c68012f63bbe0ae","name":"Screenshot","source":"4c68012f63bbe0ae.png","type":"image/png","size":72081},{"uid":"af1a000e4dcf6609","name":"HTML source","source":"af1a000e4dcf6609.html","type":"text/html","size":664077}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696467986431,"stop":1696467986431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696467986431,"stop":1696467986495,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":83,"unknown":0,"total":85},"items":[{"uid":"cb70fae87933fd00","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/cb70fae87933fd00","status":"passed","time":{"start":1696381297388,"stop":1696381306108,"duration":8720}},{"uid":"9a096781da73947","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/9a096781da73947","status":"passed","time":{"start":1696294845100,"stop":1696294853499,"duration":8399}},{"uid":"d2d4a0803b12f812","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/d2d4a0803b12f812","status":"passed","time":{"start":1696282726030,"stop":1696282735920,"duration":9890}},{"uid":"340797478b98cacd","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/340797478b98cacd","status":"passed","time":{"start":1696258349695,"stop":1696258357535,"duration":7840}},{"uid":"ef07447b071b35c9","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/ef07447b071b35c9","status":"passed","time":{"start":1696208491224,"stop":1696208498803,"duration":7579}},{"uid":"2cd20773814c4e57","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/2cd20773814c4e57","status":"passed","time":{"start":1696122475034,"stop":1696122482655,"duration":7621}},{"uid":"f0da1ecda88d4766","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/f0da1ecda88d4766","status":"passed","time":{"start":1696035456469,"stop":1696035463726,"duration":7257}},{"uid":"a5542a33bb571bcf","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/a5542a33bb571bcf","status":"passed","time":{"start":1695949183623,"stop":1695949191504,"duration":7881}},{"uid":"f084ec6e2e188e7a","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/f084ec6e2e188e7a","status":"passed","time":{"start":1695862982284,"stop":1695862991031,"duration":8747}},{"uid":"2d0ca4ce486e02b5","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/2d0ca4ce486e02b5","status":"passed","time":{"start":1695776802001,"stop":1695776810633,"duration":8632}},{"uid":"5d6a0f6027798a76","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/5d6a0f6027798a76","status":"passed","time":{"start":1695690270915,"stop":1695690278757,"duration":7842}},{"uid":"77e2c023eb115d30","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/77e2c023eb115d30","status":"passed","time":{"start":1695603837892,"stop":1695603846167,"duration":8275}},{"uid":"194b38ab83ca4887","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/194b38ab83ca4887","status":"passed","time":{"start":1695517310034,"stop":1695517317468,"duration":7434}},{"uid":"8812e41ba7dfc089","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/8812e41ba7dfc089","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1695430866028,"stop":1695430889709,"duration":23681}},{"uid":"adfebbba9a4daf85","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/adfebbba9a4daf85","status":"passed","time":{"start":1695406179384,"stop":1695406188568,"duration":9184}},{"uid":"3ac97ebe1d90f7eb","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/3ac97ebe1d90f7eb","status":"passed","time":{"start":1695344373042,"stop":1695344380385,"duration":7343}},{"uid":"6ae368de68dabe56","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/6ae368de68dabe56","status":"passed","time":{"start":1695257953249,"stop":1695257960514,"duration":7265}},{"uid":"9c617633ecb52611","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/9c617633ecb52611","status":"passed","time":{"start":1695171967695,"stop":1695171976497,"duration":8802}},{"uid":"ab19fdbf63ec0a9","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/ab19fdbf63ec0a9","status":"passed","time":{"start":1695085289635,"stop":1695085297299,"duration":7664}},{"uid":"30f12d0fdf2afe04","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/30f12d0fdf2afe04","status":"passed","time":{"start":1695063845501,"stop":1695063853913,"duration":8412}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"db4da9b26e9926b7.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}