{"uid":"d51eccaaf0601ae3","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"1b0f7ad8d89bc0387b43367254f3fa4d","time":{"start":1696468123800,"stop":1696468126154,"duration":2354},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5584029cf933 <unknown>\n#1 0x5584026a96f7 <unknown>\n#2 0x5584026f6b9d <unknown>\n#3 0x5584026f4f3d <unknown>\n#4 0x5584026f2cf8 <unknown>\n#5 0x5584026f1d67 <unknown>\n#6 0x5584026e6a29 <unknown>\n#7 0x558402712602 <unknown>\n#8 0x5584026e6446 <unknown>\n#9 0x5584027127ce <unknown>\n#10 0x55840272b857 <unknown>\n#11 0x5584027123d3 <unknown>\n#12 0x5584026e4e64 <unknown>\n#13 0x5584026e5c4e <unknown>\n#14 0x558402995558 <unknown>\n#15 0x5584029994a0 <unknown>\n#16 0x5584029a397c <unknown>\n#17 0x55840299a0b8 <unknown>\n#18 0x558402965cdf <unknown>\n#19 0x5584029be048 <unknown>\n#20 0x5584029be219 <unknown>\n#21 0x5584029ceac3 <unknown>\n#22 0x7f1923e0a044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f4200768550>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fe809350>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe87be90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5584029be219 \\\\u003Cunknown>\\\\n#21 0x5584029ceac3 \\\\u003Cunknown>\\\\n#22 0x7f1923e0a044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5584029cf933 <unknown>\nE       #1 0x5584026a96f7 <unknown>\nE       #2 0x5584026f6b9d <unknown>\nE       #3 0x5584026f4f3d <unknown>\nE       #4 0x5584026f2cf8 <unknown>\nE       #5 0x5584026f1d67 <unknown>\nE       #6 0x5584026e6a29 <unknown>\nE       #7 0x558402712602 <unknown>\nE       #8 0x5584026e6446 <unknown>\nE       #9 0x5584027127ce <unknown>\nE       #10 0x55840272b857 <unknown>\nE       #11 0x5584027123d3 <unknown>\nE       #12 0x5584026e4e64 <unknown>\nE       #13 0x5584026e5c4e <unknown>\nE       #14 0x558402995558 <unknown>\nE       #15 0x5584029994a0 <unknown>\nE       #16 0x5584029a397c <unknown>\nE       #17 0x55840299a0b8 <unknown>\nE       #18 0x558402965cdf <unknown>\nE       #19 0x5584029be048 <unknown>\nE       #20 0x5584029be219 <unknown>\nE       #21 0x5584029ceac3 <unknown>\nE       #22 0x7f1923e0a044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696468099132,"stop":1696468099941,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696468099941,"stop":1696468099941,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696468099942,"stop":1696468123800,"duration":23858},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5584029cf933 <unknown>\n#1 0x5584026a96f7 <unknown>\n#2 0x5584026f6b9d <unknown>\n#3 0x5584026f4f3d <unknown>\n#4 0x5584026f2cf8 <unknown>\n#5 0x5584026f1d67 <unknown>\n#6 0x5584026e6a29 <unknown>\n#7 0x558402712602 <unknown>\n#8 0x5584026e6446 <unknown>\n#9 0x5584027127ce <unknown>\n#10 0x55840272b857 <unknown>\n#11 0x5584027123d3 <unknown>\n#12 0x5584026e4e64 <unknown>\n#13 0x5584026e5c4e <unknown>\n#14 0x558402995558 <unknown>\n#15 0x5584029994a0 <unknown>\n#16 0x5584029a397c <unknown>\n#17 0x55840299a0b8 <unknown>\n#18 0x558402965cdf <unknown>\n#19 0x5584029be048 <unknown>\n#20 0x5584029be219 <unknown>\n#21 0x5584029ceac3 <unknown>\n#22 0x7f1923e0a044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f4200768550>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fe809350>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe87be90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5584029be219 \\\\u003Cunknown>\\\\n#21 0x5584029ceac3 \\\\u003Cunknown>\\\\n#22 0x7f1923e0a044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5584029cf933 <unknown>\nE       #1 0x5584026a96f7 <unknown>\nE       #2 0x5584026f6b9d <unknown>\nE       #3 0x5584026f4f3d <unknown>\nE       #4 0x5584026f2cf8 <unknown>\nE       #5 0x5584026f1d67 <unknown>\nE       #6 0x5584026e6a29 <unknown>\nE       #7 0x558402712602 <unknown>\nE       #8 0x5584026e6446 <unknown>\nE       #9 0x5584027127ce <unknown>\nE       #10 0x55840272b857 <unknown>\nE       #11 0x5584027123d3 <unknown>\nE       #12 0x5584026e4e64 <unknown>\nE       #13 0x5584026e5c4e <unknown>\nE       #14 0x558402995558 <unknown>\nE       #15 0x5584029994a0 <unknown>\nE       #16 0x5584029a397c <unknown>\nE       #17 0x55840299a0b8 <unknown>\nE       #18 0x558402965cdf <unknown>\nE       #19 0x5584029be048 <unknown>\nE       #20 0x5584029be219 <unknown>\nE       #21 0x5584029ceac3 <unknown>\nE       #22 0x7f1923e0a044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1696468123800,"stop":1696468123845,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1696468123909,"stop":1696468123953,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468125003,"stop":1696468125060,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"692a7a8c39c3e808","name":"Screenshot","source":"692a7a8c39c3e808.png","type":"image/png","size":152750},{"uid":"8e0fb7b214eee64d","name":"HTML source","source":"8e0fb7b214eee64d.html","type":"text/html","size":879456}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696468126384,"stop":1696468126384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696468126385,"stop":1696468126460,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":73,"unknown":0,"total":80},"items":[{"uid":"385b7b62a9d41a2d","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/385b7b62a9d41a2d","status":"passed","time":{"start":1696381435964,"stop":1696381444452,"duration":8488}},{"uid":"d2b69fb43d453338","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/d2b69fb43d453338","status":"passed","time":{"start":1696294977962,"stop":1696294986151,"duration":8189}},{"uid":"6a4075ec804ba9a1","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/6a4075ec804ba9a1","status":"passed","time":{"start":1696282904077,"stop":1696282914415,"duration":10338}},{"uid":"1dbb152c7a47ac5","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/1dbb152c7a47ac5","status":"passed","time":{"start":1696258500359,"stop":1696258508802,"duration":8443}},{"uid":"ffe50e2873eedfdd","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/ffe50e2873eedfdd","status":"passed","time":{"start":1696208628630,"stop":1696208636012,"duration":7382}},{"uid":"dc400b37978edb73","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/dc400b37978edb73","status":"passed","time":{"start":1696122613757,"stop":1696122621932,"duration":8175}},{"uid":"188fdb3b61b87be1","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/188fdb3b61b87be1","status":"passed","time":{"start":1696035584676,"stop":1696035591536,"duration":6860}},{"uid":"6b2932b534395f78","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/6b2932b534395f78","status":"passed","time":{"start":1695949307026,"stop":1695949313988,"duration":6962}},{"uid":"54a19b61e0f95a89","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/54a19b61e0f95a89","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1695863150265,"stop":1695863173824,"duration":23559}},{"uid":"e25b17ac0037630c","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/e25b17ac0037630c","status":"passed","time":{"start":1695776971448,"stop":1695776980869,"duration":9421}},{"uid":"af729c39c46f8d87","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/af729c39c46f8d87","status":"passed","time":{"start":1695690452005,"stop":1695690460098,"duration":8093}},{"uid":"5e34dba33547ee5e","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/5e34dba33547ee5e","status":"passed","time":{"start":1695604007372,"stop":1695604015985,"duration":8613}},{"uid":"e3dd69dccc7f1bd2","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/e3dd69dccc7f1bd2","status":"passed","time":{"start":1695517434273,"stop":1695517441293,"duration":7020}},{"uid":"c46e7daa414d915d","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/c46e7daa414d915d","status":"passed","time":{"start":1695431071888,"stop":1695431081404,"duration":9516}},{"uid":"4a665e79f394b8c7","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/4a665e79f394b8c7","status":"passed","time":{"start":1695406369911,"stop":1695406379150,"duration":9239}},{"uid":"5ef4a32e54e357cc","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/5ef4a32e54e357cc","status":"passed","time":{"start":1695344509236,"stop":1695344516428,"duration":7192}},{"uid":"ff2f76aec71fa9ae","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/ff2f76aec71fa9ae","status":"passed","time":{"start":1695258083882,"stop":1695258091439,"duration":7557}},{"uid":"5c583c9029104175","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/5c583c9029104175","status":"passed","time":{"start":1695172142059,"stop":1695172150679,"duration":8620}},{"uid":"3ecf210aba5544d4","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/3ecf210aba5544d4","status":"passed","time":{"start":1695085436791,"stop":1695085444723,"duration":7932}},{"uid":"2a9a9d13c1b96181","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/2a9a9d13c1b96181","status":"passed","time":{"start":1695064013864,"stop":1695064022442,"duration":8578}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"d51eccaaf0601ae3.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"]}