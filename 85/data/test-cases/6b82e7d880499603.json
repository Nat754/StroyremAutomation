{"uid":"6b82e7d880499603","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"56dc95032881057b0b8ffab5dc914f14","time":{"start":1696468139520,"stop":1696468141783,"duration":2263},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5586d9e66933 <unknown>\n#1 0x5586d9b406f7 <unknown>\n#2 0x5586d9b8db9d <unknown>\n#3 0x5586d9b8bf3d <unknown>\n#4 0x5586d9b89cf8 <unknown>\n#5 0x5586d9b88d67 <unknown>\n#6 0x5586d9b7da29 <unknown>\n#7 0x5586d9ba9602 <unknown>\n#8 0x5586d9b7d446 <unknown>\n#9 0x5586d9ba97ce <unknown>\n#10 0x5586d9bc2857 <unknown>\n#11 0x5586d9ba93d3 <unknown>\n#12 0x5586d9b7be64 <unknown>\n#13 0x5586d9b7cc4e <unknown>\n#14 0x5586d9e2c558 <unknown>\n#15 0x5586d9e304a0 <unknown>\n#16 0x5586d9e3a97c <unknown>\n#17 0x5586d9e310b8 <unknown>\n#18 0x5586d9dfccdf <unknown>\n#19 0x5586d9e55048 <unknown>\n#20 0x5586d9e55219 <unknown>\n#21 0x5586d9e65ac3 <unknown>\n#22 0x7f89a8668044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080f710>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f4200673290>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fff8f0d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5586d9e55219 \\\\u003Cunknown>\\\\n#21 0x5586d9e65ac3 \\\\u003Cunknown>\\\\n#22 0x7f89a8668044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5586d9e66933 <unknown>\nE       #1 0x5586d9b406f7 <unknown>\nE       #2 0x5586d9b8db9d <unknown>\nE       #3 0x5586d9b8bf3d <unknown>\nE       #4 0x5586d9b89cf8 <unknown>\nE       #5 0x5586d9b88d67 <unknown>\nE       #6 0x5586d9b7da29 <unknown>\nE       #7 0x5586d9ba9602 <unknown>\nE       #8 0x5586d9b7d446 <unknown>\nE       #9 0x5586d9ba97ce <unknown>\nE       #10 0x5586d9bc2857 <unknown>\nE       #11 0x5586d9ba93d3 <unknown>\nE       #12 0x5586d9b7be64 <unknown>\nE       #13 0x5586d9b7cc4e <unknown>\nE       #14 0x5586d9e2c558 <unknown>\nE       #15 0x5586d9e304a0 <unknown>\nE       #16 0x5586d9e3a97c <unknown>\nE       #17 0x5586d9e310b8 <unknown>\nE       #18 0x5586d9dfccdf <unknown>\nE       #19 0x5586d9e55048 <unknown>\nE       #20 0x5586d9e55219 <unknown>\nE       #21 0x5586d9e65ac3 <unknown>\nE       #22 0x7f89a8668044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696468126461,"stop":1696468127267,"duration":806},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696468127268,"stop":1696468127268,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696468127268,"stop":1696468139519,"duration":12251},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x5586d9e66933 <unknown>\n#1 0x5586d9b406f7 <unknown>\n#2 0x5586d9b8db9d <unknown>\n#3 0x5586d9b8bf3d <unknown>\n#4 0x5586d9b89cf8 <unknown>\n#5 0x5586d9b88d67 <unknown>\n#6 0x5586d9b7da29 <unknown>\n#7 0x5586d9ba9602 <unknown>\n#8 0x5586d9b7d446 <unknown>\n#9 0x5586d9ba97ce <unknown>\n#10 0x5586d9bc2857 <unknown>\n#11 0x5586d9ba93d3 <unknown>\n#12 0x5586d9b7be64 <unknown>\n#13 0x5586d9b7cc4e <unknown>\n#14 0x5586d9e2c558 <unknown>\n#15 0x5586d9e304a0 <unknown>\n#16 0x5586d9e3a97c <unknown>\n#17 0x5586d9e310b8 <unknown>\n#18 0x5586d9dfccdf <unknown>\n#19 0x5586d9e55048 <unknown>\n#20 0x5586d9e55219 <unknown>\n#21 0x5586d9e65ac3 <unknown>\n#22 0x7f89a8668044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080f710>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f4200673290>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fff8f0d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5586d9e55219 \\\\u003Cunknown>\\\\n#21 0x5586d9e65ac3 \\\\u003Cunknown>\\\\n#22 0x7f89a8668044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x5586d9e66933 <unknown>\nE       #1 0x5586d9b406f7 <unknown>\nE       #2 0x5586d9b8db9d <unknown>\nE       #3 0x5586d9b8bf3d <unknown>\nE       #4 0x5586d9b89cf8 <unknown>\nE       #5 0x5586d9b88d67 <unknown>\nE       #6 0x5586d9b7da29 <unknown>\nE       #7 0x5586d9ba9602 <unknown>\nE       #8 0x5586d9b7d446 <unknown>\nE       #9 0x5586d9ba97ce <unknown>\nE       #10 0x5586d9bc2857 <unknown>\nE       #11 0x5586d9ba93d3 <unknown>\nE       #12 0x5586d9b7be64 <unknown>\nE       #13 0x5586d9b7cc4e <unknown>\nE       #14 0x5586d9e2c558 <unknown>\nE       #15 0x5586d9e304a0 <unknown>\nE       #16 0x5586d9e3a97c <unknown>\nE       #17 0x5586d9e310b8 <unknown>\nE       #18 0x5586d9dfccdf <unknown>\nE       #19 0x5586d9e55048 <unknown>\nE       #20 0x5586d9e55219 <unknown>\nE       #21 0x5586d9e65ac3 <unknown>\nE       #22 0x7f89a8668044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468139520,"stop":1696468139601,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1696468140687,"stop":1696468140742,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"f2f6909ad0093527","name":"Screenshot","source":"f2f6909ad0093527.png","type":"image/png","size":187846},{"uid":"fcd9519e045f05fa","name":"HTML source","source":"fcd9519e045f05fa.html","type":"text/html","size":797049}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1696468142018,"stop":1696468142086,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1696468142018,"stop":1696468142018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":72,"unknown":0,"total":73},"items":[{"uid":"fe23f4f9de222cab","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/fe23f4f9de222cab","status":"passed","time":{"start":1696381454506,"stop":1696381465955,"duration":11449}},{"uid":"45cd7ac376ece273","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/45cd7ac376ece273","status":"passed","time":{"start":1696294994852,"stop":1696295006253,"duration":11401}},{"uid":"d47f25649cb6a0ac","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/d47f25649cb6a0ac","status":"passed","time":{"start":1696282927119,"stop":1696282940128,"duration":13009}},{"uid":"b3925b76213c9aa8","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/b3925b76213c9aa8","status":"passed","time":{"start":1696258518982,"stop":1696258530439,"duration":11457}},{"uid":"2cec76094cf52ce2","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/2cec76094cf52ce2","status":"passed","time":{"start":1696208644696,"stop":1696208655391,"duration":10695}},{"uid":"baa0c6a64ce511c6","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/baa0c6a64ce511c6","status":"passed","time":{"start":1696122631300,"stop":1696122641889,"duration":10589}},{"uid":"f2ebd56b1f1329","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/f2ebd56b1f1329","status":"passed","time":{"start":1696035599272,"stop":1696035609274,"duration":10002}},{"uid":"3400e82634f4ab12","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/3400e82634f4ab12","status":"passed","time":{"start":1695949322283,"stop":1695949332284,"duration":10001}},{"uid":"17429f199def1526","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/17429f199def1526","status":"passed","time":{"start":1695863185293,"stop":1695863196895,"duration":11602}},{"uid":"32ac205081db1880","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/32ac205081db1880","status":"passed","time":{"start":1695776993056,"stop":1695777004652,"duration":11596}},{"uid":"c2f65576efc78af8","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/c2f65576efc78af8","status":"passed","time":{"start":1695690475794,"stop":1695690486576,"duration":10782}},{"uid":"93766899f9e044dd","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/93766899f9e044dd","status":"passed","time":{"start":1695604027955,"stop":1695604039491,"duration":11536}},{"uid":"9088cb782de1af04","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/9088cb782de1af04","status":"passed","time":{"start":1695517449607,"stop":1695517459630,"duration":10023}},{"uid":"6d2f536655ae1cfc","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/6d2f536655ae1cfc","status":"passed","time":{"start":1695431093941,"stop":1695431106101,"duration":12160}},{"uid":"1ab06215e3ac8f95","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/1ab06215e3ac8f95","status":"passed","time":{"start":1695406391652,"stop":1695406404271,"duration":12619}},{"uid":"e50785adce9d73ad","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/e50785adce9d73ad","status":"passed","time":{"start":1695344525394,"stop":1695344535409,"duration":10015}},{"uid":"58321d1a4be824a1","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/58321d1a4be824a1","status":"passed","time":{"start":1695258099459,"stop":1695258109577,"duration":10118}},{"uid":"49251b9672de1ee3","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/49251b9672de1ee3","status":"passed","time":{"start":1695172163272,"stop":1695172175142,"duration":11870}},{"uid":"bc91d433814ff4c6","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/bc91d433814ff4c6","status":"passed","time":{"start":1695085454914,"stop":1695085465429,"duration":10515}},{"uid":"5bdcadedb5ad8f1a","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/5bdcadedb5ad8f1a","status":"passed","time":{"start":1695064033777,"stop":1695064045143,"duration":11366}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"6b82e7d880499603.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}