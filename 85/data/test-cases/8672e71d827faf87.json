{"uid":"8672e71d827faf87","name":"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","historyId":"20a229ea56dbfac299ce8155fae6537d","time":{"start":1696468318938,"stop":1696468321291,"duration":2353},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x562cc4569933 <unknown>\n#1 0x562cc42436f7 <unknown>\n#2 0x562cc4290b9d <unknown>\n#3 0x562cc428ef3d <unknown>\n#4 0x562cc428ccf8 <unknown>\n#5 0x562cc428bd67 <unknown>\n#6 0x562cc4280a29 <unknown>\n#7 0x562cc42ac602 <unknown>\n#8 0x562cc4280446 <unknown>\n#9 0x562cc42ac7ce <unknown>\n#10 0x562cc42c5857 <unknown>\n#11 0x562cc42ac3d3 <unknown>\n#12 0x562cc427ee64 <unknown>\n#13 0x562cc427fc4e <unknown>\n#14 0x562cc452f558 <unknown>\n#15 0x562cc45334a0 <unknown>\n#16 0x562cc453d97c <unknown>\n#17 0x562cc45340b8 <unknown>\n#18 0x562cc44ffcdf <unknown>\n#19 0x562cc4558048 <unknown>\n#20 0x562cc4558219 <unknown>\n#21 0x562cc4568ac3 <unknown>\n#22 0x7f50a1f7e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080c150>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fff46710>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe7d0350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562cc4558219 \\\\u003Cunknown>\\\\n#21 0x562cc4568ac3 \\\\u003Cunknown>\\\\n#22 0x7f50a1f7e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x562cc4569933 <unknown>\nE       #1 0x562cc42436f7 <unknown>\nE       #2 0x562cc4290b9d <unknown>\nE       #3 0x562cc428ef3d <unknown>\nE       #4 0x562cc428ccf8 <unknown>\nE       #5 0x562cc428bd67 <unknown>\nE       #6 0x562cc4280a29 <unknown>\nE       #7 0x562cc42ac602 <unknown>\nE       #8 0x562cc4280446 <unknown>\nE       #9 0x562cc42ac7ce <unknown>\nE       #10 0x562cc42c5857 <unknown>\nE       #11 0x562cc42ac3d3 <unknown>\nE       #12 0x562cc427ee64 <unknown>\nE       #13 0x562cc427fc4e <unknown>\nE       #14 0x562cc452f558 <unknown>\nE       #15 0x562cc45334a0 <unknown>\nE       #16 0x562cc453d97c <unknown>\nE       #17 0x562cc45340b8 <unknown>\nE       #18 0x562cc44ffcdf <unknown>\nE       #19 0x562cc4558048 <unknown>\nE       #20 0x562cc4558219 <unknown>\nE       #21 0x562cc4568ac3 <unknown>\nE       #22 0x7f50a1f7e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696466884827,"stop":1696466884906,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696466884906,"stop":1696466884906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696468307805,"stop":1696468308613,"duration":808},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696468308613,"stop":1696468308614,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"product_page_open","time":{"start":1696468308614,"stop":1696468318938,"duration":10324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: headless chrome=117.0.5938.149)\nStacktrace:\n#0 0x562cc4569933 <unknown>\n#1 0x562cc42436f7 <unknown>\n#2 0x562cc4290b9d <unknown>\n#3 0x562cc428ef3d <unknown>\n#4 0x562cc428ccf8 <unknown>\n#5 0x562cc428bd67 <unknown>\n#6 0x562cc4280a29 <unknown>\n#7 0x562cc42ac602 <unknown>\n#8 0x562cc4280446 <unknown>\n#9 0x562cc42ac7ce <unknown>\n#10 0x562cc42c5857 <unknown>\n#11 0x562cc42ac3d3 <unknown>\n#12 0x562cc427ee64 <unknown>\n#13 0x562cc427fc4e <unknown>\n#14 0x562cc452f558 <unknown>\n#15 0x562cc45334a0 <unknown>\n#16 0x562cc453d97c <unknown>\n#17 0x562cc45340b8 <unknown>\n#18 0x562cc44ffcdf <unknown>\n#19 0x562cc4558048 <unknown>\n#20 0x562cc4558219 <unknown>\n#21 0x562cc4568ac3 <unknown>\n#22 0x7f50a1f7e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f420080c150>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f41fff46710>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f41fe7d0350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562cc4558219 \\\\u003Cunknown>\\\\n#21 0x562cc4568ac3 \\\\u003Cunknown>\\\\n#22 0x7f50a1f7e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: headless chrome=117.0.5938.149)\nE       Stacktrace:\nE       #0 0x562cc4569933 <unknown>\nE       #1 0x562cc42436f7 <unknown>\nE       #2 0x562cc4290b9d <unknown>\nE       #3 0x562cc428ef3d <unknown>\nE       #4 0x562cc428ccf8 <unknown>\nE       #5 0x562cc428bd67 <unknown>\nE       #6 0x562cc4280a29 <unknown>\nE       #7 0x562cc42ac602 <unknown>\nE       #8 0x562cc4280446 <unknown>\nE       #9 0x562cc42ac7ce <unknown>\nE       #10 0x562cc42c5857 <unknown>\nE       #11 0x562cc42ac3d3 <unknown>\nE       #12 0x562cc427ee64 <unknown>\nE       #13 0x562cc427fc4e <unknown>\nE       #14 0x562cc452f558 <unknown>\nE       #15 0x562cc45334a0 <unknown>\nE       #16 0x562cc453d97c <unknown>\nE       #17 0x562cc45340b8 <unknown>\nE       #18 0x562cc44ffcdf <unknown>\nE       #19 0x562cc4558048 <unknown>\nE       #20 0x562cc4558219 <unknown>\nE       #21 0x562cc4568ac3 <unknown>\nE       #22 0x7f50a1f7e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1696468318938,"stop":1696468318985,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1696468319054,"stop":1696468319096,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1696468320147,"stop":1696468320203,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"6b383aaa69e50611","name":"Screenshot","source":"6b383aaa69e50611.png","type":"image/png","size":72081},{"uid":"6037ed2e8ece612e","name":"HTML source","source":"6037ed2e8ece612e.html","type":"text/html","size":664077}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696468321486,"stop":1696468321486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696468321487,"stop":1696468321552,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"1b29e55ed669"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":68,"unknown":0,"total":69},"items":[{"uid":"8c3794f35506d2ab","reportUrl":"https://Nat754.github.io/StroyremAutomation/84//#testresult/8c3794f35506d2ab","status":"passed","time":{"start":1696381636741,"stop":1696381647620,"duration":10879}},{"uid":"4bd7227211ac9fca","reportUrl":"https://Nat754.github.io/StroyremAutomation/83//#testresult/4bd7227211ac9fca","status":"passed","time":{"start":1696295170555,"stop":1696295181469,"duration":10914}},{"uid":"941bd2a0b867370","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/941bd2a0b867370","status":"passed","time":{"start":1696283153378,"stop":1696283165454,"duration":12076}},{"uid":"a2f61c15fb4ac68","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/a2f61c15fb4ac68","status":"passed","time":{"start":1696258708981,"stop":1696258719360,"duration":10379}},{"uid":"6d3bf864e3e8a210","reportUrl":"https://Nat754.github.io/StroyremAutomation/81//#testresult/6d3bf864e3e8a210","status":"passed","time":{"start":1696208809515,"stop":1696208819440,"duration":9925}},{"uid":"ac3a3603700bf4f","reportUrl":"https://Nat754.github.io/StroyremAutomation/80//#testresult/ac3a3603700bf4f","status":"passed","time":{"start":1696122811470,"stop":1696122821443,"duration":9973}},{"uid":"2c9bd09832adda2e","reportUrl":"https://Nat754.github.io/StroyremAutomation/79//#testresult/2c9bd09832adda2e","status":"passed","time":{"start":1696035758908,"stop":1696035768499,"duration":9591}},{"uid":"587735e101aa6e22","reportUrl":"https://Nat754.github.io/StroyremAutomation/78//#testresult/587735e101aa6e22","status":"passed","time":{"start":1695949482553,"stop":1695949492035,"duration":9482}},{"uid":"1ab246a202801a6","reportUrl":"https://Nat754.github.io/StroyremAutomation/77//#testresult/1ab246a202801a6","status":"passed","time":{"start":1695863395856,"stop":1695863406580,"duration":10724}},{"uid":"1590fae0a20da41e","reportUrl":"https://Nat754.github.io/StroyremAutomation/76//#testresult/1590fae0a20da41e","status":"passed","time":{"start":1695777224260,"stop":1695777235048,"duration":10788}},{"uid":"7c04757605f3c666","reportUrl":"https://Nat754.github.io/StroyremAutomation/75//#testresult/7c04757605f3c666","status":"passed","time":{"start":1695690694311,"stop":1695690704558,"duration":10247}},{"uid":"b17b0ecb1109ff7f","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/b17b0ecb1109ff7f","status":"passed","time":{"start":1695604240024,"stop":1695604250633,"duration":10609}},{"uid":"58e40f012d992f7d","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/58e40f012d992f7d","status":"passed","time":{"start":1695517609850,"stop":1695517619404,"duration":9554}},{"uid":"4a6e6885afe03d04","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/4a6e6885afe03d04","status":"passed","time":{"start":1695431311008,"stop":1695431322051,"duration":11043}},{"uid":"3bf7f3966828acbc","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/3bf7f3966828acbc","status":"passed","time":{"start":1695406608997,"stop":1695406620119,"duration":11122}},{"uid":"7bc9814c433d14df","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/7bc9814c433d14df","status":"passed","time":{"start":1695344696367,"stop":1695344706100,"duration":9733}},{"uid":"4f82e2c7d54388df","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/4f82e2c7d54388df","status":"passed","time":{"start":1695258279783,"stop":1695258289266,"duration":9483}},{"uid":"5cf9ef025964ea17","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/5cf9ef025964ea17","status":"passed","time":{"start":1695172389789,"stop":1695172400500,"duration":10711}},{"uid":"c42c635f2a3048ad","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/c42c635f2a3048ad","status":"passed","time":{"start":1695085654990,"stop":1695085664926,"duration":9936}},{"uid":"ea7229e941a260fb","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/ea7229e941a260fb","status":"passed","time":{"start":1695064240975,"stop":1695064251505,"duration":10530}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"8672e71d827faf87.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}