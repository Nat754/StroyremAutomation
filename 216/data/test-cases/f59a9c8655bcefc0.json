{"uid":"f59a9c8655bcefc0","name":"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","historyId":"ae0b03f524f3687047fb70a412376bdb","time":{"start":1707786590584,"stop":1707786593817,"duration":3233},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=121.0.6167.85)\nStacktrace:\n#0 0x5616c7e34d93 <unknown>\n#1 0x5616c7b18337 <unknown>\n#2 0x5616c7b6ae2e <unknown>\n#3 0x5616c7b68bd0 <unknown>\n#4 0x5616c7b6644a <unknown>\n#5 0x5616c7b65226 <unknown>\n#6 0x5616c7b586b7 <unknown>\n#7 0x5616c7b86442 <unknown>\n#8 0x5616c7b58028 <unknown>\n#9 0x5616c7b8660e <unknown>\n#10 0x5616c7ba512d <unknown>\n#11 0x5616c7b861e3 <unknown>\n#12 0x5616c7b56135 <unknown>\n#13 0x5616c7b5713e <unknown>\n#14 0x5616c7df8e4b <unknown>\n#15 0x5616c7dfcdfa <unknown>\n#16 0x5616c7de56d5 <unknown>\n#17 0x5616c7dfda6f <unknown>\n#18 0x5616c7dc969f <unknown>\n#19 0x5616c7e22098 <unknown>\n#20 0x5616c7e22262 <unknown>\n#21 0x5616c7e33f34 <unknown>\n#22 0x7f772ea3c134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f495fe04d90>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f495e867890>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4960aa2790>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5616c7e22262 \\\\u003Cunknown>\\\\n#21 0x5616c7e33f34 \\\\u003Cunknown>\\\\n#22 0x7f772ea3c134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=121.0.6167.85)\nE       Stacktrace:\nE       #0 0x5616c7e34d93 <unknown>\nE       #1 0x5616c7b18337 <unknown>\nE       #2 0x5616c7b6ae2e <unknown>\nE       #3 0x5616c7b68bd0 <unknown>\nE       #4 0x5616c7b6644a <unknown>\nE       #5 0x5616c7b65226 <unknown>\nE       #6 0x5616c7b586b7 <unknown>\nE       #7 0x5616c7b86442 <unknown>\nE       #8 0x5616c7b58028 <unknown>\nE       #9 0x5616c7b8660e <unknown>\nE       #10 0x5616c7ba512d <unknown>\nE       #11 0x5616c7b861e3 <unknown>\nE       #12 0x5616c7b56135 <unknown>\nE       #13 0x5616c7b5713e <unknown>\nE       #14 0x5616c7df8e4b <unknown>\nE       #15 0x5616c7dfcdfa <unknown>\nE       #16 0x5616c7de56d5 <unknown>\nE       #17 0x5616c7dfda6f <unknown>\nE       #18 0x5616c7dc969f <unknown>\nE       #19 0x5616c7e22098 <unknown>\nE       #20 0x5616c7e22262 <unknown>\nE       #21 0x5616c7e33f34 <unknown>\nE       #22 0x7f772ea3c134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707785321292,"stop":1707785321363,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1707785321363,"stop":1707785321363,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1707786577779,"stop":1707786578563,"duration":784},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1707786578563,"stop":1707786578563,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1707786578564,"stop":1707786590584,"duration":12020},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=121.0.6167.85)\nStacktrace:\n#0 0x5616c7e34d93 <unknown>\n#1 0x5616c7b18337 <unknown>\n#2 0x5616c7b6ae2e <unknown>\n#3 0x5616c7b68bd0 <unknown>\n#4 0x5616c7b6644a <unknown>\n#5 0x5616c7b65226 <unknown>\n#6 0x5616c7b586b7 <unknown>\n#7 0x5616c7b86442 <unknown>\n#8 0x5616c7b58028 <unknown>\n#9 0x5616c7b8660e <unknown>\n#10 0x5616c7ba512d <unknown>\n#11 0x5616c7b861e3 <unknown>\n#12 0x5616c7b56135 <unknown>\n#13 0x5616c7b5713e <unknown>\n#14 0x5616c7df8e4b <unknown>\n#15 0x5616c7dfcdfa <unknown>\n#16 0x5616c7de56d5 <unknown>\n#17 0x5616c7dfda6f <unknown>\n#18 0x5616c7dc969f <unknown>\n#19 0x5616c7e22098 <unknown>\n#20 0x5616c7e22262 <unknown>\n#21 0x5616c7e33f34 <unknown>\n#22 0x7f772ea3c134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f495fe04d90>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f495e867890>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4960aa2790>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5616c7e22262 \\\\u003Cunknown>\\\\n#21 0x5616c7e33f34 \\\\u003Cunknown>\\\\n#22 0x7f772ea3c134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=121.0.6167.85)\nE       Stacktrace:\nE       #0 0x5616c7e34d93 <unknown>\nE       #1 0x5616c7b18337 <unknown>\nE       #2 0x5616c7b6ae2e <unknown>\nE       #3 0x5616c7b68bd0 <unknown>\nE       #4 0x5616c7b6644a <unknown>\nE       #5 0x5616c7b65226 <unknown>\nE       #6 0x5616c7b586b7 <unknown>\nE       #7 0x5616c7b86442 <unknown>\nE       #8 0x5616c7b58028 <unknown>\nE       #9 0x5616c7b8660e <unknown>\nE       #10 0x5616c7ba512d <unknown>\nE       #11 0x5616c7b861e3 <unknown>\nE       #12 0x5616c7b56135 <unknown>\nE       #13 0x5616c7b5713e <unknown>\nE       #14 0x5616c7df8e4b <unknown>\nE       #15 0x5616c7dfcdfa <unknown>\nE       #16 0x5616c7de56d5 <unknown>\nE       #17 0x5616c7dfda6f <unknown>\nE       #18 0x5616c7dc969f <unknown>\nE       #19 0x5616c7e22098 <unknown>\nE       #20 0x5616c7e22262 <unknown>\nE       #21 0x5616c7e33f34 <unknown>\nE       #22 0x7f772ea3c134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1707786590585,"stop":1707786590641,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1707786592703,"stop":1707786592745,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"a79b997103e25c7d","name":"Screenshot","source":"a79b997103e25c7d.png","type":"image/png","size":204028},{"uid":"df227a27cf58010c","name":"HTML source","source":"df227a27cf58010c.html","type":"text/html","size":845686}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1707786594001,"stop":1707786594001,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1707786594001,"stop":1707786594074,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"5fe26bc8ac41"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":177,"unknown":0,"total":181},"items":[{"uid":"63039203cf473c0a","reportUrl":"https://Nat754.github.io/StroyremAutomation/215//#testresult/63039203cf473c0a","status":"passed","time":{"start":1707699854197,"stop":1707699862965,"duration":8768}},{"uid":"e08cc4980447c4ec","reportUrl":"https://Nat754.github.io/StroyremAutomation/214//#testresult/e08cc4980447c4ec","status":"passed","time":{"start":1707613761891,"stop":1707613770901,"duration":9010}},{"uid":"b3f882b5ebd1f8ac","reportUrl":"https://Nat754.github.io/StroyremAutomation/213//#testresult/b3f882b5ebd1f8ac","status":"passed","time":{"start":1707527100634,"stop":1707527110718,"duration":10084}},{"uid":"24f6c281b56e25b","reportUrl":"https://Nat754.github.io/StroyremAutomation/212//#testresult/24f6c281b56e25b","status":"passed","time":{"start":1707440604639,"stop":1707440614084,"duration":9445}},{"uid":"ddc77f4d781bf91e","reportUrl":"https://Nat754.github.io/StroyremAutomation/211//#testresult/ddc77f4d781bf91e","status":"passed","time":{"start":1707354223183,"stop":1707354232417,"duration":9234}},{"uid":"2d5462a8f2e49543","reportUrl":"https://Nat754.github.io/StroyremAutomation/210//#testresult/2d5462a8f2e49543","status":"passed","time":{"start":1707267764509,"stop":1707267773475,"duration":8966}},{"uid":"bf4209360654c390","reportUrl":"https://Nat754.github.io/StroyremAutomation/209//#testresult/bf4209360654c390","status":"passed","time":{"start":1707181608716,"stop":1707181619022,"duration":10306}},{"uid":"e76280694842fc5c","reportUrl":"https://Nat754.github.io/StroyremAutomation/208//#testresult/e76280694842fc5c","status":"passed","time":{"start":1707095189555,"stop":1707095198707,"duration":9152}},{"uid":"22ec3a2d9e2b2b93","reportUrl":"https://Nat754.github.io/StroyremAutomation/207//#testresult/22ec3a2d9e2b2b93","status":"passed","time":{"start":1707008926947,"stop":1707008935997,"duration":9050}},{"uid":"9f33290e51df7c3e","reportUrl":"https://Nat754.github.io/StroyremAutomation/206//#testresult/9f33290e51df7c3e","status":"passed","time":{"start":1706922440154,"stop":1706922450334,"duration":10180}},{"uid":"5fa5a7584a9fced4","reportUrl":"https://Nat754.github.io/StroyremAutomation/205//#testresult/5fa5a7584a9fced4","status":"passed","time":{"start":1706835881052,"stop":1706835889753,"duration":8701}},{"uid":"d5d0899f0595b4ac","reportUrl":"https://Nat754.github.io/StroyremAutomation/204//#testresult/d5d0899f0595b4ac","status":"passed","time":{"start":1706749882255,"stop":1706749892329,"duration":10074}},{"uid":"29f555c12af443b4","reportUrl":"https://Nat754.github.io/StroyremAutomation/203//#testresult/29f555c12af443b4","status":"passed","time":{"start":1706663145060,"stop":1706663154678,"duration":9618}},{"uid":"95d2f3143ed2fc27","reportUrl":"https://Nat754.github.io/StroyremAutomation/202//#testresult/95d2f3143ed2fc27","status":"passed","time":{"start":1706576618509,"stop":1706576627639,"duration":9130}},{"uid":"9bf85824320fce34","reportUrl":"https://Nat754.github.io/StroyremAutomation/201//#testresult/9bf85824320fce34","status":"passed","time":{"start":1706490499047,"stop":1706490508974,"duration":9927}},{"uid":"2206e38489b8d50","reportUrl":"https://Nat754.github.io/StroyremAutomation/200//#testresult/2206e38489b8d50","status":"passed","time":{"start":1706404299240,"stop":1706404309404,"duration":10164}},{"uid":"7bc3ad6970207888","reportUrl":"https://Nat754.github.io/StroyremAutomation/199//#testresult/7bc3ad6970207888","status":"passed","time":{"start":1706317379821,"stop":1706317388811,"duration":8990}},{"uid":"e0d702dffbe313b5","reportUrl":"https://Nat754.github.io/StroyremAutomation/198//#testresult/e0d702dffbe313b5","status":"passed","time":{"start":1706231140155,"stop":1706231149556,"duration":9401}},{"uid":"faac9c44f371159d","reportUrl":"https://Nat754.github.io/StroyremAutomation/197//#testresult/faac9c44f371159d","status":"passed","time":{"start":1706148705049,"stop":1706148714929,"duration":9880}},{"uid":"cccfa9fb2b3b2d4e","reportUrl":"https://Nat754.github.io/StroyremAutomation/196//#testresult/cccfa9fb2b3b2d4e","status":"passed","time":{"start":1706058827134,"stop":1706058837356,"duration":10222}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"f59a9c8655bcefc0.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}