{"uid":"c9b5eae1f72d9af3","name":"test_positive_delivery_green_zone_smoke[TD 010-products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya-206-6200-2900-5570-6120-https://sandboxtest.stroyrem-nn.ru/]","fullName":"tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation#test_positive_delivery_green_zone_smoke","historyId":"ece4a4b7d2c766759dd3e80afc1ed9c3","time":{"start":1693616199538,"stop":1693616199802,"duration":264},"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5607d1784e23 <unknown>\n#1 0x5607d14ad7a7 <unknown>\n#2 0x5607d14a5829 <unknown>\n#3 0x5607d14952c2 <unknown>\n#4 0x5607d14969fb <unknown>\n#5 0x5607d149569d <unknown>\n#6 0x5607d149465c <unknown>\n#7 0x5607d14945ce <unknown>\n#8 0x5607d149328a <unknown>\n#9 0x5607d14936da <unknown>\n#10 0x5607d14af630 <unknown>\n#11 0x5607d1525b15 <unknown>\n#12 0x5607d150d012 <unknown>\n#13 0x5607d1525369 <unknown>\n#14 0x5607d150cde3 <unknown>\n#15 0x5607d14e0a7b <unknown>\n#16 0x5607d14e181e <unknown>\n#17 0x5607d1746638 <unknown>\n#18 0x5607d174a507 <unknown>\n#19 0x5607d1754c4c <unknown>\n#20 0x5607d174b136 <unknown>\n#21 0x5607d17199cf <unknown>\n#22 0x5607d176eb98 <unknown>\n#23 0x5607d176ed68 <unknown>\n#24 0x5607d177dcb3 <unknown>\n#25 0x7f1a076b0044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7f5ede4da690>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a0446f4ed75773566eeec2aea6db484f\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 010'\nlink_item = 'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'\namount = 206, weight = 6200, standard = 2900, in_time = 5570, all_time = 6120\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 001\", uroven_3000, 1, 30, 0, 1590, 2190),\n        (\"TD 002\", bundeks_25, 1, 30, 400, 1590, 2190),\n        (\"TD 003\", aksolit_30, 8, 300, 400, 1590, 2190),\n        (\"TD 004\", aksolit_30, 13, 400, 450, 1590, 2190),\n        (\"TD 005\", aksolit_30, 16, 500, 600, 1590, 2190),\n        (\"TD 006\", aksolit_30, 25, 1700, 990, 1990, 2480),\n        (\"TD 007\", aksolit_30, 66, 2000, 1300, 2490, 2980),\n        (\"TD 008\", aksolit_30, 149, 4500, 2300, 3980, 4490),\n        (\"TD 009\", aksolit_30, 166, 5000, 2500, 4990, 5480),\n        pytest.param(\n            \"TD 010\", aksolit_30, 206, 6200, 2900, 5570, 6120,\n            marks=pytest.mark.xfail(reson=\"Цена доставки 3600 7960 8980\")\n        ),\n        (\"TD 011\", aksolit_30, 299, 9000, 3600, 7960, 8980),\n        (\"TD 012\", aksolit_30, 333, 10000, 4450, 11990, 12500),\n        pytest.param(\n            \"TD 013\", aksolit_30, 366, 11000, 4800, 12450, 13480,\n            marks=pytest.mark.xfail(reason=\"Цена стандартной доставки 4450\")\n        ),\n        pytest.param(\n            \"TD 014\", aksolit_30, 666, 20000, 5400, 15600, 17490,\n            marks=pytest.mark.xfail(reason=\"Цена стандартной доставки 4450\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_green_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n    \n>       driver.get(f'{url}{link_item}')\n\ntests/delivery/test_delivery_calculation.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5edf08e350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x5607d176ed68 \\\\u003Cunknown>\\\\n#24 0x5607d177dcb3 \\\\u003Cunknown>\\\\n#25 0x7f1a076b0044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5607d1784e23 <unknown>\nE       #1 0x5607d14ad7a7 <unknown>\nE       #2 0x5607d14a5829 <unknown>\nE       #3 0x5607d14952c2 <unknown>\nE       #4 0x5607d14969fb <unknown>\nE       #5 0x5607d149569d <unknown>\nE       #6 0x5607d149465c <unknown>\nE       #7 0x5607d14945ce <unknown>\nE       #8 0x5607d149328a <unknown>\nE       #9 0x5607d14936da <unknown>\nE       #10 0x5607d14af630 <unknown>\nE       #11 0x5607d1525b15 <unknown>\nE       #12 0x5607d150d012 <unknown>\nE       #13 0x5607d1525369 <unknown>\nE       #14 0x5607d150cde3 <unknown>\nE       #15 0x5607d14e0a7b <unknown>\nE       #16 0x5607d14e181e <unknown>\nE       #17 0x5607d1746638 <unknown>\nE       #18 0x5607d174a507 <unknown>\nE       #19 0x5607d1754c4c <unknown>\nE       #20 0x5607d174b136 <unknown>\nE       #21 0x5607d17199cf <unknown>\nE       #22 0x5607d176eb98 <unknown>\nE       #23 0x5607d176ed68 <unknown>\nE       #24 0x5607d177dcb3 <unknown>\nE       #25 0x7f1a076b0044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693615499899,"stop":1693615499999,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1693615499999,"stop":1693615499999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1693616198714,"stop":1693616199536,"duration":822},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1693616199536,"stop":1693616199536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x5607d1784e23 <unknown>\n#1 0x5607d14ad7a7 <unknown>\n#2 0x5607d14a5829 <unknown>\n#3 0x5607d14952c2 <unknown>\n#4 0x5607d14969fb <unknown>\n#5 0x5607d149569d <unknown>\n#6 0x5607d149465c <unknown>\n#7 0x5607d14945ce <unknown>\n#8 0x5607d149328a <unknown>\n#9 0x5607d14936da <unknown>\n#10 0x5607d14af630 <unknown>\n#11 0x5607d1525b15 <unknown>\n#12 0x5607d150d012 <unknown>\n#13 0x5607d1525369 <unknown>\n#14 0x5607d150cde3 <unknown>\n#15 0x5607d14e0a7b <unknown>\n#16 0x5607d14e181e <unknown>\n#17 0x5607d1746638 <unknown>\n#18 0x5607d174a507 <unknown>\n#19 0x5607d1754c4c <unknown>\n#20 0x5607d174b136 <unknown>\n#21 0x5607d17199cf <unknown>\n#22 0x5607d176eb98 <unknown>\n#23 0x5607d176ed68 <unknown>\n#24 0x5607d177dcb3 <unknown>\n#25 0x7f1a076b0044 <unknown>","statusTrace":"self = <tests.delivery.test_delivery_calculation.TestDeliveryPageCalculation object at 0x7f5ede4da690>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a0446f4ed75773566eeec2aea6db484f\")>\nurl = 'https://sandboxtest.stroyrem-nn.ru/', case_id = 'TD 010'\nlink_item = 'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'\namount = 206, weight = 6200, standard = 2900, in_time = 5570, all_time = 6120\n\n    @pytest.mark.parametrize('case_id, link_item, amount, weight, standard, in_time, all_time', [\n        (\"TD 001\", uroven_3000, 1, 30, 0, 1590, 2190),\n        (\"TD 002\", bundeks_25, 1, 30, 400, 1590, 2190),\n        (\"TD 003\", aksolit_30, 8, 300, 400, 1590, 2190),\n        (\"TD 004\", aksolit_30, 13, 400, 450, 1590, 2190),\n        (\"TD 005\", aksolit_30, 16, 500, 600, 1590, 2190),\n        (\"TD 006\", aksolit_30, 25, 1700, 990, 1990, 2480),\n        (\"TD 007\", aksolit_30, 66, 2000, 1300, 2490, 2980),\n        (\"TD 008\", aksolit_30, 149, 4500, 2300, 3980, 4490),\n        (\"TD 009\", aksolit_30, 166, 5000, 2500, 4990, 5480),\n        pytest.param(\n            \"TD 010\", aksolit_30, 206, 6200, 2900, 5570, 6120,\n            marks=pytest.mark.xfail(reson=\"Цена доставки 3600 7960 8980\")\n        ),\n        (\"TD 011\", aksolit_30, 299, 9000, 3600, 7960, 8980),\n        (\"TD 012\", aksolit_30, 333, 10000, 4450, 11990, 12500),\n        pytest.param(\n            \"TD 013\", aksolit_30, 366, 11000, 4800, 12450, 13480,\n            marks=pytest.mark.xfail(reason=\"Цена стандартной доставки 4450\")\n        ),\n        pytest.param(\n            \"TD 014\", aksolit_30, 666, 20000, 5400, 15600, 17490,\n            marks=pytest.mark.xfail(reason=\"Цена стандартной доставки 4450\")\n        )\n    ])\n    @pytest.mark.smoke\n    def test_positive_delivery_green_zone_smoke(\n            self, driver, url, case_id, link_item, amount, weight, standard, in_time, all_time\n    ):\n    \n>       driver.get(f'{url}{link_item}')\n\ntests/delivery/test_delivery_calculation.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:355: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5edf08e350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x5607d176ed68 \\\\u003Cunknown>\\\\n#24 0x5607d177dcb3 \\\\u003Cunknown>\\\\n#25 0x7f1a076b0044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x5607d1784e23 <unknown>\nE       #1 0x5607d14ad7a7 <unknown>\nE       #2 0x5607d14a5829 <unknown>\nE       #3 0x5607d14952c2 <unknown>\nE       #4 0x5607d14969fb <unknown>\nE       #5 0x5607d149569d <unknown>\nE       #6 0x5607d149465c <unknown>\nE       #7 0x5607d14945ce <unknown>\nE       #8 0x5607d149328a <unknown>\nE       #9 0x5607d14936da <unknown>\nE       #10 0x5607d14af630 <unknown>\nE       #11 0x5607d1525b15 <unknown>\nE       #12 0x5607d150d012 <unknown>\nE       #13 0x5607d1525369 <unknown>\nE       #14 0x5607d150cde3 <unknown>\nE       #15 0x5607d14e0a7b <unknown>\nE       #16 0x5607d14e181e <unknown>\nE       #17 0x5607d1746638 <unknown>\nE       #18 0x5607d174a507 <unknown>\nE       #19 0x5607d1754c4c <unknown>\nE       #20 0x5607d174b136 <unknown>\nE       #21 0x5607d17199cf <unknown>\nE       #22 0x5607d176eb98 <unknown>\nE       #23 0x5607d176ed68 <unknown>\nE       #24 0x5607d177dcb3 <unknown>\nE       #25 0x7f1a076b0044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","steps":[],"attachments":[{"uid":"b5582a62cf64e3c1","name":"Screenshot","source":"b5582a62cf64e3c1.png","type":"image/png","size":5862},{"uid":"9dbbf1335f69b96e","name":"HTML source","source":"9dbbf1335f69b96e.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1693616199980,"stop":1693616199980,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1693616199981,"stop":1693616200037,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Delivery Page - calculation"},{"name":"tag","value":"smoke"},{"name":"tag","value":"@pytest.mark.xfail(reson='Цена доставки 3600 7960 8980')"},{"name":"parentSuite","value":"tests.delivery"},{"name":"suite","value":"test_delivery_calculation"},{"name":"subSuite","value":"TestDeliveryPageCalculation"},{"name":"host","value":"1432e4932960"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.delivery.test_delivery_calculation"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"all_time","value":"6120"},{"name":"amount","value":"206"},{"name":"case_id","value":"'TD 010'"},{"name":"in_time","value":"5570"},{"name":"link_item","value":"'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'"},{"name":"standard","value":"2900"},{"name":"url","value":"'https://sandboxtest.stroyrem-nn.ru/'"},{"name":"weight","value":"6200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":3,"passed":0,"unknown":0,"total":3},"items":[{"uid":"c7192a9088719d56","reportUrl":"https://Nat754.github.io/StroyremAutomation/45//#testresult/c7192a9088719d56","status":"skipped","statusDetails":"XFAIL\n\nselenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x55d9921d6e23 <unknown>\n#1 0x55d991eff7a7 <unknown>\n#2 0x55d991ef7829 <unknown>\n#3 0x55d991ee72c2 <unknown>\n#4 0x55d991ee89fb <unknown>\n#5 0x55d991ee769d <unknown>\n#6 0x55d991ee665c <unknown>\n#7 0x55d991ee65ce <unknown>\n#8 0x55d991ee528a <unknown>\n#9 0x55d991ee56da <unknown>\n#10 0x55d991f01630 <unknown>\n#11 0x55d991f77b15 <unknown>\n#12 0x55d991f5f012 <unknown>\n#13 0x55d991f77369 <unknown>\n#14 0x55d991f5ede3 <unknown>\n#15 0x55d991f32a7b <unknown>\n#16 0x55d991f3381e <unknown>\n#17 0x55d992198638 <unknown>\n#18 0x55d99219c507 <unknown>\n#19 0x55d9921a6c4c <unknown>\n#20 0x55d99219d136 <unknown>\n#21 0x55d99216b9cf <unknown>\n#22 0x55d9921c0b98 <unknown>\n#23 0x55d9921c0d68 <unknown>\n#24 0x55d9921cfcb3 <unknown>\n#25 0x7f641a8c2044 <unknown>","time":{"start":1693530121540,"stop":1693530124029,"duration":2489}},{"uid":"863a34299cf81153","reportUrl":"https://Nat754.github.io/StroyremAutomation/2//#testresult/863a34299cf81153","status":"skipped","statusDetails":"XFAIL\n\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"(//a[@class='add-to-cart yellow-btn'])[1]\"}\n  (Session info: headless chrome=116.0.5845.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x55dd3833de23 <unknown>\n#1 0x55dd380667a7 <unknown>\n#2 0x55dd380a51d3 <unknown>\n#3 0x55dd380a52c1 <unknown>\n#4 0x55dd380e0a04 <unknown>\n#5 0x55dd380c603d <unknown>\n#6 0x55dd380de369 <unknown>\n#7 0x55dd380c5de3 <unknown>\n#8 0x55dd38099a7b <unknown>\n#9 0x55dd3809a81e <unknown>\n#10 0x55dd382ff638 <unknown>\n#11 0x55dd38303507 <unknown>\n#12 0x55dd3830dc4c <unknown>\n#13 0x55dd38304136 <unknown>\n#14 0x55dd382d29cf <unknown>\n#15 0x55dd38327b98 <unknown>\n#16 0x55dd38327d68 <unknown>\n#17 0x55dd38336cb3 <unknown>\n#18 0x7fd20157e044 <unknown>","time":{"start":1693476169884,"stop":1693476170497,"duration":613}}]},"tags":["@pytest.mark.xfail(reson='Цена доставки 3600 7960 8980')","smoke"]},"source":"c9b5eae1f72d9af3.json","parameterValues":["6120","206","'TD 010'","5570","'products/shtukaturka-gipsovaya-aksolit-m50-30-kg-mashinnogo-naneseniya'","2900","'https://sandboxtest.stroyrem-nn.ru/'","6200"]}