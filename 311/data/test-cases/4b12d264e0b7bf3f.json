{"uid":"4b12d264e0b7bf3f","name":"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","historyId":"15991ae52c76717db33988570d6dec01","time":{"start":1715995035788,"stop":1715995038077,"duration":2289},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55a2f08e9eca <unknown>\n#1 0x55a2f05d345c <unknown>\n#2 0x55a2f0626336 <unknown>\n#3 0x55a2f0624176 <unknown>\n#4 0x55a2f0621b57 <unknown>\n#5 0x55a2f062097c <unknown>\n#6 0x55a2f06140ff <unknown>\n#7 0x55a2f06424b2 <unknown>\n#8 0x55a2f0613a79 <unknown>\n#9 0x55a2f064267e <unknown>\n#10 0x55a2f06612cc <unknown>\n#11 0x55a2f0642253 <unknown>\n#12 0x55a2f06121c7 <unknown>\n#13 0x55a2f0612b3e <unknown>\n#14 0x55a2f08b030b <unknown>\n#15 0x55a2f08b43b7 <unknown>\n#16 0x55a2f089ce3e <unknown>\n#17 0x55a2f08b4e82 <unknown>\n#18 0x55a2f08817df <unknown>\n#19 0x55a2f08d91b8 <unknown>\n#20 0x55a2f08d938b <unknown>\n#21 0x55a2f08e8ffc <unknown>\n#22 0x7fb29e3d1134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fae140e6890>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fae149e1090>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae14aac9d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a2f08d938b \\\\u003Cunknown>\\\\n#21 0x55a2f08e8ffc \\\\u003Cunknown>\\\\n#22 0x7fb29e3d1134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55a2f08e9eca <unknown>\nE       #1 0x55a2f05d345c <unknown>\nE       #2 0x55a2f0626336 <unknown>\nE       #3 0x55a2f0624176 <unknown>\nE       #4 0x55a2f0621b57 <unknown>\nE       #5 0x55a2f062097c <unknown>\nE       #6 0x55a2f06140ff <unknown>\nE       #7 0x55a2f06424b2 <unknown>\nE       #8 0x55a2f0613a79 <unknown>\nE       #9 0x55a2f064267e <unknown>\nE       #10 0x55a2f06612cc <unknown>\nE       #11 0x55a2f0642253 <unknown>\nE       #12 0x55a2f06121c7 <unknown>\nE       #13 0x55a2f0612b3e <unknown>\nE       #14 0x55a2f08b030b <unknown>\nE       #15 0x55a2f08b43b7 <unknown>\nE       #16 0x55a2f089ce3e <unknown>\nE       #17 0x55a2f08b4e82 <unknown>\nE       #18 0x55a2f08817df <unknown>\nE       #19 0x55a2f08d91b8 <unknown>\nE       #20 0x55a2f08d938b <unknown>\nE       #21 0x55a2f08e8ffc <unknown>\nE       #22 0x7fb29e3d1134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1715993488922,"stop":1715993488991,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1715993488991,"stop":1715993488991,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1715995023214,"stop":1715995023906,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1715995023906,"stop":1715995035788,"duration":11882},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1715995023906,"stop":1715995023906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55a2f08e9eca <unknown>\n#1 0x55a2f05d345c <unknown>\n#2 0x55a2f0626336 <unknown>\n#3 0x55a2f0624176 <unknown>\n#4 0x55a2f0621b57 <unknown>\n#5 0x55a2f062097c <unknown>\n#6 0x55a2f06140ff <unknown>\n#7 0x55a2f06424b2 <unknown>\n#8 0x55a2f0613a79 <unknown>\n#9 0x55a2f064267e <unknown>\n#10 0x55a2f06612cc <unknown>\n#11 0x55a2f0642253 <unknown>\n#12 0x55a2f06121c7 <unknown>\n#13 0x55a2f0612b3e <unknown>\n#14 0x55a2f08b030b <unknown>\n#15 0x55a2f08b43b7 <unknown>\n#16 0x55a2f089ce3e <unknown>\n#17 0x55a2f08b4e82 <unknown>\n#18 0x55a2f08817df <unknown>\n#19 0x55a2f08d91b8 <unknown>\n#20 0x55a2f08d938b <unknown>\n#21 0x55a2f08e8ffc <unknown>\n#22 0x7fb29e3d1134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fae140e6890>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fae149e1090>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae14aac9d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a2f08d938b \\\\u003Cunknown>\\\\n#21 0x55a2f08e8ffc \\\\u003Cunknown>\\\\n#22 0x7fb29e3d1134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55a2f08e9eca <unknown>\nE       #1 0x55a2f05d345c <unknown>\nE       #2 0x55a2f0626336 <unknown>\nE       #3 0x55a2f0624176 <unknown>\nE       #4 0x55a2f0621b57 <unknown>\nE       #5 0x55a2f062097c <unknown>\nE       #6 0x55a2f06140ff <unknown>\nE       #7 0x55a2f06424b2 <unknown>\nE       #8 0x55a2f0613a79 <unknown>\nE       #9 0x55a2f064267e <unknown>\nE       #10 0x55a2f06612cc <unknown>\nE       #11 0x55a2f0642253 <unknown>\nE       #12 0x55a2f06121c7 <unknown>\nE       #13 0x55a2f0612b3e <unknown>\nE       #14 0x55a2f08b030b <unknown>\nE       #15 0x55a2f08b43b7 <unknown>\nE       #16 0x55a2f089ce3e <unknown>\nE       #17 0x55a2f08b4e82 <unknown>\nE       #18 0x55a2f08817df <unknown>\nE       #19 0x55a2f08d91b8 <unknown>\nE       #20 0x55a2f08d938b <unknown>\nE       #21 0x55a2f08e8ffc <unknown>\nE       #22 0x7fb29e3d1134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1715995035788,"stop":1715995035823,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1715995035875,"stop":1715995035910,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1715995036949,"stop":1715995036990,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"6deac0104a5dedd","name":"Screenshot","source":"6deac0104a5dedd.png","type":"image/png","size":123241},{"uid":"19c4d43bb643984f","name":"HTML source","source":"19c4d43bb643984f.html","type":"text/html","size":748187}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1715995038237,"stop":1715995038238,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1715995038238,"stop":1715995038312,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"7d0e22c15540"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":273,"unknown":0,"total":275},"items":[{"uid":"67bb0a0011620464","reportUrl":"https://Nat754.github.io/StroyremAutomation/310//#testresult/67bb0a0011620464","status":"passed","time":{"start":1715908410929,"stop":1715908424524,"duration":13595}},{"uid":"31ac5ee39cf25d2f","reportUrl":"https://Nat754.github.io/StroyremAutomation/309//#testresult/31ac5ee39cf25d2f","status":"passed","time":{"start":1715822262719,"stop":1715822276112,"duration":13393}},{"uid":"ea57335dde7ee353","reportUrl":"https://Nat754.github.io/StroyremAutomation/308//#testresult/ea57335dde7ee353","status":"passed","time":{"start":1715735628361,"stop":1715735641620,"duration":13259}},{"uid":"9d197a7463656ed6","reportUrl":"https://Nat754.github.io/StroyremAutomation/307//#testresult/9d197a7463656ed6","status":"passed","time":{"start":1715649200773,"stop":1715649212416,"duration":11643}},{"uid":"cd5ca906b8c87100","reportUrl":"https://Nat754.github.io/StroyremAutomation/306//#testresult/cd5ca906b8c87100","status":"passed","time":{"start":1715563153569,"stop":1715563165923,"duration":12354}},{"uid":"b2da6eb3cad4b196","reportUrl":"https://Nat754.github.io/StroyremAutomation/305//#testresult/b2da6eb3cad4b196","status":"passed","time":{"start":1715476506098,"stop":1715476517092,"duration":10994}},{"uid":"298056d987186245","reportUrl":"https://Nat754.github.io/StroyremAutomation/304//#testresult/298056d987186245","status":"passed","time":{"start":1715389800592,"stop":1715389811162,"duration":10570}},{"uid":"4a008a5e0d69da46","reportUrl":"https://Nat754.github.io/StroyremAutomation/303//#testresult/4a008a5e0d69da46","status":"passed","time":{"start":1715303802792,"stop":1715303814396,"duration":11604}},{"uid":"33ffb745cc6a2f21","reportUrl":"https://Nat754.github.io/StroyremAutomation/302//#testresult/33ffb745cc6a2f21","status":"passed","time":{"start":1715217032766,"stop":1715217043736,"duration":10970}},{"uid":"799b2142c4be597e","reportUrl":"https://Nat754.github.io/StroyremAutomation/301//#testresult/799b2142c4be597e","status":"passed","time":{"start":1715130413767,"stop":1715130425447,"duration":11680}},{"uid":"5f57ec515b5241a7","reportUrl":"https://Nat754.github.io/StroyremAutomation/300//#testresult/5f57ec515b5241a7","status":"passed","time":{"start":1715044215593,"stop":1715044226134,"duration":10541}},{"uid":"a4ba5b9b9e7421bb","reportUrl":"https://Nat754.github.io/StroyremAutomation/299//#testresult/a4ba5b9b9e7421bb","status":"passed","time":{"start":1714957873427,"stop":1714957884275,"duration":10848}},{"uid":"ee09f1efea838bdf","reportUrl":"https://Nat754.github.io/StroyremAutomation/298//#testresult/ee09f1efea838bdf","status":"passed","time":{"start":1714871615700,"stop":1714871626308,"duration":10608}},{"uid":"fcc4bf76d4713bc9","reportUrl":"https://Nat754.github.io/StroyremAutomation/297//#testresult/fcc4bf76d4713bc9","status":"passed","time":{"start":1714785010788,"stop":1714785021486,"duration":10698}},{"uid":"c4154e9f55e44538","reportUrl":"https://Nat754.github.io/StroyremAutomation/296//#testresult/c4154e9f55e44538","status":"passed","time":{"start":1714698881044,"stop":1714698892094,"duration":11050}},{"uid":"3047e980c986d8f4","reportUrl":"https://Nat754.github.io/StroyremAutomation/295//#testresult/3047e980c986d8f4","status":"passed","time":{"start":1714612157938,"stop":1714612168747,"duration":10809}},{"uid":"54048f92bbcafa27","reportUrl":"https://Nat754.github.io/StroyremAutomation/294//#testresult/54048f92bbcafa27","status":"passed","time":{"start":1714526011464,"stop":1714526022272,"duration":10808}},{"uid":"25ce6983c087e77d","reportUrl":"https://Nat754.github.io/StroyremAutomation/293//#testresult/25ce6983c087e77d","status":"passed","time":{"start":1714439380822,"stop":1714439391574,"duration":10752}},{"uid":"73f620260b075d3e","reportUrl":"https://Nat754.github.io/StroyremAutomation/292//#testresult/73f620260b075d3e","status":"passed","time":{"start":1714353065101,"stop":1714353075655,"duration":10554}},{"uid":"96aecd119346080f","reportUrl":"https://Nat754.github.io/StroyremAutomation/291//#testresult/96aecd119346080f","status":"passed","time":{"start":1714267071296,"stop":1714267083164,"duration":11868}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"4b12d264e0b7bf3f.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}