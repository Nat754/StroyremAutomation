{"uid":"6fa7e31db69bb824","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"dad3617134a119815037f972e0359b9c","time":{"start":1715994685029,"stop":1715994687264,"duration":2235},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55bd743f3eca <unknown>\n#1 0x55bd740dd45c <unknown>\n#2 0x55bd74130336 <unknown>\n#3 0x55bd7412e176 <unknown>\n#4 0x55bd7412bb57 <unknown>\n#5 0x55bd7412a97c <unknown>\n#6 0x55bd7411e0ff <unknown>\n#7 0x55bd7414c4b2 <unknown>\n#8 0x55bd7411da79 <unknown>\n#9 0x55bd7414c67e <unknown>\n#10 0x55bd7416b2cc <unknown>\n#11 0x55bd7414c253 <unknown>\n#12 0x55bd7411c1c7 <unknown>\n#13 0x55bd7411cb3e <unknown>\n#14 0x55bd743ba30b <unknown>\n#15 0x55bd743be3b7 <unknown>\n#16 0x55bd743a6e3e <unknown>\n#17 0x55bd743bee82 <unknown>\n#18 0x55bd7438b7df <unknown>\n#19 0x55bd743e31b8 <unknown>\n#20 0x55bd743e338b <unknown>\n#21 0x55bd743f2ffc <unknown>\n#22 0x7f6f65950134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fae141afb10>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fae13f24490>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae149ebfd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bd743e338b \\\\u003Cunknown>\\\\n#21 0x55bd743f2ffc \\\\u003Cunknown>\\\\n#22 0x7f6f65950134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55bd743f3eca <unknown>\nE       #1 0x55bd740dd45c <unknown>\nE       #2 0x55bd74130336 <unknown>\nE       #3 0x55bd7412e176 <unknown>\nE       #4 0x55bd7412bb57 <unknown>\nE       #5 0x55bd7412a97c <unknown>\nE       #6 0x55bd7411e0ff <unknown>\nE       #7 0x55bd7414c4b2 <unknown>\nE       #8 0x55bd7411da79 <unknown>\nE       #9 0x55bd7414c67e <unknown>\nE       #10 0x55bd7416b2cc <unknown>\nE       #11 0x55bd7414c253 <unknown>\nE       #12 0x55bd7411c1c7 <unknown>\nE       #13 0x55bd7411cb3e <unknown>\nE       #14 0x55bd743ba30b <unknown>\nE       #15 0x55bd743be3b7 <unknown>\nE       #16 0x55bd743a6e3e <unknown>\nE       #17 0x55bd743bee82 <unknown>\nE       #18 0x55bd7438b7df <unknown>\nE       #19 0x55bd743e31b8 <unknown>\nE       #20 0x55bd743e338b <unknown>\nE       #21 0x55bd743f2ffc <unknown>\nE       #22 0x7f6f65950134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1715993488922,"stop":1715993488991,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1715993488991,"stop":1715993488991,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1715994664666,"stop":1715994665355,"duration":689},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1715994665355,"stop":1715994665356,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1715994665356,"stop":1715994685028,"duration":19672},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x55bd743f3eca <unknown>\n#1 0x55bd740dd45c <unknown>\n#2 0x55bd74130336 <unknown>\n#3 0x55bd7412e176 <unknown>\n#4 0x55bd7412bb57 <unknown>\n#5 0x55bd7412a97c <unknown>\n#6 0x55bd7411e0ff <unknown>\n#7 0x55bd7414c4b2 <unknown>\n#8 0x55bd7411da79 <unknown>\n#9 0x55bd7414c67e <unknown>\n#10 0x55bd7416b2cc <unknown>\n#11 0x55bd7414c253 <unknown>\n#12 0x55bd7411c1c7 <unknown>\n#13 0x55bd7411cb3e <unknown>\n#14 0x55bd743ba30b <unknown>\n#15 0x55bd743be3b7 <unknown>\n#16 0x55bd743a6e3e <unknown>\n#17 0x55bd743bee82 <unknown>\n#18 0x55bd7438b7df <unknown>\n#19 0x55bd743e31b8 <unknown>\n#20 0x55bd743e338b <unknown>\n#21 0x55bd743f2ffc <unknown>\n#22 0x7f6f65950134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fae141afb10>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fae13f24490>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fae149ebfd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bd743e338b \\\\u003Cunknown>\\\\n#21 0x55bd743f2ffc \\\\u003Cunknown>\\\\n#22 0x7f6f65950134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x55bd743f3eca <unknown>\nE       #1 0x55bd740dd45c <unknown>\nE       #2 0x55bd74130336 <unknown>\nE       #3 0x55bd7412e176 <unknown>\nE       #4 0x55bd7412bb57 <unknown>\nE       #5 0x55bd7412a97c <unknown>\nE       #6 0x55bd7411e0ff <unknown>\nE       #7 0x55bd7414c4b2 <unknown>\nE       #8 0x55bd7411da79 <unknown>\nE       #9 0x55bd7414c67e <unknown>\nE       #10 0x55bd7416b2cc <unknown>\nE       #11 0x55bd7414c253 <unknown>\nE       #12 0x55bd7411c1c7 <unknown>\nE       #13 0x55bd7411cb3e <unknown>\nE       #14 0x55bd743ba30b <unknown>\nE       #15 0x55bd743be3b7 <unknown>\nE       #16 0x55bd743a6e3e <unknown>\nE       #17 0x55bd743bee82 <unknown>\nE       #18 0x55bd7438b7df <unknown>\nE       #19 0x55bd743e31b8 <unknown>\nE       #20 0x55bd743e338b <unknown>\nE       #21 0x55bd743f2ffc <unknown>\nE       #22 0x7f6f65950134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1715994685029,"stop":1715994685083,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1715994686126,"stop":1715994686175,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"dcfbd03ac0a27ddc","name":"Screenshot","source":"dcfbd03ac0a27ddc.png","type":"image/png","size":136903},{"uid":"2f531314bd88313d","name":"HTML source","source":"2f531314bd88313d.html","type":"text/html","size":810201}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1715994687444,"stop":1715994687529,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1715994687444,"stop":1715994687444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"7d0e22c15540"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":264,"unknown":0,"total":279},"items":[{"uid":"a0eab83b9b89b7c9","reportUrl":"https://Nat754.github.io/StroyremAutomation/310//#testresult/a0eab83b9b89b7c9","status":"passed","time":{"start":1715908114021,"stop":1715908126155,"duration":12134}},{"uid":"875c024d39897058","reportUrl":"https://Nat754.github.io/StroyremAutomation/309//#testresult/875c024d39897058","status":"passed","time":{"start":1715821920030,"stop":1715821933526,"duration":13496}},{"uid":"ef7b24388da38922","reportUrl":"https://Nat754.github.io/StroyremAutomation/308//#testresult/ef7b24388da38922","status":"passed","time":{"start":1715735309922,"stop":1715735321851,"duration":11929}},{"uid":"5980d1377c394792","reportUrl":"https://Nat754.github.io/StroyremAutomation/307//#testresult/5980d1377c394792","status":"passed","time":{"start":1715648888328,"stop":1715648899571,"duration":11243}},{"uid":"eb3c2ceaf443322","reportUrl":"https://Nat754.github.io/StroyremAutomation/306//#testresult/eb3c2ceaf443322","status":"passed","time":{"start":1715562782406,"stop":1715562793960,"duration":11554}},{"uid":"18b839f894598a39","reportUrl":"https://Nat754.github.io/StroyremAutomation/305//#testresult/18b839f894598a39","status":"passed","time":{"start":1715476211294,"stop":1715476222166,"duration":10872}},{"uid":"cb66b8e286d3664e","reportUrl":"https://Nat754.github.io/StroyremAutomation/304//#testresult/cb66b8e286d3664e","status":"passed","time":{"start":1715389506155,"stop":1715389516988,"duration":10833}},{"uid":"9d82739bf40ba7da","reportUrl":"https://Nat754.github.io/StroyremAutomation/303//#testresult/9d82739bf40ba7da","status":"passed","time":{"start":1715303441304,"stop":1715303452807,"duration":11503}},{"uid":"53755ae49272ffdf","reportUrl":"https://Nat754.github.io/StroyremAutomation/302//#testresult/53755ae49272ffdf","status":"passed","time":{"start":1715216743170,"stop":1715216753867,"duration":10697}},{"uid":"b87eebd0297dfdea","reportUrl":"https://Nat754.github.io/StroyremAutomation/301//#testresult/b87eebd0297dfdea","status":"passed","time":{"start":1715130050411,"stop":1715130062119,"duration":11708}},{"uid":"ede6876bdc481cf1","reportUrl":"https://Nat754.github.io/StroyremAutomation/300//#testresult/ede6876bdc481cf1","status":"passed","time":{"start":1715043925597,"stop":1715043936672,"duration":11075}},{"uid":"a4e8c8800616033b","reportUrl":"https://Nat754.github.io/StroyremAutomation/299//#testresult/a4e8c8800616033b","status":"passed","time":{"start":1714957583869,"stop":1714957594826,"duration":10957}},{"uid":"8742c12954406dc2","reportUrl":"https://Nat754.github.io/StroyremAutomation/298//#testresult/8742c12954406dc2","status":"passed","time":{"start":1714871323013,"stop":1714871333753,"duration":10740}},{"uid":"fdf4984da7a18b85","reportUrl":"https://Nat754.github.io/StroyremAutomation/297//#testresult/fdf4984da7a18b85","status":"passed","time":{"start":1714784716816,"stop":1714784727594,"duration":10778}},{"uid":"402f2d610ee9ab0c","reportUrl":"https://Nat754.github.io/StroyremAutomation/296//#testresult/402f2d610ee9ab0c","status":"passed","time":{"start":1714698572200,"stop":1714698583175,"duration":10975}},{"uid":"fbb30a2f7ac9e21c","reportUrl":"https://Nat754.github.io/StroyremAutomation/295//#testresult/fbb30a2f7ac9e21c","status":"passed","time":{"start":1714611863967,"stop":1714611874844,"duration":10877}},{"uid":"1bfa4a41c2d122ae","reportUrl":"https://Nat754.github.io/StroyremAutomation/294//#testresult/1bfa4a41c2d122ae","status":"passed","time":{"start":1714525721515,"stop":1714525732356,"duration":10841}},{"uid":"ea8ec5b48513a7d2","reportUrl":"https://Nat754.github.io/StroyremAutomation/293//#testresult/ea8ec5b48513a7d2","status":"passed","time":{"start":1714439087294,"stop":1714439097981,"duration":10687}},{"uid":"990bfc6174c691b1","reportUrl":"https://Nat754.github.io/StroyremAutomation/292//#testresult/990bfc6174c691b1","status":"passed","time":{"start":1714352774514,"stop":1714352785010,"duration":10496}},{"uid":"2284201f098d9779","reportUrl":"https://Nat754.github.io/StroyremAutomation/291//#testresult/2284201f098d9779","status":"passed","time":{"start":1714266730269,"stop":1714266742085,"duration":11816}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"6fa7e31db69bb824.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/action'"]}