{"uid":"217bdc9620f0ef30","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke","historyId":"30a4f622139d182a129f4a7eaccc059b","time":{"start":1709082011238,"stop":1709082013523,"duration":2285},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.94)\nStacktrace:\n#0 0x559486f53e93 <unknown>\n#1 0x559486c4bce6 <unknown>\n#2 0x559486c9da73 <unknown>\n#3 0x559486c9b98e <unknown>\n#4 0x559486c99367 <unknown>\n#5 0x559486c98732 <unknown>\n#6 0x559486c8bd27 <unknown>\n#7 0x559486cb8eb2 <unknown>\n#8 0x559486c8b6b8 <unknown>\n#9 0x559486cb907e <unknown>\n#10 0x559486cd7899 <unknown>\n#11 0x559486cb8c53 <unknown>\n#12 0x559486c89db3 <unknown>\n#13 0x559486c8a77e <unknown>\n#14 0x559486f197cb <unknown>\n#15 0x559486f1d7e5 <unknown>\n#16 0x559486f070e1 <unknown>\n#17 0x559486f1e372 <unknown>\n#18 0x559486eeb1bf <unknown>\n#19 0x559486f42488 <unknown>\n#20 0x559486f42683 <unknown>\n#21 0x559486f53044 <unknown>\n#22 0x7fa199306134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fbce19c4c50>\nlink = 'https://stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fbce11d5610>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke(self, link,\n                                                                                           product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbce0ddc990>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559486f42683 \\\\u003Cunknown>\\\\n#21 0x559486f53044 \\\\u003Cunknown>\\\\n#22 0x7fa199306134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x559486f53e93 <unknown>\nE       #1 0x559486c4bce6 <unknown>\nE       #2 0x559486c9da73 <unknown>\nE       #3 0x559486c9b98e <unknown>\nE       #4 0x559486c99367 <unknown>\nE       #5 0x559486c98732 <unknown>\nE       #6 0x559486c8bd27 <unknown>\nE       #7 0x559486cb8eb2 <unknown>\nE       #8 0x559486c8b6b8 <unknown>\nE       #9 0x559486cb907e <unknown>\nE       #10 0x559486cd7899 <unknown>\nE       #11 0x559486cb8c53 <unknown>\nE       #12 0x559486c89db3 <unknown>\nE       #13 0x559486c8a77e <unknown>\nE       #14 0x559486f197cb <unknown>\nE       #15 0x559486f1d7e5 <unknown>\nE       #16 0x559486f070e1 <unknown>\nE       #17 0x559486f1e372 <unknown>\nE       #18 0x559486eeb1bf <unknown>\nE       #19 0x559486f42488 <unknown>\nE       #20 0x559486f42683 <unknown>\nE       #21 0x559486f53044 <unknown>\nE       #22 0x7fa199306134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1709081203305,"stop":1709081203374,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1709081203374,"stop":1709081203374,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1709082002129,"stop":1709082002913,"duration":784},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1709082002913,"stop":1709082011237,"duration":8324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1709082002913,"stop":1709082002913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.94)\nStacktrace:\n#0 0x559486f53e93 <unknown>\n#1 0x559486c4bce6 <unknown>\n#2 0x559486c9da73 <unknown>\n#3 0x559486c9b98e <unknown>\n#4 0x559486c99367 <unknown>\n#5 0x559486c98732 <unknown>\n#6 0x559486c8bd27 <unknown>\n#7 0x559486cb8eb2 <unknown>\n#8 0x559486c8b6b8 <unknown>\n#9 0x559486cb907e <unknown>\n#10 0x559486cd7899 <unknown>\n#11 0x559486cb8c53 <unknown>\n#12 0x559486c89db3 <unknown>\n#13 0x559486c8a77e <unknown>\n#14 0x559486f197cb <unknown>\n#15 0x559486f1d7e5 <unknown>\n#16 0x559486f070e1 <unknown>\n#17 0x559486f1e372 <unknown>\n#18 0x559486eeb1bf <unknown>\n#19 0x559486f42488 <unknown>\n#20 0x559486f42683 <unknown>\n#21 0x559486f53044 <unknown>\n#22 0x7fa199306134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fbce19c4c50>\nlink = 'https://stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fbce11d5610>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke(self, link,\n                                                                                           product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbce0ddc990>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559486f42683 \\\\u003Cunknown>\\\\n#21 0x559486f53044 \\\\u003Cunknown>\\\\n#22 0x7fa199306134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x559486f53e93 <unknown>\nE       #1 0x559486c4bce6 <unknown>\nE       #2 0x559486c9da73 <unknown>\nE       #3 0x559486c9b98e <unknown>\nE       #4 0x559486c99367 <unknown>\nE       #5 0x559486c98732 <unknown>\nE       #6 0x559486c8bd27 <unknown>\nE       #7 0x559486cb8eb2 <unknown>\nE       #8 0x559486c8b6b8 <unknown>\nE       #9 0x559486cb907e <unknown>\nE       #10 0x559486cd7899 <unknown>\nE       #11 0x559486cb8c53 <unknown>\nE       #12 0x559486c89db3 <unknown>\nE       #13 0x559486c8a77e <unknown>\nE       #14 0x559486f197cb <unknown>\nE       #15 0x559486f1d7e5 <unknown>\nE       #16 0x559486f070e1 <unknown>\nE       #17 0x559486f1e372 <unknown>\nE       #18 0x559486eeb1bf <unknown>\nE       #19 0x559486f42488 <unknown>\nE       #20 0x559486f42683 <unknown>\nE       #21 0x559486f53044 <unknown>\nE       #22 0x7fa199306134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1709082011238,"stop":1709082011272,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1709082011347,"stop":1709082011373,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1709082012412,"stop":1709082012455,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"6daf434c1e2d02f0","name":"Screenshot","source":"6daf434c1e2d02f0.png","type":"image/png","size":148132},{"uid":"b6bcbeca682a1186","name":"HTML source","source":"b6bcbeca682a1186.html","type":"text/html","size":846684}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1709082013710,"stop":1709082013783,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1709082013710,"stop":1709082013710,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"0ac4849f2dce"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/kisti-malyarnye'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":205,"unknown":0,"total":210},"items":[{"uid":"584ca7ca3954b212","reportUrl":"https://Nat754.github.io/StroyremAutomation/230//#testresult/584ca7ca3954b212","status":"passed","time":{"start":1708995691619,"stop":1708995700820,"duration":9201}},{"uid":"73ea1540bea42ac","reportUrl":"https://Nat754.github.io/StroyremAutomation/229//#testresult/73ea1540bea42ac","status":"passed","time":{"start":1708909255306,"stop":1708909263467,"duration":8161}},{"uid":"5871771953f17af9","reportUrl":"https://Nat754.github.io/StroyremAutomation/228//#testresult/5871771953f17af9","status":"passed","time":{"start":1708823106179,"stop":1708823115176,"duration":8997}},{"uid":"f2630652c885d54e","reportUrl":"https://Nat754.github.io/StroyremAutomation/227//#testresult/f2630652c885d54e","status":"passed","time":{"start":1708736246408,"stop":1708736254756,"duration":8348}},{"uid":"b4943dfd67837252","reportUrl":"https://Nat754.github.io/StroyremAutomation/226//#testresult/b4943dfd67837252","status":"passed","time":{"start":1708649957796,"stop":1708649965969,"duration":8173}},{"uid":"710088142f77434b","reportUrl":"https://Nat754.github.io/StroyremAutomation/225//#testresult/710088142f77434b","status":"passed","time":{"start":1708563798379,"stop":1708563807628,"duration":9249}},{"uid":"832473e4cfa4af38","reportUrl":"https://Nat754.github.io/StroyremAutomation/224//#testresult/832473e4cfa4af38","status":"passed","time":{"start":1708477414931,"stop":1708477424576,"duration":9645}},{"uid":"b5749da3916f0b24","reportUrl":"https://Nat754.github.io/StroyremAutomation/223//#testresult/b5749da3916f0b24","status":"passed","time":{"start":1708390790971,"stop":1708390799615,"duration":8644}},{"uid":"d35ac3b8e9f54733","reportUrl":"https://Nat754.github.io/StroyremAutomation/222//#testresult/d35ac3b8e9f54733","status":"passed","time":{"start":1708304675190,"stop":1708304684247,"duration":9057}},{"uid":"f9770755c89ba468","reportUrl":"https://Nat754.github.io/StroyremAutomation/221//#testresult/f9770755c89ba468","status":"passed","time":{"start":1708218213545,"stop":1708218221882,"duration":8337}},{"uid":"32b9460792e9a8d","reportUrl":"https://Nat754.github.io/StroyremAutomation/220//#testresult/32b9460792e9a8d","status":"passed","time":{"start":1708131526996,"stop":1708131535319,"duration":8323}},{"uid":"fc6cef950d583ff4","reportUrl":"https://Nat754.github.io/StroyremAutomation/219//#testresult/fc6cef950d583ff4","status":"passed","time":{"start":1708045387557,"stop":1708045396942,"duration":9385}},{"uid":"8f903bc50d45577f","reportUrl":"https://Nat754.github.io/StroyremAutomation/218//#testresult/8f903bc50d45577f","status":"passed","time":{"start":1707958841628,"stop":1707958850127,"duration":8499}},{"uid":"abcbaa19465cb44e","reportUrl":"https://Nat754.github.io/StroyremAutomation/217//#testresult/abcbaa19465cb44e","status":"passed","time":{"start":1707872655004,"stop":1707872664170,"duration":9166}},{"uid":"e19b1f6adbefc427","reportUrl":"https://Nat754.github.io/StroyremAutomation/216//#testresult/e19b1f6adbefc427","status":"passed","time":{"start":1707786336084,"stop":1707786346011,"duration":9927}},{"uid":"83bfdfb5c90fad39","reportUrl":"https://Nat754.github.io/StroyremAutomation/215//#testresult/83bfdfb5c90fad39","status":"passed","time":{"start":1707699662790,"stop":1707699670886,"duration":8096}},{"uid":"7b48d020554cf670","reportUrl":"https://Nat754.github.io/StroyremAutomation/214//#testresult/7b48d020554cf670","status":"passed","time":{"start":1707613554038,"stop":1707613562686,"duration":8648}},{"uid":"dfda8f39337a558d","reportUrl":"https://Nat754.github.io/StroyremAutomation/213//#testresult/dfda8f39337a558d","status":"passed","time":{"start":1707526869735,"stop":1707526878626,"duration":8891}},{"uid":"4d9844bd34690464","reportUrl":"https://Nat754.github.io/StroyremAutomation/212//#testresult/4d9844bd34690464","status":"passed","time":{"start":1707440399297,"stop":1707440408146,"duration":8849}},{"uid":"f33b36c79c6f0cbf","reportUrl":"https://Nat754.github.io/StroyremAutomation/211//#testresult/f33b36c79c6f0cbf","status":"passed","time":{"start":1707354016481,"stop":1707354025351,"duration":8870}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"217bdc9620f0ef30.json","parameterValues":["'https://stroyrem-nn.ru/catalog/kisti-malyarnye'"]}