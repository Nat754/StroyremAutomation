{"uid":"71a6440482ad6316","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"60ac608ef0b195b1f9aff92ab9d21fa8","time":{"start":1709082092837,"stop":1709082095133,"duration":2296},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.94)\nStacktrace:\n#0 0x5597c13cce93 <unknown>\n#1 0x5597c10c4ce6 <unknown>\n#2 0x5597c1116a73 <unknown>\n#3 0x5597c111498e <unknown>\n#4 0x5597c1112367 <unknown>\n#5 0x5597c1111732 <unknown>\n#6 0x5597c1104d27 <unknown>\n#7 0x5597c1131eb2 <unknown>\n#8 0x5597c11046b8 <unknown>\n#9 0x5597c113207e <unknown>\n#10 0x5597c1150899 <unknown>\n#11 0x5597c1131c53 <unknown>\n#12 0x5597c1102db3 <unknown>\n#13 0x5597c110377e <unknown>\n#14 0x5597c13927cb <unknown>\n#15 0x5597c13967e5 <unknown>\n#16 0x5597c13800e1 <unknown>\n#17 0x5597c1397372 <unknown>\n#18 0x5597c13641bf <unknown>\n#19 0x5597c13bb488 <unknown>\n#20 0x5597c13bb683 <unknown>\n#21 0x5597c13cc044 <unknown>\n#22 0x7f168ffab134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fbce19c5d90>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fbce0b29050>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbce07de710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5597c13bb683 \\\\u003Cunknown>\\\\n#21 0x5597c13cc044 \\\\u003Cunknown>\\\\n#22 0x7f168ffab134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x5597c13cce93 <unknown>\nE       #1 0x5597c10c4ce6 <unknown>\nE       #2 0x5597c1116a73 <unknown>\nE       #3 0x5597c111498e <unknown>\nE       #4 0x5597c1112367 <unknown>\nE       #5 0x5597c1111732 <unknown>\nE       #6 0x5597c1104d27 <unknown>\nE       #7 0x5597c1131eb2 <unknown>\nE       #8 0x5597c11046b8 <unknown>\nE       #9 0x5597c113207e <unknown>\nE       #10 0x5597c1150899 <unknown>\nE       #11 0x5597c1131c53 <unknown>\nE       #12 0x5597c1102db3 <unknown>\nE       #13 0x5597c110377e <unknown>\nE       #14 0x5597c13927cb <unknown>\nE       #15 0x5597c13967e5 <unknown>\nE       #16 0x5597c13800e1 <unknown>\nE       #17 0x5597c1397372 <unknown>\nE       #18 0x5597c13641bf <unknown>\nE       #19 0x5597c13bb488 <unknown>\nE       #20 0x5597c13bb683 <unknown>\nE       #21 0x5597c13cc044 <unknown>\nE       #22 0x7f168ffab134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1709081203305,"stop":1709081203374,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1709081203374,"stop":1709081203374,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1709082082051,"stop":1709082082833,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1709082082833,"stop":1709082082833,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1709082082833,"stop":1709082092836,"duration":10003},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.94)\nStacktrace:\n#0 0x5597c13cce93 <unknown>\n#1 0x5597c10c4ce6 <unknown>\n#2 0x5597c1116a73 <unknown>\n#3 0x5597c111498e <unknown>\n#4 0x5597c1112367 <unknown>\n#5 0x5597c1111732 <unknown>\n#6 0x5597c1104d27 <unknown>\n#7 0x5597c1131eb2 <unknown>\n#8 0x5597c11046b8 <unknown>\n#9 0x5597c113207e <unknown>\n#10 0x5597c1150899 <unknown>\n#11 0x5597c1131c53 <unknown>\n#12 0x5597c1102db3 <unknown>\n#13 0x5597c110377e <unknown>\n#14 0x5597c13927cb <unknown>\n#15 0x5597c13967e5 <unknown>\n#16 0x5597c13800e1 <unknown>\n#17 0x5597c1397372 <unknown>\n#18 0x5597c13641bf <unknown>\n#19 0x5597c13bb488 <unknown>\n#20 0x5597c13bb683 <unknown>\n#21 0x5597c13cc044 <unknown>\n#22 0x7f168ffab134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fbce19c5d90>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fbce0b29050>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbce07de710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5597c13bb683 \\\\u003Cunknown>\\\\n#21 0x5597c13cc044 \\\\u003Cunknown>\\\\n#22 0x7f168ffab134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.94)\nE       Stacktrace:\nE       #0 0x5597c13cce93 <unknown>\nE       #1 0x5597c10c4ce6 <unknown>\nE       #2 0x5597c1116a73 <unknown>\nE       #3 0x5597c111498e <unknown>\nE       #4 0x5597c1112367 <unknown>\nE       #5 0x5597c1111732 <unknown>\nE       #6 0x5597c1104d27 <unknown>\nE       #7 0x5597c1131eb2 <unknown>\nE       #8 0x5597c11046b8 <unknown>\nE       #9 0x5597c113207e <unknown>\nE       #10 0x5597c1150899 <unknown>\nE       #11 0x5597c1131c53 <unknown>\nE       #12 0x5597c1102db3 <unknown>\nE       #13 0x5597c110377e <unknown>\nE       #14 0x5597c13927cb <unknown>\nE       #15 0x5597c13967e5 <unknown>\nE       #16 0x5597c13800e1 <unknown>\nE       #17 0x5597c1397372 <unknown>\nE       #18 0x5597c13641bf <unknown>\nE       #19 0x5597c13bb488 <unknown>\nE       #20 0x5597c13bb683 <unknown>\nE       #21 0x5597c13cc044 <unknown>\nE       #22 0x7f168ffab134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1709082092837,"stop":1709082092870,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1709082092946,"stop":1709082092975,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1709082094017,"stop":1709082094062,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"b934ef4e68d0e66a","name":"Screenshot","source":"b934ef4e68d0e66a.png","type":"image/png","size":196569},{"uid":"3692e89a92874c14","name":"HTML source","source":"3692e89a92874c14.html","type":"text/html","size":927457}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1709082095423,"stop":1709082095501,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1709082095423,"stop":1709082095423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"0ac4849f2dce"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":201,"unknown":0,"total":206},"items":[{"uid":"1984562e8d030a60","reportUrl":"https://Nat754.github.io/StroyremAutomation/230//#testresult/1984562e8d030a60","status":"passed","time":{"start":1708995788144,"stop":1708995797321,"duration":9177}},{"uid":"16b50d8a1626dca5","reportUrl":"https://Nat754.github.io/StroyremAutomation/229//#testresult/16b50d8a1626dca5","status":"passed","time":{"start":1708909334626,"stop":1708909342746,"duration":8120}},{"uid":"3f5f64f6bf6f3232","reportUrl":"https://Nat754.github.io/StroyremAutomation/228//#testresult/3f5f64f6bf6f3232","status":"passed","time":{"start":1708823194829,"stop":1708823203543,"duration":8714}},{"uid":"18a1d0c7a366efc8","reportUrl":"https://Nat754.github.io/StroyremAutomation/227//#testresult/18a1d0c7a366efc8","status":"passed","time":{"start":1708736326751,"stop":1708736335012,"duration":8261}},{"uid":"4fe62483f56f106","reportUrl":"https://Nat754.github.io/StroyremAutomation/226//#testresult/4fe62483f56f106","status":"passed","time":{"start":1708650038770,"stop":1708650047483,"duration":8713}},{"uid":"532eaca32aa6dc1","reportUrl":"https://Nat754.github.io/StroyremAutomation/225//#testresult/532eaca32aa6dc1","status":"passed","time":{"start":1708563899408,"stop":1708563908342,"duration":8934}},{"uid":"16af05784484a210","reportUrl":"https://Nat754.github.io/StroyremAutomation/224//#testresult/16af05784484a210","status":"passed","time":{"start":1708477514135,"stop":1708477523176,"duration":9041}},{"uid":"593c3344d5da1cc8","reportUrl":"https://Nat754.github.io/StroyremAutomation/223//#testresult/593c3344d5da1cc8","status":"passed","time":{"start":1708390877818,"stop":1708390886325,"duration":8507}},{"uid":"2f83c0472fef7db0","reportUrl":"https://Nat754.github.io/StroyremAutomation/222//#testresult/2f83c0472fef7db0","status":"passed","time":{"start":1708304771480,"stop":1708304780335,"duration":8855}},{"uid":"bcc984da7800d2d7","reportUrl":"https://Nat754.github.io/StroyremAutomation/221//#testresult/bcc984da7800d2d7","status":"passed","time":{"start":1708218295676,"stop":1708218303780,"duration":8104}},{"uid":"5440b5cde9254160","reportUrl":"https://Nat754.github.io/StroyremAutomation/220//#testresult/5440b5cde9254160","status":"passed","time":{"start":1708131607321,"stop":1708131615710,"duration":8389}},{"uid":"11fe1331d2e2b30f","reportUrl":"https://Nat754.github.io/StroyremAutomation/219//#testresult/11fe1331d2e2b30f","status":"passed","time":{"start":1708045487785,"stop":1708045497094,"duration":9309}},{"uid":"8d960bba5b308969","reportUrl":"https://Nat754.github.io/StroyremAutomation/218//#testresult/8d960bba5b308969","status":"passed","time":{"start":1707958924533,"stop":1707958933280,"duration":8747}},{"uid":"fdd60362d76e89fb","reportUrl":"https://Nat754.github.io/StroyremAutomation/217//#testresult/fdd60362d76e89fb","status":"passed","time":{"start":1707872753882,"stop":1707872762839,"duration":8957}},{"uid":"12be780ee9670b77","reportUrl":"https://Nat754.github.io/StroyremAutomation/216//#testresult/12be780ee9670b77","status":"passed","time":{"start":1707786442635,"stop":1707786452709,"duration":10074}},{"uid":"37fdbffa2724edcb","reportUrl":"https://Nat754.github.io/StroyremAutomation/215//#testresult/37fdbffa2724edcb","status":"passed","time":{"start":1707699743631,"stop":1707699752014,"duration":8383}},{"uid":"6e40cdef65716774","reportUrl":"https://Nat754.github.io/StroyremAutomation/214//#testresult/6e40cdef65716774","status":"passed","time":{"start":1707613641718,"stop":1707613650345,"duration":8627}},{"uid":"ff9bcbc90cfa2314","reportUrl":"https://Nat754.github.io/StroyremAutomation/213//#testresult/ff9bcbc90cfa2314","status":"passed","time":{"start":1707526966315,"stop":1707526975246,"duration":8931}},{"uid":"31e249d75ad9f2f8","reportUrl":"https://Nat754.github.io/StroyremAutomation/212//#testresult/31e249d75ad9f2f8","status":"passed","time":{"start":1707440486036,"stop":1707440494558,"duration":8522}},{"uid":"103eb92edc4aee53","reportUrl":"https://Nat754.github.io/StroyremAutomation/211//#testresult/103eb92edc4aee53","status":"passed","time":{"start":1707354104173,"stop":1707354112752,"duration":8579}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"71a6440482ad6316.json","parameterValues":["'https://stroyrem-nn.ru/catalog/elektroinstrument'"]}