{"uid":"20957e6b6a768c01","name":"TC 006 - Проверка функциональности ссылки 'Обратный звонок'","fullName":"tests.main.test_main_page.TestMainPage#test_positive_footer_back_call_smoke","historyId":"c8c41294f976d39328d0b1dbf5226506","time":{"start":1717117344842,"stop":1717117344871,"duration":29},"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x56159f6abe3a <unknown>\n#1 0x56159f3952a1 <unknown>\n#2 0x56159f3e270f <unknown>\n#3 0x56159f3d60ff <unknown>\n#4 0x56159f4044b2 <unknown>\n#5 0x56159f3d5a79 <unknown>\n#6 0x56159f40467e <unknown>\n#7 0x56159f4232cc <unknown>\n#8 0x56159f404253 <unknown>\n#9 0x56159f3d41c7 <unknown>\n#10 0x56159f3d4b3e <unknown>\n#11 0x56159f67227b <unknown>\n#12 0x56159f676327 <unknown>\n#13 0x56159f65edae <unknown>\n#14 0x56159f676df2 <unknown>\n#15 0x56159f64374f <unknown>\n#16 0x56159f69b128 <unknown>\n#17 0x56159f69b2fb <unknown>\n#18 0x56159f6aaf6c <unknown>\n#19 0x7fe9005fb134 <unknown>","statusTrace":"self = <tests.main.test_main_page.TestMainPage object at 0x7fde53351310>\nmain_page = <pages.main_page.MainPage object at 0x7fde52425990>\n\n    @allure.feature(\"Footer functionality\")\n    @allure.title(\"TC 006 - Проверка функциональности ссылки 'Обратный звонок'\")\n    @pytest.mark.xfail  # \"Сломалось?\"\n    @pytest.mark.smoke_test\n    def test_positive_footer_back_call_smoke(self, main_page):\n>       result = main_page.check_call_back_link()\n\ntests/main/test_main_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:104: in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fde521e79d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56159f69b2fb \\\\u003Cunknown>\\\\n#18 0x56159f6aaf6c \\\\u003Cunknown>\\\\n#19 0x7fe9005fb134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x56159f6abe3a <unknown>\nE       #1 0x56159f3952a1 <unknown>\nE       #2 0x56159f3e270f <unknown>\nE       #3 0x56159f3d60ff <unknown>\nE       #4 0x56159f4044b2 <unknown>\nE       #5 0x56159f3d5a79 <unknown>\nE       #6 0x56159f40467e <unknown>\nE       #7 0x56159f4232cc <unknown>\nE       #8 0x56159f404253 <unknown>\nE       #9 0x56159f3d41c7 <unknown>\nE       #10 0x56159f3d4b3e <unknown>\nE       #11 0x56159f67227b <unknown>\nE       #12 0x56159f676327 <unknown>\nE       #13 0x56159f65edae <unknown>\nE       #14 0x56159f676df2 <unknown>\nE       #15 0x56159f64374f <unknown>\nE       #16 0x56159f69b128 <unknown>\nE       #17 0x56159f69b2fb <unknown>\nE       #18 0x56159f6aaf6c <unknown>\nE       #19 0x7fe9005fb134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1717116834579,"stop":1717116834656,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1717116834656,"stop":1717116834656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1717117332408,"stop":1717117333094,"duration":686},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1717117333094,"stop":1717117333095,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"main_page","time":{"start":1717117333095,"stop":1717117344841,"duration":11746},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1717117680466,"stop":1717117680466,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x56159f6abe3a <unknown>\n#1 0x56159f3952a1 <unknown>\n#2 0x56159f3e270f <unknown>\n#3 0x56159f3d60ff <unknown>\n#4 0x56159f4044b2 <unknown>\n#5 0x56159f3d5a79 <unknown>\n#6 0x56159f40467e <unknown>\n#7 0x56159f4232cc <unknown>\n#8 0x56159f404253 <unknown>\n#9 0x56159f3d41c7 <unknown>\n#10 0x56159f3d4b3e <unknown>\n#11 0x56159f67227b <unknown>\n#12 0x56159f676327 <unknown>\n#13 0x56159f65edae <unknown>\n#14 0x56159f676df2 <unknown>\n#15 0x56159f64374f <unknown>\n#16 0x56159f69b128 <unknown>\n#17 0x56159f69b2fb <unknown>\n#18 0x56159f6aaf6c <unknown>\n#19 0x7fe9005fb134 <unknown>","statusTrace":"self = <tests.main.test_main_page.TestMainPage object at 0x7fde53351310>\nmain_page = <pages.main_page.MainPage object at 0x7fde52425990>\n\n    @allure.feature(\"Footer functionality\")\n    @allure.title(\"TC 006 - Проверка функциональности ссылки 'Обратный звонок'\")\n    @pytest.mark.xfail  # \"Сломалось?\"\n    @pytest.mark.smoke_test\n    def test_positive_footer_back_call_smoke(self, main_page):\n>       result = main_page.check_call_back_link()\n\ntests/main/test_main_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:104: in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fde521e79d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56159f69b2fb \\\\u003Cunknown>\\\\n#18 0x56159f6aaf6c \\\\u003Cunknown>\\\\n#19 0x7fe9005fb134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x56159f6abe3a <unknown>\nE       #1 0x56159f3952a1 <unknown>\nE       #2 0x56159f3e270f <unknown>\nE       #3 0x56159f3d60ff <unknown>\nE       #4 0x56159f4044b2 <unknown>\nE       #5 0x56159f3d5a79 <unknown>\nE       #6 0x56159f40467e <unknown>\nE       #7 0x56159f4232cc <unknown>\nE       #8 0x56159f404253 <unknown>\nE       #9 0x56159f3d41c7 <unknown>\nE       #10 0x56159f3d4b3e <unknown>\nE       #11 0x56159f67227b <unknown>\nE       #12 0x56159f676327 <unknown>\nE       #13 0x56159f65edae <unknown>\nE       #14 0x56159f676df2 <unknown>\nE       #15 0x56159f64374f <unknown>\nE       #16 0x56159f69b128 <unknown>\nE       #17 0x56159f69b2fb <unknown>\nE       #18 0x56159f6aaf6c <unknown>\nE       #19 0x7fe9005fb134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Проверка функциональности ссылки 'Обратный звонок'","time":{"start":1717117344842,"stop":1717117344870,"duration":28},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x56159f6abe3a <unknown>\n#1 0x56159f3952a1 <unknown>\n#2 0x56159f3e270f <unknown>\n#3 0x56159f3d60ff <unknown>\n#4 0x56159f4044b2 <unknown>\n#5 0x56159f3d5a79 <unknown>\n#6 0x56159f40467e <unknown>\n#7 0x56159f4232cc <unknown>\n#8 0x56159f404253 <unknown>\n#9 0x56159f3d41c7 <unknown>\n#10 0x56159f3d4b3e <unknown>\n#11 0x56159f67227b <unknown>\n#12 0x56159f676327 <unknown>\n#13 0x56159f65edae <unknown>\n#14 0x56159f676df2 <unknown>\n#15 0x56159f64374f <unknown>\n#16 0x56159f69b128 <unknown>\n#17 0x56159f69b2fb <unknown>\n#18 0x56159f6aaf6c <unknown>\n#19 0x7fe9005fb134 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/app/pages/main_page.py\", line 104, in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a3ac9551a691ff1d","name":"Screenshot","source":"a3ac9551a691ff1d.png","type":"image/png","size":146660},{"uid":"c5b8dadc5990fa49","name":"HTML source","source":"c5b8dadc5990fa49.html","type":"text/html","size":410938}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1717117344999,"stop":1717117345069,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1717117344999,"stop":1717117344999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1717117693806,"stop":1717117693806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Footer functionality"},{"name":"epic","value":"Main Page"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests.main"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"373c34aee6e9"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.main.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"url","value":"'https://stroyrem-nn.ru/'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":2,"passed":0,"unknown":0,"total":2},"items":[{"uid":"a077207fb79d186f","reportUrl":"https://Nat754.github.io/StroyremAutomation/323//#testresult/a077207fb79d186f","status":"skipped","statusDetails":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.78)\nStacktrace:\n#0 0x55740eb5be8a <unknown>\n#1 0x55740e8452a1 <unknown>\n#2 0x55740e89270f <unknown>\n#3 0x55740e8860ff <unknown>\n#4 0x55740e8b44b2 <unknown>\n#5 0x55740e885a79 <unknown>\n#6 0x55740e8b467e <unknown>\n#7 0x55740e8d32cc <unknown>\n#8 0x55740e8b4253 <unknown>\n#9 0x55740e8841c7 <unknown>\n#10 0x55740e884b3e <unknown>\n#11 0x55740eb222cb <unknown>\n#12 0x55740eb26377 <unknown>\n#13 0x55740eb0edfe <unknown>\n#14 0x55740eb26e42 <unknown>\n#15 0x55740eaf379f <unknown>\n#16 0x55740eb4b178 <unknown>\n#17 0x55740eb4b34b <unknown>\n#18 0x55740eb5afbc <unknown>\n#19 0x7ffba0dcd134 <unknown>","time":{"start":1717030784566,"stop":1717030784596,"duration":30}}]},"tags":["@pytest.mark.xfail","smoke_test"]},"source":"20957e6b6a768c01.json","parameterValues":["'https://stroyrem-nn.ru/'"]}