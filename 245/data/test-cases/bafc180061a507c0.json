{"uid":"bafc180061a507c0","name":"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke","historyId":"dc4e879f02824a08e341b1bdc96aa5ba","time":{"start":1710292459582,"stop":1710292461833,"duration":2251},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.128)\nStacktrace:\n#0 0x5562c872af33 <unknown>\n#1 0x5562c8422ce6 <unknown>\n#2 0x5562c8474a73 <unknown>\n#3 0x5562c847298e <unknown>\n#4 0x5562c8470367 <unknown>\n#5 0x5562c846f732 <unknown>\n#6 0x5562c8462d27 <unknown>\n#7 0x5562c848feb2 <unknown>\n#8 0x5562c84626b8 <unknown>\n#9 0x5562c849007e <unknown>\n#10 0x5562c84ae899 <unknown>\n#11 0x5562c848fc53 <unknown>\n#12 0x5562c8460db3 <unknown>\n#13 0x5562c846177e <unknown>\n#14 0x5562c86f086b <unknown>\n#15 0x5562c86f4885 <unknown>\n#16 0x5562c86de181 <unknown>\n#17 0x5562c86f5412 <unknown>\n#18 0x5562c86c225f <unknown>\n#19 0x5562c8719528 <unknown>\n#20 0x5562c8719723 <unknown>\n#21 0x5562c872a0e4 <unknown>\n#22 0x7fa57040f134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fface9c7790>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ffacd790710>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffacd7ade50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5562c8719723 \\\\u003Cunknown>\\\\n#21 0x5562c872a0e4 \\\\u003Cunknown>\\\\n#22 0x7fa57040f134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x5562c872af33 <unknown>\nE       #1 0x5562c8422ce6 <unknown>\nE       #2 0x5562c8474a73 <unknown>\nE       #3 0x5562c847298e <unknown>\nE       #4 0x5562c8470367 <unknown>\nE       #5 0x5562c846f732 <unknown>\nE       #6 0x5562c8462d27 <unknown>\nE       #7 0x5562c848feb2 <unknown>\nE       #8 0x5562c84626b8 <unknown>\nE       #9 0x5562c849007e <unknown>\nE       #10 0x5562c84ae899 <unknown>\nE       #11 0x5562c848fc53 <unknown>\nE       #12 0x5562c8460db3 <unknown>\nE       #13 0x5562c846177e <unknown>\nE       #14 0x5562c86f086b <unknown>\nE       #15 0x5562c86f4885 <unknown>\nE       #16 0x5562c86de181 <unknown>\nE       #17 0x5562c86f5412 <unknown>\nE       #18 0x5562c86c225f <unknown>\nE       #19 0x5562c8719528 <unknown>\nE       #20 0x5562c8719723 <unknown>\nE       #21 0x5562c872a0e4 <unknown>\nE       #22 0x7fa57040f134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1710290910923,"stop":1710290910997,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1710290910997,"stop":1710290910997,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1710292434331,"stop":1710292435109,"duration":778},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1710292435109,"stop":1710292435109,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1710292435109,"stop":1710292459582,"duration":24473},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=122.0.6261.128)\nStacktrace:\n#0 0x5562c872af33 <unknown>\n#1 0x5562c8422ce6 <unknown>\n#2 0x5562c8474a73 <unknown>\n#3 0x5562c847298e <unknown>\n#4 0x5562c8470367 <unknown>\n#5 0x5562c846f732 <unknown>\n#6 0x5562c8462d27 <unknown>\n#7 0x5562c848feb2 <unknown>\n#8 0x5562c84626b8 <unknown>\n#9 0x5562c849007e <unknown>\n#10 0x5562c84ae899 <unknown>\n#11 0x5562c848fc53 <unknown>\n#12 0x5562c8460db3 <unknown>\n#13 0x5562c846177e <unknown>\n#14 0x5562c86f086b <unknown>\n#15 0x5562c86f4885 <unknown>\n#16 0x5562c86de181 <unknown>\n#17 0x5562c86f5412 <unknown>\n#18 0x5562c86c225f <unknown>\n#19 0x5562c8719528 <unknown>\n#20 0x5562c8719723 <unknown>\n#21 0x5562c872a0e4 <unknown>\n#22 0x7fa57040f134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fface9c7790>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ffacd790710>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_7500_to_9999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffacd7ade50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5562c8719723 \\\\u003Cunknown>\\\\n#21 0x5562c872a0e4 \\\\u003Cunknown>\\\\n#22 0x7fa57040f134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=122.0.6261.128)\nE       Stacktrace:\nE       #0 0x5562c872af33 <unknown>\nE       #1 0x5562c8422ce6 <unknown>\nE       #2 0x5562c8474a73 <unknown>\nE       #3 0x5562c847298e <unknown>\nE       #4 0x5562c8470367 <unknown>\nE       #5 0x5562c846f732 <unknown>\nE       #6 0x5562c8462d27 <unknown>\nE       #7 0x5562c848feb2 <unknown>\nE       #8 0x5562c84626b8 <unknown>\nE       #9 0x5562c849007e <unknown>\nE       #10 0x5562c84ae899 <unknown>\nE       #11 0x5562c848fc53 <unknown>\nE       #12 0x5562c8460db3 <unknown>\nE       #13 0x5562c846177e <unknown>\nE       #14 0x5562c86f086b <unknown>\nE       #15 0x5562c86f4885 <unknown>\nE       #16 0x5562c86de181 <unknown>\nE       #17 0x5562c86f5412 <unknown>\nE       #18 0x5562c86c225f <unknown>\nE       #19 0x5562c8719528 <unknown>\nE       #20 0x5562c8719723 <unknown>\nE       #21 0x5562c872a0e4 <unknown>\nE       #22 0x7fa57040f134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1710292459582,"stop":1710292459612,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1710292459662,"stop":1710292459689,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1710292460723,"stop":1710292460762,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"f144e95909bc9954","name":"Screenshot","source":"f144e95909bc9954.png","type":"image/png","size":78390},{"uid":"b74bb23816bedfe","name":"HTML source","source":"b74bb23816bedfe.html","type":"text/html","size":658783}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1710292461987,"stop":1710292462066,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1710292461987,"stop":1710292461987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"43fff9a43a89"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":23,"skipped":0,"passed":186,"unknown":0,"total":209},"items":[{"uid":"77deffb9e17cfe68","reportUrl":"https://Nat754.github.io/StroyremAutomation/244//#testresult/77deffb9e17cfe68","status":"passed","time":{"start":1710205904197,"stop":1710205915899,"duration":11702}},{"uid":"d206a32a3ac1d096","reportUrl":"https://Nat754.github.io/StroyremAutomation/243//#testresult/d206a32a3ac1d096","status":"passed","time":{"start":1710119632803,"stop":1710119644661,"duration":11858}},{"uid":"1b755d7b2babfd7e","reportUrl":"https://Nat754.github.io/StroyremAutomation/242//#testresult/1b755d7b2babfd7e","status":"passed","time":{"start":1710033178933,"stop":1710033189922,"duration":10989}},{"uid":"b0fb330297be9539","reportUrl":"https://Nat754.github.io/StroyremAutomation/241//#testresult/b0fb330297be9539","status":"passed","time":{"start":1709946421393,"stop":1709946432306,"duration":10913}},{"uid":"ff2568afe9c40c2c","reportUrl":"https://Nat754.github.io/StroyremAutomation/240//#testresult/ff2568afe9c40c2c","status":"passed","time":{"start":1709860047157,"stop":1709860057601,"duration":10444}},{"uid":"3a7bf57b49e74c0d","reportUrl":"https://Nat754.github.io/StroyremAutomation/239//#testresult/3a7bf57b49e74c0d","status":"passed","time":{"start":1709773074449,"stop":1709773085014,"duration":10565}},{"uid":"2e28a5a3591eb1b2","reportUrl":"https://Nat754.github.io/StroyremAutomation/238//#testresult/2e28a5a3591eb1b2","status":"passed","time":{"start":1709687396828,"stop":1709687409531,"duration":12703}},{"uid":"5f61a7f93b54fe82","reportUrl":"https://Nat754.github.io/StroyremAutomation/237//#testresult/5f61a7f93b54fe82","status":"passed","time":{"start":1709600959660,"stop":1709600971316,"duration":11656}},{"uid":"ee2e29a5e9389612","reportUrl":"https://Nat754.github.io/StroyremAutomation/236//#testresult/ee2e29a5e9389612","status":"passed","time":{"start":1709514858172,"stop":1709514870010,"duration":11838}},{"uid":"fc69655499fb5f7b","reportUrl":"https://Nat754.github.io/StroyremAutomation/235//#testresult/fc69655499fb5f7b","status":"passed","time":{"start":1709428575370,"stop":1709428587130,"duration":11760}},{"uid":"d47fc2a574331e30","reportUrl":"https://Nat754.github.io/StroyremAutomation/234//#testresult/d47fc2a574331e30","status":"passed","time":{"start":1709341557693,"stop":1709341568706,"duration":11013}},{"uid":"837bcd06b634022e","reportUrl":"https://Nat754.github.io/StroyremAutomation/233//#testresult/837bcd06b634022e","status":"passed","time":{"start":1709255547501,"stop":1709255558338,"duration":10837}},{"uid":"220e7705cd25463a","reportUrl":"https://Nat754.github.io/StroyremAutomation/232//#testresult/220e7705cd25463a","status":"passed","time":{"start":1709168798165,"stop":1709168808670,"duration":10505}},{"uid":"230dc052eb36622b","reportUrl":"https://Nat754.github.io/StroyremAutomation/231//#testresult/230dc052eb36622b","status":"passed","time":{"start":1709082488605,"stop":1709082500599,"duration":11994}},{"uid":"e43d0853cac0eb9b","reportUrl":"https://Nat754.github.io/StroyremAutomation/230//#testresult/e43d0853cac0eb9b","status":"passed","time":{"start":1708996228939,"stop":1708996240569,"duration":11630}},{"uid":"70e2901caf8e0ad3","reportUrl":"https://Nat754.github.io/StroyremAutomation/229//#testresult/70e2901caf8e0ad3","status":"passed","time":{"start":1708909696832,"stop":1708909707858,"duration":11026}},{"uid":"64eb2d1a8d5f2882","reportUrl":"https://Nat754.github.io/StroyremAutomation/228//#testresult/64eb2d1a8d5f2882","status":"passed","time":{"start":1708823592339,"stop":1708823603960,"duration":11621}},{"uid":"c4462f9f08c24511","reportUrl":"https://Nat754.github.io/StroyremAutomation/227//#testresult/c4462f9f08c24511","status":"passed","time":{"start":1708736693389,"stop":1708736704138,"duration":10749}},{"uid":"c329d4edd19f42b0","reportUrl":"https://Nat754.github.io/StroyremAutomation/226//#testresult/c329d4edd19f42b0","status":"passed","time":{"start":1708650408639,"stop":1708650419381,"duration":10742}},{"uid":"856b883b940fccbc","reportUrl":"https://Nat754.github.io/StroyremAutomation/225//#testresult/856b883b940fccbc","status":"passed","time":{"start":1708564365566,"stop":1708564377562,"duration":11996}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"bafc180061a507c0.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}