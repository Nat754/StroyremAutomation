{"uid":"614ba3740130d957","name":"TC 006 - Проверка функциональности ссылки 'Обратный звонок'","fullName":"tests.main.test_main_page.TestMainPage#test_positive_footer_back_call_smoke","historyId":"bbc89feb303b1807835770c04ab6aedf","time":{"start":1696294528551,"stop":1696294528584,"duration":33},"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55ecc38036b3 <unknown>\n#1 0x55ecc34d9036 <unknown>\n#2 0x55ecc35216b6 <unknown>\n#3 0x55ecc35164f9 <unknown>\n#4 0x55ecc35420c2 <unknown>\n#5 0x55ecc3515f16 <unknown>\n#6 0x55ecc354228e <unknown>\n#7 0x55ecc355b322 <unknown>\n#8 0x55ecc3541e93 <unknown>\n#9 0x55ecc3514934 <unknown>\n#10 0x55ecc351571e <unknown>\n#11 0x55ecc37c8cb8 <unknown>\n#12 0x55ecc37ccbf0 <unknown>\n#13 0x55ecc37d719c <unknown>\n#14 0x55ecc37cd808 <unknown>\n#15 0x55ecc379a27f <unknown>\n#16 0x55ecc37f1e88 <unknown>\n#17 0x55ecc37f2059 <unknown>\n#18 0x55ecc3802843 <unknown>\n#19 0x7f24953f7044 <unknown>","statusTrace":"self = <tests.main.test_main_page.TestMainPage object at 0x7f94cf11f290>\nmain_page = <pages.main_page.MainPage object at 0x7f94cdb15ed0>\n\n    @allure.feature(\"Footer functionality\")\n    @allure.title(\"TC 006 - Проверка функциональности ссылки 'Обратный звонок'\")\n    @pytest.mark.xfail  # \"Сломалось?\"\n    @pytest.mark.smoke_test\n    def test_positive_footer_back_call_smoke(self, main_page):\n>       result = main_page.check_call_back_link()\n\ntests/main/test_main_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:103: in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f94cface410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55ecc37f2059 \\\\u003Cunknown>\\\\n#18 0x55ecc3802843 \\\\u003Cunknown>\\\\n#19 0x7f24953f7044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55ecc38036b3 <unknown>\nE       #1 0x55ecc34d9036 <unknown>\nE       #2 0x55ecc35216b6 <unknown>\nE       #3 0x55ecc35164f9 <unknown>\nE       #4 0x55ecc35420c2 <unknown>\nE       #5 0x55ecc3515f16 <unknown>\nE       #6 0x55ecc354228e <unknown>\nE       #7 0x55ecc355b322 <unknown>\nE       #8 0x55ecc3541e93 <unknown>\nE       #9 0x55ecc3514934 <unknown>\nE       #10 0x55ecc351571e <unknown>\nE       #11 0x55ecc37c8cb8 <unknown>\nE       #12 0x55ecc37ccbf0 <unknown>\nE       #13 0x55ecc37d719c <unknown>\nE       #14 0x55ecc37cd808 <unknown>\nE       #15 0x55ecc379a27f <unknown>\nE       #16 0x55ecc37f1e88 <unknown>\nE       #17 0x55ecc37f2059 <unknown>\nE       #18 0x55ecc3802843 <unknown>\nE       #19 0x7f24953f7044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1696294106810,"stop":1696294106890,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1696294106890,"stop":1696294106890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1696294521524,"stop":1696294522339,"duration":815},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696294522339,"stop":1696294522339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_page","time":{"start":1696294522339,"stop":1696294528551,"duration":6212},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1696294740587,"stop":1696294740587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55ecc38036b3 <unknown>\n#1 0x55ecc34d9036 <unknown>\n#2 0x55ecc35216b6 <unknown>\n#3 0x55ecc35164f9 <unknown>\n#4 0x55ecc35420c2 <unknown>\n#5 0x55ecc3515f16 <unknown>\n#6 0x55ecc354228e <unknown>\n#7 0x55ecc355b322 <unknown>\n#8 0x55ecc3541e93 <unknown>\n#9 0x55ecc3514934 <unknown>\n#10 0x55ecc351571e <unknown>\n#11 0x55ecc37c8cb8 <unknown>\n#12 0x55ecc37ccbf0 <unknown>\n#13 0x55ecc37d719c <unknown>\n#14 0x55ecc37cd808 <unknown>\n#15 0x55ecc379a27f <unknown>\n#16 0x55ecc37f1e88 <unknown>\n#17 0x55ecc37f2059 <unknown>\n#18 0x55ecc3802843 <unknown>\n#19 0x7f24953f7044 <unknown>","statusTrace":"self = <tests.main.test_main_page.TestMainPage object at 0x7f94cf11f290>\nmain_page = <pages.main_page.MainPage object at 0x7f94cdb15ed0>\n\n    @allure.feature(\"Footer functionality\")\n    @allure.title(\"TC 006 - Проверка функциональности ссылки 'Обратный звонок'\")\n    @pytest.mark.xfail  # \"Сломалось?\"\n    @pytest.mark.smoke_test\n    def test_positive_footer_back_call_smoke(self, main_page):\n>       result = main_page.check_call_back_link()\n\ntests/main/test_main_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:103: in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f94cface410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55ecc37f2059 \\\\u003Cunknown>\\\\n#18 0x55ecc3802843 \\\\u003Cunknown>\\\\n#19 0x7f24953f7044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55ecc38036b3 <unknown>\nE       #1 0x55ecc34d9036 <unknown>\nE       #2 0x55ecc35216b6 <unknown>\nE       #3 0x55ecc35164f9 <unknown>\nE       #4 0x55ecc35420c2 <unknown>\nE       #5 0x55ecc3515f16 <unknown>\nE       #6 0x55ecc354228e <unknown>\nE       #7 0x55ecc355b322 <unknown>\nE       #8 0x55ecc3541e93 <unknown>\nE       #9 0x55ecc3514934 <unknown>\nE       #10 0x55ecc351571e <unknown>\nE       #11 0x55ecc37c8cb8 <unknown>\nE       #12 0x55ecc37ccbf0 <unknown>\nE       #13 0x55ecc37d719c <unknown>\nE       #14 0x55ecc37cd808 <unknown>\nE       #15 0x55ecc379a27f <unknown>\nE       #16 0x55ecc37f1e88 <unknown>\nE       #17 0x55ecc37f2059 <unknown>\nE       #18 0x55ecc3802843 <unknown>\nE       #19 0x7f24953f7044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Проверка функциональности ссылки 'Обратный звонок'","time":{"start":1696294528552,"stop":1696294528583,"duration":31},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55ecc38036b3 <unknown>\n#1 0x55ecc34d9036 <unknown>\n#2 0x55ecc35216b6 <unknown>\n#3 0x55ecc35164f9 <unknown>\n#4 0x55ecc35420c2 <unknown>\n#5 0x55ecc3515f16 <unknown>\n#6 0x55ecc354228e <unknown>\n#7 0x55ecc355b322 <unknown>\n#8 0x55ecc3541e93 <unknown>\n#9 0x55ecc3514934 <unknown>\n#10 0x55ecc351571e <unknown>\n#11 0x55ecc37c8cb8 <unknown>\n#12 0x55ecc37ccbf0 <unknown>\n#13 0x55ecc37d719c <unknown>\n#14 0x55ecc37cd808 <unknown>\n#15 0x55ecc379a27f <unknown>\n#16 0x55ecc37f1e88 <unknown>\n#17 0x55ecc37f2059 <unknown>\n#18 0x55ecc3802843 <unknown>\n#19 0x7f24953f7044 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/app/pages/main_page.py\", line 103, in check_call_back_link\n    self.driver.find_element(*self._call_back_link).click()\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"44b1f23fd71eec45","name":"Screenshot","source":"44b1f23fd71eec45.png","type":"image/png","size":168721},{"uid":"cb409a9ed6077929","name":"HTML source","source":"cb409a9ed6077929.html","type":"text/html","size":384457}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1696294528768,"stop":1696294528768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1696294528769,"stop":1696294528831,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1696294754862,"stop":1696294754862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Footer functionality"},{"name":"epic","value":"Main Page"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests.main"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"f3c915852963"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.main.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"url","value":"'https://dev:123456@test2.stroyrem-nn.ru/'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":2,"passed":0,"unknown":0,"total":2},"items":[{"uid":"6885e7abe496391","reportUrl":"https://Nat754.github.io/StroyremAutomation/82//#testresult/6885e7abe496391","status":"skipped","statusDetails":"XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x558cc443c6b3 <unknown>\n#1 0x558cc4112036 <unknown>\n#2 0x558cc415a6b6 <unknown>\n#3 0x558cc414f4f9 <unknown>\n#4 0x558cc417b0c2 <unknown>\n#5 0x558cc414ef16 <unknown>\n#6 0x558cc417b28e <unknown>\n#7 0x558cc4194322 <unknown>\n#8 0x558cc417ae93 <unknown>\n#9 0x558cc414d934 <unknown>\n#10 0x558cc414e71e <unknown>\n#11 0x558cc4401cb8 <unknown>\n#12 0x558cc4405bf0 <unknown>\n#13 0x558cc441019c <unknown>\n#14 0x558cc4406808 <unknown>\n#15 0x558cc43d327f <unknown>\n#16 0x558cc442ae88 <unknown>\n#17 0x558cc442b059 <unknown>\n#18 0x558cc443b843 <unknown>\n#19 0x7fdf57fdb044 <unknown>","time":{"start":1696282269643,"stop":1696282269689,"duration":46}}]},"tags":["@pytest.mark.xfail","smoke_test"]},"source":"614ba3740130d957.json","parameterValues":["'https://dev:123456@test2.stroyrem-nn.ru/'"]}