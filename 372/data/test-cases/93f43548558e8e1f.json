{"uid":"93f43548558e8e1f","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"1b0f7ad8d89bc0387b43367254f3fa4d","time":{"start":1721265264054,"stop":1721265266340,"duration":2286},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x55ff27f90c5a <unknown>\n#1 0x55ff27c73e2c <unknown>\n#2 0x55ff27cc7406 <unknown>\n#3 0x55ff27cc5246 <unknown>\n#4 0x55ff27cc2c27 <unknown>\n#5 0x55ff27cc1a60 <unknown>\n#6 0x55ff27cb515f <unknown>\n#7 0x55ff27ce35c2 <unknown>\n#8 0x55ff27cb4ad9 <unknown>\n#9 0x55ff27ce378e <unknown>\n#10 0x55ff27d02303 <unknown>\n#11 0x55ff27ce3363 <unknown>\n#12 0x55ff27cb3247 <unknown>\n#13 0x55ff27cb3b9e <unknown>\n#14 0x55ff27f5722b <unknown>\n#15 0x55ff27f5b2d1 <unknown>\n#16 0x55ff27f42ade <unknown>\n#17 0x55ff27f5be32 <unknown>\n#18 0x55ff27f2777f <unknown>\n#19 0x55ff27f80618 <unknown>\n#20 0x55ff27f807f0 <unknown>\n#21 0x55ff27f8fd8c <unknown>\n#22 0x7ff4cd79d134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f54178358d0>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f5416fb78d0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5416fb7590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ff27f807f0 \\\\u003Cunknown>\\\\n#21 0x55ff27f8fd8c \\\\u003Cunknown>\\\\n#22 0x7ff4cd79d134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x55ff27f90c5a <unknown>\nE       #1 0x55ff27c73e2c <unknown>\nE       #2 0x55ff27cc7406 <unknown>\nE       #3 0x55ff27cc5246 <unknown>\nE       #4 0x55ff27cc2c27 <unknown>\nE       #5 0x55ff27cc1a60 <unknown>\nE       #6 0x55ff27cb515f <unknown>\nE       #7 0x55ff27ce35c2 <unknown>\nE       #8 0x55ff27cb4ad9 <unknown>\nE       #9 0x55ff27ce378e <unknown>\nE       #10 0x55ff27d02303 <unknown>\nE       #11 0x55ff27ce3363 <unknown>\nE       #12 0x55ff27cb3247 <unknown>\nE       #13 0x55ff27cb3b9e <unknown>\nE       #14 0x55ff27f5722b <unknown>\nE       #15 0x55ff27f5b2d1 <unknown>\nE       #16 0x55ff27f42ade <unknown>\nE       #17 0x55ff27f5be32 <unknown>\nE       #18 0x55ff27f2777f <unknown>\nE       #19 0x55ff27f80618 <unknown>\nE       #20 0x55ff27f807f0 <unknown>\nE       #21 0x55ff27f8fd8c <unknown>\nE       #22 0x7ff4cd79d134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721264130799,"stop":1721264130868,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1721264130868,"stop":1721264130868,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1721265242805,"stop":1721265243497,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1721265243497,"stop":1721265264053,"duration":20556},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1721265243497,"stop":1721265243497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x55ff27f90c5a <unknown>\n#1 0x55ff27c73e2c <unknown>\n#2 0x55ff27cc7406 <unknown>\n#3 0x55ff27cc5246 <unknown>\n#4 0x55ff27cc2c27 <unknown>\n#5 0x55ff27cc1a60 <unknown>\n#6 0x55ff27cb515f <unknown>\n#7 0x55ff27ce35c2 <unknown>\n#8 0x55ff27cb4ad9 <unknown>\n#9 0x55ff27ce378e <unknown>\n#10 0x55ff27d02303 <unknown>\n#11 0x55ff27ce3363 <unknown>\n#12 0x55ff27cb3247 <unknown>\n#13 0x55ff27cb3b9e <unknown>\n#14 0x55ff27f5722b <unknown>\n#15 0x55ff27f5b2d1 <unknown>\n#16 0x55ff27f42ade <unknown>\n#17 0x55ff27f5be32 <unknown>\n#18 0x55ff27f2777f <unknown>\n#19 0x55ff27f80618 <unknown>\n#20 0x55ff27f807f0 <unknown>\n#21 0x55ff27f8fd8c <unknown>\n#22 0x7ff4cd79d134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f54178358d0>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f5416fb78d0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5416fb7590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ff27f807f0 \\\\u003Cunknown>\\\\n#21 0x55ff27f8fd8c \\\\u003Cunknown>\\\\n#22 0x7ff4cd79d134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x55ff27f90c5a <unknown>\nE       #1 0x55ff27c73e2c <unknown>\nE       #2 0x55ff27cc7406 <unknown>\nE       #3 0x55ff27cc5246 <unknown>\nE       #4 0x55ff27cc2c27 <unknown>\nE       #5 0x55ff27cc1a60 <unknown>\nE       #6 0x55ff27cb515f <unknown>\nE       #7 0x55ff27ce35c2 <unknown>\nE       #8 0x55ff27cb4ad9 <unknown>\nE       #9 0x55ff27ce378e <unknown>\nE       #10 0x55ff27d02303 <unknown>\nE       #11 0x55ff27ce3363 <unknown>\nE       #12 0x55ff27cb3247 <unknown>\nE       #13 0x55ff27cb3b9e <unknown>\nE       #14 0x55ff27f5722b <unknown>\nE       #15 0x55ff27f5b2d1 <unknown>\nE       #16 0x55ff27f42ade <unknown>\nE       #17 0x55ff27f5be32 <unknown>\nE       #18 0x55ff27f2777f <unknown>\nE       #19 0x55ff27f80618 <unknown>\nE       #20 0x55ff27f807f0 <unknown>\nE       #21 0x55ff27f8fd8c <unknown>\nE       #22 0x7ff4cd79d134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1721265264054,"stop":1721265264093,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1721265264137,"stop":1721265264167,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1721265265216,"stop":1721265265257,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"250c1686848964ca","name":"Screenshot","source":"250c1686848964ca.png","type":"image/png","size":136361},{"uid":"71e41cd93e54865d","name":"HTML source","source":"71e41cd93e54865d.html","type":"text/html","size":907171}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1721265266522,"stop":1721265266610,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1721265266522,"stop":1721265266522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"b0ea5330f293"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":48,"unknown":0,"total":50},"items":[{"uid":"c10cadb92f1d405e","reportUrl":"https://Nat754.github.io/StroyremAutomation/371//#testresult/c10cadb92f1d405e","status":"passed","time":{"start":1721178712550,"stop":1721178721025,"duration":8475}},{"uid":"37c5a2ed59d092f5","reportUrl":"https://Nat754.github.io/StroyremAutomation/370//#testresult/37c5a2ed59d092f5","status":"passed","time":{"start":1721092517301,"stop":1721092526912,"duration":9611}},{"uid":"658fe31b1172ac96","reportUrl":"https://Nat754.github.io/StroyremAutomation/369//#testresult/658fe31b1172ac96","status":"passed","time":{"start":1721006247753,"stop":1721006258071,"duration":10318}},{"uid":"a4cac905985773f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/368//#testresult/a4cac905985773f7","status":"passed","time":{"start":1720919788780,"stop":1720919796845,"duration":8065}},{"uid":"14990a613e39fd3d","reportUrl":"https://Nat754.github.io/StroyremAutomation/367//#testresult/14990a613e39fd3d","status":"passed","time":{"start":1720833081150,"stop":1720833091612,"duration":10462}},{"uid":"bd75cfaa85b78367","reportUrl":"https://Nat754.github.io/StroyremAutomation/366//#testresult/bd75cfaa85b78367","status":"passed","time":{"start":1720746917355,"stop":1720746926707,"duration":9352}},{"uid":"730d68ac5e86c23","reportUrl":"https://Nat754.github.io/StroyremAutomation/365//#testresult/730d68ac5e86c23","status":"passed","time":{"start":1720660402871,"stop":1720660412370,"duration":9499}},{"uid":"27c577107a108f04","reportUrl":"https://Nat754.github.io/StroyremAutomation/364//#testresult/27c577107a108f04","status":"passed","time":{"start":1720574003971,"stop":1720574013196,"duration":9225}},{"uid":"bbc64e28bc43639f","reportUrl":"https://Nat754.github.io/StroyremAutomation/363//#testresult/bbc64e28bc43639f","status":"passed","time":{"start":1720487666511,"stop":1720487676761,"duration":10250}},{"uid":"ecfdf1dec12bb494","reportUrl":"https://Nat754.github.io/StroyremAutomation/362//#testresult/ecfdf1dec12bb494","status":"passed","time":{"start":1720401139325,"stop":1720401149239,"duration":9914}},{"uid":"c17240790cd6197e","reportUrl":"https://Nat754.github.io/StroyremAutomation/361//#testresult/c17240790cd6197e","status":"passed","time":{"start":1720314906256,"stop":1720314914208,"duration":7952}},{"uid":"fe7b6ec666593365","reportUrl":"https://Nat754.github.io/StroyremAutomation/360//#testresult/fe7b6ec666593365","status":"passed","time":{"start":1720228213367,"stop":1720228222773,"duration":9406}},{"uid":"4858b5c72312ae16","reportUrl":"https://Nat754.github.io/StroyremAutomation/359//#testresult/4858b5c72312ae16","status":"passed","time":{"start":1720141819502,"stop":1720141828219,"duration":8717}},{"uid":"2db06f5fbe13426b","reportUrl":"https://Nat754.github.io/StroyremAutomation/358//#testresult/2db06f5fbe13426b","status":"passed","time":{"start":1720055486114,"stop":1720055494730,"duration":8616}},{"uid":"78339beccd55d44b","reportUrl":"https://Nat754.github.io/StroyremAutomation/357//#testresult/78339beccd55d44b","status":"passed","time":{"start":1719969136854,"stop":1719969145631,"duration":8777}},{"uid":"5132290643d4a4b4","reportUrl":"https://Nat754.github.io/StroyremAutomation/356//#testresult/5132290643d4a4b4","status":"passed","time":{"start":1719882727854,"stop":1719882736283,"duration":8429}},{"uid":"14ec09646b40d2fc","reportUrl":"https://Nat754.github.io/StroyremAutomation/355//#testresult/14ec09646b40d2fc","status":"passed","time":{"start":1719796569286,"stop":1719796577371,"duration":8085}},{"uid":"8bab0ec1dad78719","reportUrl":"https://Nat754.github.io/StroyremAutomation/354//#testresult/8bab0ec1dad78719","status":"passed","time":{"start":1719710090166,"stop":1719710098208,"duration":8042}},{"uid":"d72373e06bf9c1ba","reportUrl":"https://Nat754.github.io/StroyremAutomation/353//#testresult/d72373e06bf9c1ba","status":"passed","time":{"start":1719623372214,"stop":1719623380205,"duration":7991}},{"uid":"7cd805793c785145","reportUrl":"https://Nat754.github.io/StroyremAutomation/352//#testresult/7cd805793c785145","status":"passed","time":{"start":1719537242419,"stop":1719537252475,"duration":10056}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"93f43548558e8e1f.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"]}