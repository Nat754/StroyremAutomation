{"uid":"9379395d3e15422c","name":"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","historyId":"ae0b03f524f3687047fb70a412376bdb","time":{"start":1702453694163,"stop":1702453698694,"duration":4531},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome-headless-shell=120.0.6099.71); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x562315ed6d33 <unknown>\n#1 0x562315b93f87 <unknown>\n#2 0x562315b9a533 <unknown>\n#3 0x562315b9ca28 <unknown>\n#4 0x562315b9cb7c <unknown>\n#5 0x562315bebf21 <unknown>\n#6 0x562315be9a64 <unknown>\n#7 0x562315be6b04 <unknown>\n#8 0x562315be5729 <unknown>\n#9 0x562315bd7583 <unknown>\n#10 0x562315c0d342 <unknown>\n#11 0x562315bd6db9 <unknown>\n#12 0x562315c0d75e <unknown>\n#13 0x562315c2c297 <unknown>\n#14 0x562315c0d0e3 <unknown>\n#15 0x562315bd5044 <unknown>\n#16 0x562315bd644e <unknown>\n#17 0x562315e9b861 <unknown>\n#18 0x562315e9f785 <unknown>\n#19 0x562315e89285 <unknown>\n#20 0x562315ea041f <unknown>\n#21 0x562315e6d20f <unknown>\n#22 0x562315ec4028 <unknown>\n#23 0x562315ec41f7 <unknown>\n#24 0x562315ed5ed4 <unknown>\n#25 0x7f567d09e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c5018e10>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c4facf10>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n        product_page_open.get_text_red_link().click()\n        time.sleep(2)\n>       product_page_open.get_add_to_cart_btn().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c32b4890>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#23 0x562315ec41f7 \\\\u003Cunknown>\\\\n#24 0x562315ed5ed4 \\\\u003Cunknown>\\\\n#25 0x7f567d09e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome-headless-shell=120.0.6099.71); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x562315ed6d33 <unknown>\nE       #1 0x562315b93f87 <unknown>\nE       #2 0x562315b9a533 <unknown>\nE       #3 0x562315b9ca28 <unknown>\nE       #4 0x562315b9cb7c <unknown>\nE       #5 0x562315bebf21 <unknown>\nE       #6 0x562315be9a64 <unknown>\nE       #7 0x562315be6b04 <unknown>\nE       #8 0x562315be5729 <unknown>\nE       #9 0x562315bd7583 <unknown>\nE       #10 0x562315c0d342 <unknown>\nE       #11 0x562315bd6db9 <unknown>\nE       #12 0x562315c0d75e <unknown>\nE       #13 0x562315c2c297 <unknown>\nE       #14 0x562315c0d0e3 <unknown>\nE       #15 0x562315bd5044 <unknown>\nE       #16 0x562315bd644e <unknown>\nE       #17 0x562315e9b861 <unknown>\nE       #18 0x562315e9f785 <unknown>\nE       #19 0x562315e89285 <unknown>\nE       #20 0x562315ea041f <unknown>\nE       #21 0x562315e6d20f <unknown>\nE       #22 0x562315ec4028 <unknown>\nE       #23 0x562315ec41f7 <unknown>\nE       #24 0x562315ed5ed4 <unknown>\nE       #25 0x7f567d09e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702452729751,"stop":1702452729817,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702452729818,"stop":1702452729818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702453684028,"stop":1702453684805,"duration":777},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702453684805,"stop":1702453694162,"duration":9357},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702453684805,"stop":1702453684805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome-headless-shell=120.0.6099.71); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x562315ed6d33 <unknown>\n#1 0x562315b93f87 <unknown>\n#2 0x562315b9a533 <unknown>\n#3 0x562315b9ca28 <unknown>\n#4 0x562315b9cb7c <unknown>\n#5 0x562315bebf21 <unknown>\n#6 0x562315be9a64 <unknown>\n#7 0x562315be6b04 <unknown>\n#8 0x562315be5729 <unknown>\n#9 0x562315bd7583 <unknown>\n#10 0x562315c0d342 <unknown>\n#11 0x562315bd6db9 <unknown>\n#12 0x562315c0d75e <unknown>\n#13 0x562315c2c297 <unknown>\n#14 0x562315c0d0e3 <unknown>\n#15 0x562315bd5044 <unknown>\n#16 0x562315bd644e <unknown>\n#17 0x562315e9b861 <unknown>\n#18 0x562315e9f785 <unknown>\n#19 0x562315e89285 <unknown>\n#20 0x562315ea041f <unknown>\n#21 0x562315e6d20f <unknown>\n#22 0x562315ec4028 <unknown>\n#23 0x562315ec41f7 <unknown>\n#24 0x562315ed5ed4 <unknown>\n#25 0x7f567d09e044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c5018e10>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c4facf10>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n        product_page_open.get_text_red_link().click()\n        time.sleep(2)\n>       product_page_open.get_add_to_cart_btn().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c32b4890>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#23 0x562315ec41f7 \\\\u003Cunknown>\\\\n#24 0x562315ed5ed4 \\\\u003Cunknown>\\\\n#25 0x7f567d09e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome-headless-shell=120.0.6099.71); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x562315ed6d33 <unknown>\nE       #1 0x562315b93f87 <unknown>\nE       #2 0x562315b9a533 <unknown>\nE       #3 0x562315b9ca28 <unknown>\nE       #4 0x562315b9cb7c <unknown>\nE       #5 0x562315bebf21 <unknown>\nE       #6 0x562315be9a64 <unknown>\nE       #7 0x562315be6b04 <unknown>\nE       #8 0x562315be5729 <unknown>\nE       #9 0x562315bd7583 <unknown>\nE       #10 0x562315c0d342 <unknown>\nE       #11 0x562315bd6db9 <unknown>\nE       #12 0x562315c0d75e <unknown>\nE       #13 0x562315c2c297 <unknown>\nE       #14 0x562315c0d0e3 <unknown>\nE       #15 0x562315bd5044 <unknown>\nE       #16 0x562315bd644e <unknown>\nE       #17 0x562315e9b861 <unknown>\nE       #18 0x562315e9f785 <unknown>\nE       #19 0x562315e89285 <unknown>\nE       #20 0x562315ea041f <unknown>\nE       #21 0x562315e6d20f <unknown>\nE       #22 0x562315ec4028 <unknown>\nE       #23 0x562315ec41f7 <unknown>\nE       #24 0x562315ed5ed4 <unknown>\nE       #25 0x7f567d09e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702453694163,"stop":1702453694218,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1702453696278,"stop":1702453696320,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'В корзину'","time":{"start":1702453698361,"stop":1702453698411,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"d6e35a0ecf0a9d06","name":"Screenshot","source":"d6e35a0ecf0a9d06.png","type":"image/png","size":267465},{"uid":"f5e30aa50ed2679e","name":"HTML source","source":"f5e30aa50ed2679e.html","type":"text/html","size":855931}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1702453698896,"stop":1702453698972,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1702453698896,"stop":1702453698896,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"2935072e3751"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":117,"unknown":0,"total":119},"items":[{"uid":"ffe379be6ff6fec3","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/ffe379be6ff6fec3","status":"passed","time":{"start":1700615279688,"stop":1700615288347,"duration":8659}},{"uid":"ab6d080b83902489","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/ab6d080b83902489","status":"passed","time":{"start":1700529149341,"stop":1700529158904,"duration":9563}},{"uid":"2c147cb32c90fa53","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/2c147cb32c90fa53","status":"passed","time":{"start":1700442508195,"stop":1700442516904,"duration":8709}},{"uid":"45cb4c5761038e5b","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/45cb4c5761038e5b","status":"passed","time":{"start":1700356192861,"stop":1700356201311,"duration":8450}},{"uid":"ad7e755bf9348cb9","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/ad7e755bf9348cb9","status":"passed","time":{"start":1700269511094,"stop":1700269519662,"duration":8568}},{"uid":"5039ce5544c6b9f0","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/5039ce5544c6b9f0","status":"passed","time":{"start":1700183438179,"stop":1700183447180,"duration":9001}},{"uid":"bddf852f87806b13","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/bddf852f87806b13","status":"passed","time":{"start":1700096905603,"stop":1700096914441,"duration":8838}},{"uid":"d7c055752b5c412","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/d7c055752b5c412","status":"passed","time":{"start":1700010612874,"stop":1700010622014,"duration":9140}},{"uid":"820d7aa27650e102","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/820d7aa27650e102","status":"passed","time":{"start":1699923824535,"stop":1699923832796,"duration":8261}},{"uid":"339acd3991c3e03b","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/339acd3991c3e03b","status":"passed","time":{"start":1699837617064,"stop":1699837625904,"duration":8840}},{"uid":"11eded80c92fb36b","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/11eded80c92fb36b","status":"passed","time":{"start":1699751349559,"stop":1699751357334,"duration":7775}},{"uid":"cd79cc0d065f1f37","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/cd79cc0d065f1f37","status":"passed","time":{"start":1699664857000,"stop":1699664866545,"duration":9545}},{"uid":"db45599605900ffb","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/db45599605900ffb","status":"passed","time":{"start":1699578270850,"stop":1699578279306,"duration":8456}},{"uid":"5bba83d6fd38b086","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/5bba83d6fd38b086","status":"passed","time":{"start":1699491823300,"stop":1699491831718,"duration":8418}},{"uid":"63ef0077214db6ac","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/63ef0077214db6ac","status":"passed","time":{"start":1699405632511,"stop":1699405641786,"duration":9275}},{"uid":"2fe0f0fcd4c0a80f","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/2fe0f0fcd4c0a80f","status":"passed","time":{"start":1699319173676,"stop":1699319181985,"duration":8309}},{"uid":"f6ff059efed10457","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/f6ff059efed10457","status":"passed","time":{"start":1699232897385,"stop":1699232905088,"duration":7703}},{"uid":"bb9d2c089bde64cf","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/bb9d2c089bde64cf","status":"passed","time":{"start":1699146779489,"stop":1699146789102,"duration":9613}},{"uid":"2687b8c60224e6ec","reportUrl":"https://Nat754.github.io/StroyremAutomation/115//#testresult/2687b8c60224e6ec","status":"passed","time":{"start":1699059926547,"stop":1699059935359,"duration":8812}},{"uid":"f8ea857de8e6a48f","reportUrl":"https://Nat754.github.io/StroyremAutomation/114//#testresult/f8ea857de8e6a48f","status":"passed","time":{"start":1698973487414,"stop":1698973495811,"duration":8397}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"9379395d3e15422c.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}