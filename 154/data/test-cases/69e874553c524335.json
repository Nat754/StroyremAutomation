{"uid":"69e874553c524335","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke","historyId":"5ec2250188f66239d7a557e2f16d23d1","time":{"start":1702453454199,"stop":1702453456468,"duration":2269},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55e470ef7d33 <unknown>\n#1 0x55e470bb4f87 <unknown>\n#2 0x55e470c0d002 <unknown>\n#3 0x55e470c0aa64 <unknown>\n#4 0x55e470c07b04 <unknown>\n#5 0x55e470c06729 <unknown>\n#6 0x55e470bf8583 <unknown>\n#7 0x55e470c2e342 <unknown>\n#8 0x55e470bf7db9 <unknown>\n#9 0x55e470c2e75e <unknown>\n#10 0x55e470c4d297 <unknown>\n#11 0x55e470c2e0e3 <unknown>\n#12 0x55e470bf6044 <unknown>\n#13 0x55e470bf744e <unknown>\n#14 0x55e470ebc861 <unknown>\n#15 0x55e470ec0785 <unknown>\n#16 0x55e470eaa285 <unknown>\n#17 0x55e470ec141f <unknown>\n#18 0x55e470e8e20f <unknown>\n#19 0x55e470ee5028 <unknown>\n#20 0x55e470ee51f7 <unknown>\n#21 0x55e470ef6ed4 <unknown>\n#22 0x7f529bcf3044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c4ffed10>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c31e9250>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c31e9410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e470ee51f7 \\\\u003Cunknown>\\\\n#21 0x55e470ef6ed4 \\\\u003Cunknown>\\\\n#22 0x7f529bcf3044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55e470ef7d33 <unknown>\nE       #1 0x55e470bb4f87 <unknown>\nE       #2 0x55e470c0d002 <unknown>\nE       #3 0x55e470c0aa64 <unknown>\nE       #4 0x55e470c07b04 <unknown>\nE       #5 0x55e470c06729 <unknown>\nE       #6 0x55e470bf8583 <unknown>\nE       #7 0x55e470c2e342 <unknown>\nE       #8 0x55e470bf7db9 <unknown>\nE       #9 0x55e470c2e75e <unknown>\nE       #10 0x55e470c4d297 <unknown>\nE       #11 0x55e470c2e0e3 <unknown>\nE       #12 0x55e470bf6044 <unknown>\nE       #13 0x55e470bf744e <unknown>\nE       #14 0x55e470ebc861 <unknown>\nE       #15 0x55e470ec0785 <unknown>\nE       #16 0x55e470eaa285 <unknown>\nE       #17 0x55e470ec141f <unknown>\nE       #18 0x55e470e8e20f <unknown>\nE       #19 0x55e470ee5028 <unknown>\nE       #20 0x55e470ee51f7 <unknown>\nE       #21 0x55e470ef6ed4 <unknown>\nE       #22 0x7f529bcf3044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702452729751,"stop":1702452729817,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702452729818,"stop":1702452729818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702453444585,"stop":1702453445358,"duration":773},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702453445358,"stop":1702453445358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702453445358,"stop":1702453454199,"duration":8841},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55e470ef7d33 <unknown>\n#1 0x55e470bb4f87 <unknown>\n#2 0x55e470c0d002 <unknown>\n#3 0x55e470c0aa64 <unknown>\n#4 0x55e470c07b04 <unknown>\n#5 0x55e470c06729 <unknown>\n#6 0x55e470bf8583 <unknown>\n#7 0x55e470c2e342 <unknown>\n#8 0x55e470bf7db9 <unknown>\n#9 0x55e470c2e75e <unknown>\n#10 0x55e470c4d297 <unknown>\n#11 0x55e470c2e0e3 <unknown>\n#12 0x55e470bf6044 <unknown>\n#13 0x55e470bf744e <unknown>\n#14 0x55e470ebc861 <unknown>\n#15 0x55e470ec0785 <unknown>\n#16 0x55e470eaa285 <unknown>\n#17 0x55e470ec141f <unknown>\n#18 0x55e470e8e20f <unknown>\n#19 0x55e470ee5028 <unknown>\n#20 0x55e470ee51f7 <unknown>\n#21 0x55e470ef6ed4 <unknown>\n#22 0x7f529bcf3044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c4ffed10>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c31e9250>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c31e9410>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e470ee51f7 \\\\u003Cunknown>\\\\n#21 0x55e470ef6ed4 \\\\u003Cunknown>\\\\n#22 0x7f529bcf3044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55e470ef7d33 <unknown>\nE       #1 0x55e470bb4f87 <unknown>\nE       #2 0x55e470c0d002 <unknown>\nE       #3 0x55e470c0aa64 <unknown>\nE       #4 0x55e470c07b04 <unknown>\nE       #5 0x55e470c06729 <unknown>\nE       #6 0x55e470bf8583 <unknown>\nE       #7 0x55e470c2e342 <unknown>\nE       #8 0x55e470bf7db9 <unknown>\nE       #9 0x55e470c2e75e <unknown>\nE       #10 0x55e470c4d297 <unknown>\nE       #11 0x55e470c2e0e3 <unknown>\nE       #12 0x55e470bf6044 <unknown>\nE       #13 0x55e470bf744e <unknown>\nE       #14 0x55e470ebc861 <unknown>\nE       #15 0x55e470ec0785 <unknown>\nE       #16 0x55e470eaa285 <unknown>\nE       #17 0x55e470ec141f <unknown>\nE       #18 0x55e470e8e20f <unknown>\nE       #19 0x55e470ee5028 <unknown>\nE       #20 0x55e470ee51f7 <unknown>\nE       #21 0x55e470ef6ed4 <unknown>\nE       #22 0x7f529bcf3044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1702453454199,"stop":1702453454234,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1702453454295,"stop":1702453454324,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702453455362,"stop":1702453455402,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"bcb81f73c84118f9","name":"Screenshot","source":"bcb81f73c84118f9.png","type":"image/png","size":128932},{"uid":"ef43351378509b7","name":"HTML source","source":"ef43351378509b7.html","type":"text/html","size":724774}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1702453456648,"stop":1702453456648,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1702453456649,"stop":1702453456719,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"2935072e3751"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":130,"unknown":0,"total":134},"items":[{"uid":"17014ee8aa2c888c","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/17014ee8aa2c888c","status":"passed","time":{"start":1700615069976,"stop":1700615077885,"duration":7909}},{"uid":"70d9dc1efa83cb11","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/70d9dc1efa83cb11","status":"passed","time":{"start":1700528866986,"stop":1700528876008,"duration":9022}},{"uid":"bf6b24f5c232cc11","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/bf6b24f5c232cc11","status":"passed","time":{"start":1700442281758,"stop":1700442289807,"duration":8049}},{"uid":"d535eb85e0042ff","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/d535eb85e0042ff","status":"passed","time":{"start":1700355979407,"stop":1700355987324,"duration":7917}},{"uid":"60f54492b514967d","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/60f54492b514967d","status":"passed","time":{"start":1700269298949,"stop":1700269307156,"duration":8207}},{"uid":"83d270e859424fac","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/83d270e859424fac","status":"passed","time":{"start":1700183177654,"stop":1700183186225,"duration":8571}},{"uid":"18a2bf5476a6e8e3","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/18a2bf5476a6e8e3","status":"passed","time":{"start":1700096674113,"stop":1700096682278,"duration":8165}},{"uid":"e10563bd464fa41c","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/e10563bd464fa41c","status":"passed","time":{"start":1700010350107,"stop":1700010358773,"duration":8666}},{"uid":"4722412b9633abb5","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/4722412b9633abb5","status":"passed","time":{"start":1699923616108,"stop":1699923623935,"duration":7827}},{"uid":"bf9294fb05f53058","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/bf9294fb05f53058","status":"passed","time":{"start":1699837396296,"stop":1699837404817,"duration":8521}},{"uid":"7d0fc954d18bca12","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/7d0fc954d18bca12","status":"passed","time":{"start":1699751123295,"stop":1699751132039,"duration":8744}},{"uid":"84d1e1fe13eda772","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/84d1e1fe13eda772","status":"passed","time":{"start":1699664592131,"stop":1699664601066,"duration":8935}},{"uid":"8241fc6082e4b29a","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/8241fc6082e4b29a","status":"passed","time":{"start":1699578056631,"stop":1699578064634,"duration":8003}},{"uid":"98961d224ee86111","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/98961d224ee86111","status":"passed","time":{"start":1699491610863,"stop":1699491618622,"duration":7759}},{"uid":"1a7dbfe3ebe280bb","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/1a7dbfe3ebe280bb","status":"passed","time":{"start":1699405381531,"stop":1699405390681,"duration":9150}},{"uid":"530aa2e751c2ac4e","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/530aa2e751c2ac4e","status":"passed","time":{"start":1699318960496,"stop":1699318968304,"duration":7808}},{"uid":"d19f50d6289faedd","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/d19f50d6289faedd","status":"passed","time":{"start":1699232666320,"stop":1699232675197,"duration":8877}},{"uid":"817ead08052e1264","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/817ead08052e1264","status":"passed","time":{"start":1699146519910,"stop":1699146528507,"duration":8597}},{"uid":"b91de2e91e23a732","reportUrl":"https://Nat754.github.io/StroyremAutomation/115//#testresult/b91de2e91e23a732","status":"passed","time":{"start":1699059698704,"stop":1699059707005,"duration":8301}},{"uid":"ff404577921f1950","reportUrl":"https://Nat754.github.io/StroyremAutomation/114//#testresult/ff404577921f1950","status":"passed","time":{"start":1698973277395,"stop":1698973285383,"duration":7988}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"69e874553c524335.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}