{"uid":"c797b25c248a9768","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke","historyId":"8519a10778cf28e105209a17627cfb4a","time":{"start":1702453395964,"stop":1702453398244,"duration":2280},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55610f3ffd33 <unknown>\n#1 0x55610f0bcf87 <unknown>\n#2 0x55610f115002 <unknown>\n#3 0x55610f112a64 <unknown>\n#4 0x55610f10fb04 <unknown>\n#5 0x55610f10e729 <unknown>\n#6 0x55610f100583 <unknown>\n#7 0x55610f136342 <unknown>\n#8 0x55610f0ffdb9 <unknown>\n#9 0x55610f13675e <unknown>\n#10 0x55610f155297 <unknown>\n#11 0x55610f1360e3 <unknown>\n#12 0x55610f0fe044 <unknown>\n#13 0x55610f0ff44e <unknown>\n#14 0x55610f3c4861 <unknown>\n#15 0x55610f3c8785 <unknown>\n#16 0x55610f3b2285 <unknown>\n#17 0x55610f3c941f <unknown>\n#18 0x55610f39620f <unknown>\n#19 0x55610f3ed028 <unknown>\n#20 0x55610f3ed1f7 <unknown>\n#21 0x55610f3feed4 <unknown>\n#22 0x7f9c7c247044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c500fd90>\nlink = 'https://stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c502f290>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke(self, link,\n                                                                                               product_page_open):\n        product_page_open.get_field_price_first().send_keys(10000)\n        product_page_open.get_field_price_last().send_keys(14999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c4764910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55610f3ed1f7 \\\\u003Cunknown>\\\\n#21 0x55610f3feed4 \\\\u003Cunknown>\\\\n#22 0x7f9c7c247044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55610f3ffd33 <unknown>\nE       #1 0x55610f0bcf87 <unknown>\nE       #2 0x55610f115002 <unknown>\nE       #3 0x55610f112a64 <unknown>\nE       #4 0x55610f10fb04 <unknown>\nE       #5 0x55610f10e729 <unknown>\nE       #6 0x55610f100583 <unknown>\nE       #7 0x55610f136342 <unknown>\nE       #8 0x55610f0ffdb9 <unknown>\nE       #9 0x55610f13675e <unknown>\nE       #10 0x55610f155297 <unknown>\nE       #11 0x55610f1360e3 <unknown>\nE       #12 0x55610f0fe044 <unknown>\nE       #13 0x55610f0ff44e <unknown>\nE       #14 0x55610f3c4861 <unknown>\nE       #15 0x55610f3c8785 <unknown>\nE       #16 0x55610f3b2285 <unknown>\nE       #17 0x55610f3c941f <unknown>\nE       #18 0x55610f39620f <unknown>\nE       #19 0x55610f3ed028 <unknown>\nE       #20 0x55610f3ed1f7 <unknown>\nE       #21 0x55610f3feed4 <unknown>\nE       #22 0x7f9c7c247044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702452729751,"stop":1702452729817,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702452729818,"stop":1702452729818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702453386162,"stop":1702453386944,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702453386944,"stop":1702453395964,"duration":9020},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702453386944,"stop":1702453386944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55610f3ffd33 <unknown>\n#1 0x55610f0bcf87 <unknown>\n#2 0x55610f115002 <unknown>\n#3 0x55610f112a64 <unknown>\n#4 0x55610f10fb04 <unknown>\n#5 0x55610f10e729 <unknown>\n#6 0x55610f100583 <unknown>\n#7 0x55610f136342 <unknown>\n#8 0x55610f0ffdb9 <unknown>\n#9 0x55610f13675e <unknown>\n#10 0x55610f155297 <unknown>\n#11 0x55610f1360e3 <unknown>\n#12 0x55610f0fe044 <unknown>\n#13 0x55610f0ff44e <unknown>\n#14 0x55610f3c4861 <unknown>\n#15 0x55610f3c8785 <unknown>\n#16 0x55610f3b2285 <unknown>\n#17 0x55610f3c941f <unknown>\n#18 0x55610f39620f <unknown>\n#19 0x55610f3ed028 <unknown>\n#20 0x55610f3ed1f7 <unknown>\n#21 0x55610f3feed4 <unknown>\n#22 0x7f9c7c247044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fb3c500fd90>\nlink = 'https://stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fb3c502f290>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_10000_14999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHTUKATURNO_OTDELOCHNYJ_INSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_10000_14999rub_smoke(self, link,\n                                                                                               product_page_open):\n        product_page_open.get_field_price_first().send_keys(10000)\n        product_page_open.get_field_price_last().send_keys(14999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3c4764910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55610f3ed1f7 \\\\u003Cunknown>\\\\n#21 0x55610f3feed4 \\\\u003Cunknown>\\\\n#22 0x7f9c7c247044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55610f3ffd33 <unknown>\nE       #1 0x55610f0bcf87 <unknown>\nE       #2 0x55610f115002 <unknown>\nE       #3 0x55610f112a64 <unknown>\nE       #4 0x55610f10fb04 <unknown>\nE       #5 0x55610f10e729 <unknown>\nE       #6 0x55610f100583 <unknown>\nE       #7 0x55610f136342 <unknown>\nE       #8 0x55610f0ffdb9 <unknown>\nE       #9 0x55610f13675e <unknown>\nE       #10 0x55610f155297 <unknown>\nE       #11 0x55610f1360e3 <unknown>\nE       #12 0x55610f0fe044 <unknown>\nE       #13 0x55610f0ff44e <unknown>\nE       #14 0x55610f3c4861 <unknown>\nE       #15 0x55610f3c8785 <unknown>\nE       #16 0x55610f3b2285 <unknown>\nE       #17 0x55610f3c941f <unknown>\nE       #18 0x55610f39620f <unknown>\nE       #19 0x55610f3ed028 <unknown>\nE       #20 0x55610f3ed1f7 <unknown>\nE       #21 0x55610f3feed4 <unknown>\nE       #22 0x7f9c7c247044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1702453395964,"stop":1702453395995,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1702453396058,"stop":1702453396088,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702453397130,"stop":1702453397175,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"1434134226f9823","name":"Screenshot","source":"1434134226f9823.png","type":"image/png","size":129648},{"uid":"fedc73f15b506a98","name":"HTML source","source":"fedc73f15b506a98.html","type":"text/html","size":925173}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1702453398428,"stop":1702453398498,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1702453398428,"stop":1702453398428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"2935072e3751"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":129,"unknown":0,"total":135},"items":[{"uid":"b940e9f56fdece3","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/b940e9f56fdece3","status":"passed","time":{"start":1700615007486,"stop":1700615016517,"duration":9031}},{"uid":"3d7d82c3b1bc42f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/3d7d82c3b1bc42f7","status":"passed","time":{"start":1700528785136,"stop":1700528795494,"duration":10358}},{"uid":"730847db176f4ac8","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/730847db176f4ac8","status":"passed","time":{"start":1700442215478,"stop":1700442224739,"duration":9261}},{"uid":"b1966fd11942e55c","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/b1966fd11942e55c","status":"passed","time":{"start":1700355916535,"stop":1700355925724,"duration":9189}},{"uid":"c9b7b54c6e9464ef","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/c9b7b54c6e9464ef","status":"passed","time":{"start":1700269237171,"stop":1700269246134,"duration":8963}},{"uid":"283ef999610cbf7","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/283ef999610cbf7","status":"passed","time":{"start":1700183101928,"stop":1700183111661,"duration":9733}},{"uid":"239813a21430e918","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/239813a21430e918","status":"passed","time":{"start":1700096607250,"stop":1700096616522,"duration":9272}},{"uid":"bfca819cb36fbbd3","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/bfca819cb36fbbd3","status":"passed","time":{"start":1700010274475,"stop":1700010284322,"duration":9847}},{"uid":"171e41e60b01ddb7","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/171e41e60b01ddb7","status":"passed","time":{"start":1699923555059,"stop":1699923563977,"duration":8918}},{"uid":"7fdbd6021b861adc","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/7fdbd6021b861adc","status":"passed","time":{"start":1699837332820,"stop":1699837342129,"duration":9309}},{"uid":"d7c01e780c6384cf","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/d7c01e780c6384cf","status":"passed","time":{"start":1699751057639,"stop":1699751067576,"duration":9937}},{"uid":"3f5e87c7cc580d6d","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/3f5e87c7cc580d6d","status":"passed","time":{"start":1699664515635,"stop":1699664525484,"duration":9849}},{"uid":"8280651ba2932b44","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/8280651ba2932b44","status":"passed","time":{"start":1699577991466,"stop":1699578000535,"duration":9069}},{"uid":"f2e4d817bbb3b171","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/f2e4d817bbb3b171","status":"passed","time":{"start":1699491549349,"stop":1699491558570,"duration":9221}},{"uid":"263a9cac119c3e13","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/263a9cac119c3e13","status":"passed","time":{"start":1699405308152,"stop":1699405318366,"duration":10214}},{"uid":"1590ee874b580c65","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/1590ee874b580c65","status":"passed","time":{"start":1699318898789,"stop":1699318907830,"duration":9041}},{"uid":"40b5588b93f7b92d","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/40b5588b93f7b92d","status":"passed","time":{"start":1699232599374,"stop":1699232609396,"duration":10022}},{"uid":"26bfacd80e43c542","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/26bfacd80e43c542","status":"passed","time":{"start":1699146445030,"stop":1699146454718,"duration":9688}},{"uid":"104b1bc167191fa9","reportUrl":"https://Nat754.github.io/StroyremAutomation/115//#testresult/104b1bc167191fa9","status":"passed","time":{"start":1699059633180,"stop":1699059642376,"duration":9196}},{"uid":"aeefb8d281008a20","reportUrl":"https://Nat754.github.io/StroyremAutomation/114//#testresult/aeefb8d281008a20","status":"passed","time":{"start":1698973217636,"stop":1698973226365,"duration":8729}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"c797b25c248a9768.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shtukaturno-otdelochnyj-instrument'"]}