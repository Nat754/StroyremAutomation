{"uid":"620589b5fe104a11","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"60ac608ef0b195b1f9aff92ab9d21fa8","time":{"start":1717636207296,"stop":1717636209613,"duration":2317},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x5576371c2e3a <unknown>\n#1 0x557636eac45c <unknown>\n#2 0x557636eff336 <unknown>\n#3 0x557636efd176 <unknown>\n#4 0x557636efab57 <unknown>\n#5 0x557636ef997c <unknown>\n#6 0x557636eed0ff <unknown>\n#7 0x557636f1b4b2 <unknown>\n#8 0x557636eeca79 <unknown>\n#9 0x557636f1b67e <unknown>\n#10 0x557636f3a2cc <unknown>\n#11 0x557636f1b253 <unknown>\n#12 0x557636eeb1c7 <unknown>\n#13 0x557636eebb3e <unknown>\n#14 0x55763718927b <unknown>\n#15 0x55763718d327 <unknown>\n#16 0x557637175dae <unknown>\n#17 0x55763718ddf2 <unknown>\n#18 0x55763715a74f <unknown>\n#19 0x5576371b2128 <unknown>\n#20 0x5576371b22fb <unknown>\n#21 0x5576371c1f6c <unknown>\n#22 0x7fc4d26b1134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f66d6c256d0>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f66d5ee4090>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f66d587c350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5576371b22fb \\\\u003Cunknown>\\\\n#21 0x5576371c1f6c \\\\u003Cunknown>\\\\n#22 0x7fc4d26b1134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x5576371c2e3a <unknown>\nE       #1 0x557636eac45c <unknown>\nE       #2 0x557636eff336 <unknown>\nE       #3 0x557636efd176 <unknown>\nE       #4 0x557636efab57 <unknown>\nE       #5 0x557636ef997c <unknown>\nE       #6 0x557636eed0ff <unknown>\nE       #7 0x557636f1b4b2 <unknown>\nE       #8 0x557636eeca79 <unknown>\nE       #9 0x557636f1b67e <unknown>\nE       #10 0x557636f3a2cc <unknown>\nE       #11 0x557636f1b253 <unknown>\nE       #12 0x557636eeb1c7 <unknown>\nE       #13 0x557636eebb3e <unknown>\nE       #14 0x55763718927b <unknown>\nE       #15 0x55763718d327 <unknown>\nE       #16 0x557637175dae <unknown>\nE       #17 0x55763718ddf2 <unknown>\nE       #18 0x55763715a74f <unknown>\nE       #19 0x5576371b2128 <unknown>\nE       #20 0x5576371b22fb <unknown>\nE       #21 0x5576371c1f6c <unknown>\nE       #22 0x7fc4d26b1134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1717635206886,"stop":1717635206956,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1717635206956,"stop":1717635206957,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1717636193876,"stop":1717636194567,"duration":691},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1717636194567,"stop":1717636194567,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1717636194567,"stop":1717636207296,"duration":12729},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x5576371c2e3a <unknown>\n#1 0x557636eac45c <unknown>\n#2 0x557636eff336 <unknown>\n#3 0x557636efd176 <unknown>\n#4 0x557636efab57 <unknown>\n#5 0x557636ef997c <unknown>\n#6 0x557636eed0ff <unknown>\n#7 0x557636f1b4b2 <unknown>\n#8 0x557636eeca79 <unknown>\n#9 0x557636f1b67e <unknown>\n#10 0x557636f3a2cc <unknown>\n#11 0x557636f1b253 <unknown>\n#12 0x557636eeb1c7 <unknown>\n#13 0x557636eebb3e <unknown>\n#14 0x55763718927b <unknown>\n#15 0x55763718d327 <unknown>\n#16 0x557637175dae <unknown>\n#17 0x55763718ddf2 <unknown>\n#18 0x55763715a74f <unknown>\n#19 0x5576371b2128 <unknown>\n#20 0x5576371b22fb <unknown>\n#21 0x5576371c1f6c <unknown>\n#22 0x7fc4d26b1134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f66d6c256d0>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f66d5ee4090>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f66d587c350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5576371b22fb \\\\u003Cunknown>\\\\n#21 0x5576371c1f6c \\\\u003Cunknown>\\\\n#22 0x7fc4d26b1134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x5576371c2e3a <unknown>\nE       #1 0x557636eac45c <unknown>\nE       #2 0x557636eff336 <unknown>\nE       #3 0x557636efd176 <unknown>\nE       #4 0x557636efab57 <unknown>\nE       #5 0x557636ef997c <unknown>\nE       #6 0x557636eed0ff <unknown>\nE       #7 0x557636f1b4b2 <unknown>\nE       #8 0x557636eeca79 <unknown>\nE       #9 0x557636f1b67e <unknown>\nE       #10 0x557636f3a2cc <unknown>\nE       #11 0x557636f1b253 <unknown>\nE       #12 0x557636eeb1c7 <unknown>\nE       #13 0x557636eebb3e <unknown>\nE       #14 0x55763718927b <unknown>\nE       #15 0x55763718d327 <unknown>\nE       #16 0x557637175dae <unknown>\nE       #17 0x55763718ddf2 <unknown>\nE       #18 0x55763715a74f <unknown>\nE       #19 0x5576371b2128 <unknown>\nE       #20 0x5576371b22fb <unknown>\nE       #21 0x5576371c1f6c <unknown>\nE       #22 0x7fc4d26b1134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1717636207297,"stop":1717636207335,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1717636207399,"stop":1717636207437,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1717636208474,"stop":1717636208517,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"13254990f9cb4e5a","name":"Screenshot","source":"13254990f9cb4e5a.png","type":"image/png","size":156006},{"uid":"37bab2eada34e622","name":"HTML source","source":"37bab2eada34e622.html","type":"text/html","size":942141}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1717636209804,"stop":1717636209804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1717636209804,"stop":1717636209888,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"0c1aa8331f2d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"e084e1e948c3dc3a","reportUrl":"https://Nat754.github.io/StroyremAutomation/329//#testresult/e084e1e948c3dc3a","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x558d6f20ce3a <unknown>\n#1 0x558d6eef645c <unknown>\n#2 0x558d6ef49336 <unknown>\n#3 0x558d6ef47176 <unknown>\n#4 0x558d6ef44b57 <unknown>\n#5 0x558d6ef4397c <unknown>\n#6 0x558d6ef370ff <unknown>\n#7 0x558d6ef654b2 <unknown>\n#8 0x558d6ef36a79 <unknown>\n#9 0x558d6ef6567e <unknown>\n#10 0x558d6ef842cc <unknown>\n#11 0x558d6ef65253 <unknown>\n#12 0x558d6ef351c7 <unknown>\n#13 0x558d6ef35b3e <unknown>\n#14 0x558d6f1d327b <unknown>\n#15 0x558d6f1d7327 <unknown>\n#16 0x558d6f1bfdae <unknown>\n#17 0x558d6f1d7df2 <unknown>\n#18 0x558d6f1a474f <unknown>\n#19 0x558d6f1fc128 <unknown>\n#20 0x558d6f1fc2fb <unknown>\n#21 0x558d6f20bf6c <unknown>\n#22 0x7f5392495134 <unknown>","time":{"start":1717550007729,"stop":1717550010024,"duration":2295}},{"uid":"c628661666b25449","reportUrl":"https://Nat754.github.io/StroyremAutomation/328//#testresult/c628661666b25449","status":"passed","time":{"start":1717463390967,"stop":1717463400968,"duration":10001}},{"uid":"8ffc6591f4f03fd1","reportUrl":"https://Nat754.github.io/StroyremAutomation/327//#testresult/8ffc6591f4f03fd1","status":"passed","time":{"start":1717377224921,"stop":1717377234127,"duration":9206}},{"uid":"96bbbc8cb8438554","reportUrl":"https://Nat754.github.io/StroyremAutomation/326//#testresult/96bbbc8cb8438554","status":"passed","time":{"start":1717290953594,"stop":1717290962917,"duration":9323}},{"uid":"a18fe0ba9d5313d6","reportUrl":"https://Nat754.github.io/StroyremAutomation/325//#testresult/a18fe0ba9d5313d6","status":"passed","time":{"start":1717204295816,"stop":1717204306084,"duration":10268}},{"uid":"74856d55ac19e1f4","reportUrl":"https://Nat754.github.io/StroyremAutomation/324//#testresult/74856d55ac19e1f4","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x56001bfd9e3a <unknown>\n#1 0x56001bcc345c <unknown>\n#2 0x56001bd16336 <unknown>\n#3 0x56001bd14176 <unknown>\n#4 0x56001bd11b57 <unknown>\n#5 0x56001bd1097c <unknown>\n#6 0x56001bd040ff <unknown>\n#7 0x56001bd324b2 <unknown>\n#8 0x56001bd03a79 <unknown>\n#9 0x56001bd3267e <unknown>\n#10 0x56001bd512cc <unknown>\n#11 0x56001bd32253 <unknown>\n#12 0x56001bd021c7 <unknown>\n#13 0x56001bd02b3e <unknown>\n#14 0x56001bfa027b <unknown>\n#15 0x56001bfa4327 <unknown>\n#16 0x56001bf8cdae <unknown>\n#17 0x56001bfa4df2 <unknown>\n#18 0x56001bf7174f <unknown>\n#19 0x56001bfc9128 <unknown>\n#20 0x56001bfc92fb <unknown>\n#21 0x56001bfd8f6c <unknown>\n#22 0x7f0338c48134 <unknown>","time":{"start":1717117986458,"stop":1717117988727,"duration":2269}},{"uid":"4a96147eafabe352","reportUrl":"https://Nat754.github.io/StroyremAutomation/323//#testresult/4a96147eafabe352","status":"passed","time":{"start":1717031312038,"stop":1717031321595,"duration":9557}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"620589b5fe104a11.json","parameterValues":["'https://stroyrem-nn.ru/catalog/elektroinstrument'"]}