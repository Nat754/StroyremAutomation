{"uid":"dfbc054a0570552d","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"60ac608ef0b195b1f9aff92ab9d21fa8","time":{"start":1705281019172,"stop":1705281021439,"duration":2267},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55f12ad7df83 <unknown>\n#1 0x55f12aa36cf7 <unknown>\n#2 0x55f12aa8ed92 <unknown>\n#3 0x55f12aa8c7f4 <unknown>\n#4 0x55f12aa89894 <unknown>\n#5 0x55f12aa884b9 <unknown>\n#6 0x55f12aa7a313 <unknown>\n#7 0x55f12aab00b2 <unknown>\n#8 0x55f12aa79b49 <unknown>\n#9 0x55f12aab04ce <unknown>\n#10 0x55f12aacf006 <unknown>\n#11 0x55f12aaafe53 <unknown>\n#12 0x55f12aa77dd4 <unknown>\n#13 0x55f12aa791de <unknown>\n#14 0x55f12ad42531 <unknown>\n#15 0x55f12ad46455 <unknown>\n#16 0x55f12ad2ef55 <unknown>\n#17 0x55f12ad470ef <unknown>\n#18 0x55f12ad1299f <unknown>\n#19 0x55f12ad6b008 <unknown>\n#20 0x55f12ad6b1d7 <unknown>\n#21 0x55f12ad7d124 <unknown>\n#22 0x7fa95231a044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f694682d390>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946e63610>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946e78350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f12ad6b1d7 \\\\u003Cunknown>\\\\n#21 0x55f12ad7d124 \\\\u003Cunknown>\\\\n#22 0x7fa95231a044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55f12ad7df83 <unknown>\nE       #1 0x55f12aa36cf7 <unknown>\nE       #2 0x55f12aa8ed92 <unknown>\nE       #3 0x55f12aa8c7f4 <unknown>\nE       #4 0x55f12aa89894 <unknown>\nE       #5 0x55f12aa884b9 <unknown>\nE       #6 0x55f12aa7a313 <unknown>\nE       #7 0x55f12aab00b2 <unknown>\nE       #8 0x55f12aa79b49 <unknown>\nE       #9 0x55f12aab04ce <unknown>\nE       #10 0x55f12aacf006 <unknown>\nE       #11 0x55f12aaafe53 <unknown>\nE       #12 0x55f12aa77dd4 <unknown>\nE       #13 0x55f12aa791de <unknown>\nE       #14 0x55f12ad42531 <unknown>\nE       #15 0x55f12ad46455 <unknown>\nE       #16 0x55f12ad2ef55 <unknown>\nE       #17 0x55f12ad470ef <unknown>\nE       #18 0x55f12ad1299f <unknown>\nE       #19 0x55f12ad6b008 <unknown>\nE       #20 0x55f12ad6b1d7 <unknown>\nE       #21 0x55f12ad7d124 <unknown>\nE       #22 0x7fa95231a044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705280052701,"stop":1705280052768,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705280052768,"stop":1705280052768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705281004644,"stop":1705281005421,"duration":777},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705281005421,"stop":1705281019171,"duration":13750},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705281005421,"stop":1705281005421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55f12ad7df83 <unknown>\n#1 0x55f12aa36cf7 <unknown>\n#2 0x55f12aa8ed92 <unknown>\n#3 0x55f12aa8c7f4 <unknown>\n#4 0x55f12aa89894 <unknown>\n#5 0x55f12aa884b9 <unknown>\n#6 0x55f12aa7a313 <unknown>\n#7 0x55f12aab00b2 <unknown>\n#8 0x55f12aa79b49 <unknown>\n#9 0x55f12aab04ce <unknown>\n#10 0x55f12aacf006 <unknown>\n#11 0x55f12aaafe53 <unknown>\n#12 0x55f12aa77dd4 <unknown>\n#13 0x55f12aa791de <unknown>\n#14 0x55f12ad42531 <unknown>\n#15 0x55f12ad46455 <unknown>\n#16 0x55f12ad2ef55 <unknown>\n#17 0x55f12ad470ef <unknown>\n#18 0x55f12ad1299f <unknown>\n#19 0x55f12ad6b008 <unknown>\n#20 0x55f12ad6b1d7 <unknown>\n#21 0x55f12ad7d124 <unknown>\n#22 0x7fa95231a044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f694682d390>\nlink = 'https://stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946e63610>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946e78350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f12ad6b1d7 \\\\u003Cunknown>\\\\n#21 0x55f12ad7d124 \\\\u003Cunknown>\\\\n#22 0x7fa95231a044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55f12ad7df83 <unknown>\nE       #1 0x55f12aa36cf7 <unknown>\nE       #2 0x55f12aa8ed92 <unknown>\nE       #3 0x55f12aa8c7f4 <unknown>\nE       #4 0x55f12aa89894 <unknown>\nE       #5 0x55f12aa884b9 <unknown>\nE       #6 0x55f12aa7a313 <unknown>\nE       #7 0x55f12aab00b2 <unknown>\nE       #8 0x55f12aa79b49 <unknown>\nE       #9 0x55f12aab04ce <unknown>\nE       #10 0x55f12aacf006 <unknown>\nE       #11 0x55f12aaafe53 <unknown>\nE       #12 0x55f12aa77dd4 <unknown>\nE       #13 0x55f12aa791de <unknown>\nE       #14 0x55f12ad42531 <unknown>\nE       #15 0x55f12ad46455 <unknown>\nE       #16 0x55f12ad2ef55 <unknown>\nE       #17 0x55f12ad470ef <unknown>\nE       #18 0x55f12ad1299f <unknown>\nE       #19 0x55f12ad6b008 <unknown>\nE       #20 0x55f12ad6b1d7 <unknown>\nE       #21 0x55f12ad7d124 <unknown>\nE       #22 0x7fa95231a044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1705281019172,"stop":1705281019203,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1705281019265,"stop":1705281019297,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705281020335,"stop":1705281020377,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"9907a1f285ec9ad","name":"Screenshot","source":"9907a1f285ec9ad.png","type":"image/png","size":195792},{"uid":"99959270e0cfa1f6","name":"HTML source","source":"99959270e0cfa1f6.html","type":"text/html","size":924715}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1705281021712,"stop":1705281021789,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1705281021712,"stop":1705281021712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"85a0874d609d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":158,"unknown":0,"total":162},"items":[{"uid":"cc8841ebfb3a84fb","reportUrl":"https://Nat754.github.io/StroyremAutomation/186//#testresult/cc8841ebfb3a84fb","status":"passed","time":{"start":1705194846773,"stop":1705194856077,"duration":9304}},{"uid":"ab9a88733643826b","reportUrl":"https://Nat754.github.io/StroyremAutomation/185//#testresult/ab9a88733643826b","status":"passed","time":{"start":1705108106791,"stop":1705108117009,"duration":10218}},{"uid":"824a69f67fe79e9a","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/824a69f67fe79e9a","status":"passed","time":{"start":1705021634087,"stop":1705021642868,"duration":8781}},{"uid":"186a3c721fd41593","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/186a3c721fd41593","status":"passed","time":{"start":1704935356828,"stop":1704935365644,"duration":8816}},{"uid":"2571d70b6ad3843c","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/2571d70b6ad3843c","status":"passed","time":{"start":1704848967219,"stop":1704848975986,"duration":8767}},{"uid":"aec1d863c5d9ed4","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/aec1d863c5d9ed4","status":"passed","time":{"start":1704762337466,"stop":1704762345699,"duration":8233}},{"uid":"49902cc7088eb03b","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/49902cc7088eb03b","status":"passed","time":{"start":1704675973704,"stop":1704675982238,"duration":8534}},{"uid":"6445a1996127bf36","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/6445a1996127bf36","status":"passed","time":{"start":1704589957613,"stop":1704589966526,"duration":8913}},{"uid":"61b5c1d8bc452c43","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/61b5c1d8bc452c43","status":"passed","time":{"start":1704503213040,"stop":1704503222199,"duration":9159}},{"uid":"fbb67aaef5ad9a88","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/fbb67aaef5ad9a88","status":"passed","time":{"start":1704416696755,"stop":1704416704901,"duration":8146}},{"uid":"82350ad0e75e835","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/82350ad0e75e835","status":"passed","time":{"start":1704330298287,"stop":1704330307020,"duration":8733}},{"uid":"12577d4e775d1ea6","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/12577d4e775d1ea6","status":"passed","time":{"start":1704243954446,"stop":1704243963353,"duration":8907}},{"uid":"cc850349b789081e","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/cc850349b789081e","status":"passed","time":{"start":1704157376510,"stop":1704157384960,"duration":8450}},{"uid":"f625027f5df283f4","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/f625027f5df283f4","status":"passed","time":{"start":1704071329591,"stop":1704071337933,"duration":8342}},{"uid":"2136f37c04fd8ac5","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/2136f37c04fd8ac5","status":"passed","time":{"start":1703984852329,"stop":1703984860099,"duration":7770}},{"uid":"bba2467561be8147","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/bba2467561be8147","status":"passed","time":{"start":1703898125703,"stop":1703898134221,"duration":8518}},{"uid":"724f9e39d5181904","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/724f9e39d5181904","status":"passed","time":{"start":1703811478429,"stop":1703811487646,"duration":9217}},{"uid":"a38e89595f771aa9","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/a38e89595f771aa9","status":"passed","time":{"start":1703725370239,"stop":1703725378587,"duration":8348}},{"uid":"b6958e04bac3271c","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/b6958e04bac3271c","status":"passed","time":{"start":1703639185313,"stop":1703639194084,"duration":8771}},{"uid":"73ad4d8c028270bb","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/73ad4d8c028270bb","status":"passed","time":{"start":1703552522653,"stop":1703552531220,"duration":8567}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"dfbc054a0570552d.json","parameterValues":["'https://stroyrem-nn.ru/catalog/elektroinstrument'"]}