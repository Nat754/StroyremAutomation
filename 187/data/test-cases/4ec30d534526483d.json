{"uid":"4ec30d534526483d","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"56dc95032881057b0b8ffab5dc914f14","time":{"start":1705281061794,"stop":1705281064010,"duration":2216},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x56094509cf83 <unknown>\n#1 0x560944d55cf7 <unknown>\n#2 0x560944dadd92 <unknown>\n#3 0x560944dab7f4 <unknown>\n#4 0x560944da8894 <unknown>\n#5 0x560944da74b9 <unknown>\n#6 0x560944d99313 <unknown>\n#7 0x560944dcf0b2 <unknown>\n#8 0x560944d98b49 <unknown>\n#9 0x560944dcf4ce <unknown>\n#10 0x560944dee006 <unknown>\n#11 0x560944dcee53 <unknown>\n#12 0x560944d96dd4 <unknown>\n#13 0x560944d981de <unknown>\n#14 0x560945061531 <unknown>\n#15 0x560945065455 <unknown>\n#16 0x56094504df55 <unknown>\n#17 0x5609450660ef <unknown>\n#18 0x56094503199f <unknown>\n#19 0x56094508a008 <unknown>\n#20 0x56094508a1d7 <unknown>\n#21 0x56094509c124 <unknown>\n#22 0x7f2cc9e45044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aebed0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f69468aa650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946766c90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56094508a1d7 \\\\u003Cunknown>\\\\n#21 0x56094509c124 \\\\u003Cunknown>\\\\n#22 0x7f2cc9e45044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x56094509cf83 <unknown>\nE       #1 0x560944d55cf7 <unknown>\nE       #2 0x560944dadd92 <unknown>\nE       #3 0x560944dab7f4 <unknown>\nE       #4 0x560944da8894 <unknown>\nE       #5 0x560944da74b9 <unknown>\nE       #6 0x560944d99313 <unknown>\nE       #7 0x560944dcf0b2 <unknown>\nE       #8 0x560944d98b49 <unknown>\nE       #9 0x560944dcf4ce <unknown>\nE       #10 0x560944dee006 <unknown>\nE       #11 0x560944dcee53 <unknown>\nE       #12 0x560944d96dd4 <unknown>\nE       #13 0x560944d981de <unknown>\nE       #14 0x560945061531 <unknown>\nE       #15 0x560945065455 <unknown>\nE       #16 0x56094504df55 <unknown>\nE       #17 0x5609450660ef <unknown>\nE       #18 0x56094503199f <unknown>\nE       #19 0x56094508a008 <unknown>\nE       #20 0x56094508a1d7 <unknown>\nE       #21 0x56094509c124 <unknown>\nE       #22 0x7f2cc9e45044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705280052701,"stop":1705280052768,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705280052768,"stop":1705280052768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705281051055,"stop":1705281051835,"duration":780},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705281051835,"stop":1705281061794,"duration":9959},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705281051835,"stop":1705281051835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x56094509cf83 <unknown>\n#1 0x560944d55cf7 <unknown>\n#2 0x560944dadd92 <unknown>\n#3 0x560944dab7f4 <unknown>\n#4 0x560944da8894 <unknown>\n#5 0x560944da74b9 <unknown>\n#6 0x560944d99313 <unknown>\n#7 0x560944dcf0b2 <unknown>\n#8 0x560944d98b49 <unknown>\n#9 0x560944dcf4ce <unknown>\n#10 0x560944dee006 <unknown>\n#11 0x560944dcee53 <unknown>\n#12 0x560944d96dd4 <unknown>\n#13 0x560944d981de <unknown>\n#14 0x560945061531 <unknown>\n#15 0x560945065455 <unknown>\n#16 0x56094504df55 <unknown>\n#17 0x5609450660ef <unknown>\n#18 0x56094503199f <unknown>\n#19 0x56094508a008 <unknown>\n#20 0x56094508a1d7 <unknown>\n#21 0x56094509c124 <unknown>\n#22 0x7f2cc9e45044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aebed0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f69468aa650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946766c90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x56094508a1d7 \\\\u003Cunknown>\\\\n#21 0x56094509c124 \\\\u003Cunknown>\\\\n#22 0x7f2cc9e45044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x56094509cf83 <unknown>\nE       #1 0x560944d55cf7 <unknown>\nE       #2 0x560944dadd92 <unknown>\nE       #3 0x560944dab7f4 <unknown>\nE       #4 0x560944da8894 <unknown>\nE       #5 0x560944da74b9 <unknown>\nE       #6 0x560944d99313 <unknown>\nE       #7 0x560944dcf0b2 <unknown>\nE       #8 0x560944d98b49 <unknown>\nE       #9 0x560944dcf4ce <unknown>\nE       #10 0x560944dee006 <unknown>\nE       #11 0x560944dcee53 <unknown>\nE       #12 0x560944d96dd4 <unknown>\nE       #13 0x560944d981de <unknown>\nE       #14 0x560945061531 <unknown>\nE       #15 0x560945065455 <unknown>\nE       #16 0x56094504df55 <unknown>\nE       #17 0x5609450660ef <unknown>\nE       #18 0x56094503199f <unknown>\nE       #19 0x56094508a008 <unknown>\nE       #20 0x56094508a1d7 <unknown>\nE       #21 0x56094509c124 <unknown>\nE       #22 0x7f2cc9e45044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705281061794,"stop":1705281061846,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1705281062909,"stop":1705281062951,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"5f82b0fe719e7cc1","name":"Screenshot","source":"5f82b0fe719e7cc1.png","type":"image/png","size":210452},{"uid":"30ea5bb674c5ee92","name":"HTML source","source":"30ea5bb674c5ee92.html","type":"text/html","size":836661}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1705281064211,"stop":1705281064211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1705281064212,"stop":1705281064284,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"85a0874d609d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":152,"unknown":0,"total":155},"items":[{"uid":"2a8410789772f9c9","reportUrl":"https://Nat754.github.io/StroyremAutomation/186//#testresult/2a8410789772f9c9","status":"passed","time":{"start":1705194899508,"stop":1705194912155,"duration":12647}},{"uid":"66bbaef276d98df1","reportUrl":"https://Nat754.github.io/StroyremAutomation/185//#testresult/66bbaef276d98df1","status":"passed","time":{"start":1705108156883,"stop":1705108168960,"duration":12077}},{"uid":"780ac33fe7803644","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/780ac33fe7803644","status":"passed","time":{"start":1705021675720,"stop":1705021687290,"duration":11570}},{"uid":"c05ce5405d372a7d","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/c05ce5405d372a7d","status":"passed","time":{"start":1704935404466,"stop":1704935417210,"duration":12744}},{"uid":"97e80fe00d3a2ece","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/97e80fe00d3a2ece","status":"passed","time":{"start":1704849014801,"stop":1704849027038,"duration":12237}},{"uid":"d78b2100c4a486b9","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/d78b2100c4a486b9","status":"passed","time":{"start":1704762375245,"stop":1704762386636,"duration":11391}},{"uid":"63134b19e1c43389","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/63134b19e1c43389","status":"passed","time":{"start":1704676012255,"stop":1704676023373,"duration":11118}},{"uid":"b6fb128c381779fb","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/b6fb128c381779fb","status":"passed","time":{"start":1704590005907,"stop":1704590018859,"duration":12952}},{"uid":"1a48006b9d4074cb","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/1a48006b9d4074cb","status":"passed","time":{"start":1704503261114,"stop":1704503273460,"duration":12346}},{"uid":"c0170b51a1506f12","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/c0170b51a1506f12","status":"passed","time":{"start":1704416735425,"stop":1704416746760,"duration":11335}},{"uid":"494add0781587646","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/494add0781587646","status":"passed","time":{"start":1704330336696,"stop":1704330348305,"duration":11609}},{"uid":"6307a0bad0267d1b","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/6307a0bad0267d1b","status":"passed","time":{"start":1704243996885,"stop":1704244008692,"duration":11807}},{"uid":"82b465b97ab3456c","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/82b465b97ab3456c","status":"passed","time":{"start":1704157414579,"stop":1704157426429,"duration":11850}},{"uid":"8a267c5e3748f32c","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/8a267c5e3748f32c","status":"passed","time":{"start":1704071366731,"stop":1704071378293,"duration":11562}},{"uid":"222c17a7a29ed166","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/222c17a7a29ed166","status":"passed","time":{"start":1703984890680,"stop":1703984901738,"duration":11058}},{"uid":"cf4e2432049be7f5","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/cf4e2432049be7f5","status":"passed","time":{"start":1703898164902,"stop":1703898176363,"duration":11461}},{"uid":"4096a69758fb5059","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/4096a69758fb5059","status":"passed","time":{"start":1703811529312,"stop":1703811541198,"duration":11886}},{"uid":"ed08b8aa4b479122","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/ed08b8aa4b479122","status":"passed","time":{"start":1703725408952,"stop":1703725420344,"duration":11392}},{"uid":"1ce0fdaead7bddd7","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/1ce0fdaead7bddd7","status":"passed","time":{"start":1703639234813,"stop":1703639247276,"duration":12463}},{"uid":"a0493e4a2c286298","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/a0493e4a2c286298","status":"passed","time":{"start":1703552560559,"stop":1703552571614,"duration":11055}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"4ec30d534526483d.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}