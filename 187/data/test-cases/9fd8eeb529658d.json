{"uid":"9fd8eeb529658d","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"dad3617134a119815037f972e0359b9c","time":{"start":1705281081906,"stop":1705281084107,"duration":2201},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5595f4f2ef83 <unknown>\n#1 0x5595f4be7cf7 <unknown>\n#2 0x5595f4c3fd92 <unknown>\n#3 0x5595f4c3d7f4 <unknown>\n#4 0x5595f4c3a894 <unknown>\n#5 0x5595f4c394b9 <unknown>\n#6 0x5595f4c2b313 <unknown>\n#7 0x5595f4c610b2 <unknown>\n#8 0x5595f4c2ab49 <unknown>\n#9 0x5595f4c614ce <unknown>\n#10 0x5595f4c80006 <unknown>\n#11 0x5595f4c60e53 <unknown>\n#12 0x5595f4c28dd4 <unknown>\n#13 0x5595f4c2a1de <unknown>\n#14 0x5595f4ef3531 <unknown>\n#15 0x5595f4ef7455 <unknown>\n#16 0x5595f4edff55 <unknown>\n#17 0x5595f4ef80ef <unknown>\n#18 0x5595f4ec399f <unknown>\n#19 0x5595f4f1c008 <unknown>\n#20 0x5595f4f1c1d7 <unknown>\n#21 0x5595f4f2e124 <unknown>\n#22 0x7f9b2cdea044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aeb190>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f69467f1650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f69467f3250>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5595f4f1c1d7 \\\\u003Cunknown>\\\\n#21 0x5595f4f2e124 \\\\u003Cunknown>\\\\n#22 0x7f9b2cdea044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5595f4f2ef83 <unknown>\nE       #1 0x5595f4be7cf7 <unknown>\nE       #2 0x5595f4c3fd92 <unknown>\nE       #3 0x5595f4c3d7f4 <unknown>\nE       #4 0x5595f4c3a894 <unknown>\nE       #5 0x5595f4c394b9 <unknown>\nE       #6 0x5595f4c2b313 <unknown>\nE       #7 0x5595f4c610b2 <unknown>\nE       #8 0x5595f4c2ab49 <unknown>\nE       #9 0x5595f4c614ce <unknown>\nE       #10 0x5595f4c80006 <unknown>\nE       #11 0x5595f4c60e53 <unknown>\nE       #12 0x5595f4c28dd4 <unknown>\nE       #13 0x5595f4c2a1de <unknown>\nE       #14 0x5595f4ef3531 <unknown>\nE       #15 0x5595f4ef7455 <unknown>\nE       #16 0x5595f4edff55 <unknown>\nE       #17 0x5595f4ef80ef <unknown>\nE       #18 0x5595f4ec399f <unknown>\nE       #19 0x5595f4f1c008 <unknown>\nE       #20 0x5595f4f1c1d7 <unknown>\nE       #21 0x5595f4f2e124 <unknown>\nE       #22 0x7f9b2cdea044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705280052701,"stop":1705280052768,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705280052768,"stop":1705280052768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705281064285,"stop":1705281065058,"duration":773},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705281065058,"stop":1705281081905,"duration":16847},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705281065058,"stop":1705281065058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5595f4f2ef83 <unknown>\n#1 0x5595f4be7cf7 <unknown>\n#2 0x5595f4c3fd92 <unknown>\n#3 0x5595f4c3d7f4 <unknown>\n#4 0x5595f4c3a894 <unknown>\n#5 0x5595f4c394b9 <unknown>\n#6 0x5595f4c2b313 <unknown>\n#7 0x5595f4c610b2 <unknown>\n#8 0x5595f4c2ab49 <unknown>\n#9 0x5595f4c614ce <unknown>\n#10 0x5595f4c80006 <unknown>\n#11 0x5595f4c60e53 <unknown>\n#12 0x5595f4c28dd4 <unknown>\n#13 0x5595f4c2a1de <unknown>\n#14 0x5595f4ef3531 <unknown>\n#15 0x5595f4ef7455 <unknown>\n#16 0x5595f4edff55 <unknown>\n#17 0x5595f4ef80ef <unknown>\n#18 0x5595f4ec399f <unknown>\n#19 0x5595f4f1c008 <unknown>\n#20 0x5595f4f1c1d7 <unknown>\n#21 0x5595f4f2e124 <unknown>\n#22 0x7f9b2cdea044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aeb190>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f69467f1650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f69467f3250>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5595f4f1c1d7 \\\\u003Cunknown>\\\\n#21 0x5595f4f2e124 \\\\u003Cunknown>\\\\n#22 0x7f9b2cdea044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5595f4f2ef83 <unknown>\nE       #1 0x5595f4be7cf7 <unknown>\nE       #2 0x5595f4c3fd92 <unknown>\nE       #3 0x5595f4c3d7f4 <unknown>\nE       #4 0x5595f4c3a894 <unknown>\nE       #5 0x5595f4c394b9 <unknown>\nE       #6 0x5595f4c2b313 <unknown>\nE       #7 0x5595f4c610b2 <unknown>\nE       #8 0x5595f4c2ab49 <unknown>\nE       #9 0x5595f4c614ce <unknown>\nE       #10 0x5595f4c80006 <unknown>\nE       #11 0x5595f4c60e53 <unknown>\nE       #12 0x5595f4c28dd4 <unknown>\nE       #13 0x5595f4c2a1de <unknown>\nE       #14 0x5595f4ef3531 <unknown>\nE       #15 0x5595f4ef7455 <unknown>\nE       #16 0x5595f4edff55 <unknown>\nE       #17 0x5595f4ef80ef <unknown>\nE       #18 0x5595f4ec399f <unknown>\nE       #19 0x5595f4f1c008 <unknown>\nE       #20 0x5595f4f1c1d7 <unknown>\nE       #21 0x5595f4f2e124 <unknown>\nE       #22 0x7f9b2cdea044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705281081906,"stop":1705281081958,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1705281083003,"stop":1705281083044,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"527e2574b13fdb02","name":"Screenshot","source":"527e2574b13fdb02.png","type":"image/png","size":151866},{"uid":"be0df0f112428156","name":"HTML source","source":"be0df0f112428156.html","type":"text/html","size":810488}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1705281084303,"stop":1705281084303,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1705281084303,"stop":1705281084379,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"85a0874d609d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":142,"unknown":0,"total":155},"items":[{"uid":"1741046b0c532613","reportUrl":"https://Nat754.github.io/StroyremAutomation/186//#testresult/1741046b0c532613","status":"passed","time":{"start":1705194927900,"stop":1705194939552,"duration":11652}},{"uid":"85262eac4a8eb373","reportUrl":"https://Nat754.github.io/StroyremAutomation/185//#testresult/85262eac4a8eb373","status":"passed","time":{"start":1705108183743,"stop":1705108195847,"duration":12104}},{"uid":"f44e5ba68b9b8d9","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/f44e5ba68b9b8d9","status":"passed","time":{"start":1705021699634,"stop":1705021711461,"duration":11827}},{"uid":"9617612ac4576dc4","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/9617612ac4576dc4","status":"passed","time":{"start":1704935432339,"stop":1704935444252,"duration":11913}},{"uid":"2b6cc63d5f7347c1","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/2b6cc63d5f7347c1","status":"passed","time":{"start":1704849042515,"stop":1704849054560,"duration":12045}},{"uid":"f654d7f25b5f2e2f","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/f654d7f25b5f2e2f","status":"passed","time":{"start":1704762397064,"stop":1704762408292,"duration":11228}},{"uid":"50155cd97e544055","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/50155cd97e544055","status":"passed","time":{"start":1704676034257,"stop":1704676045333,"duration":11076}},{"uid":"fafbef71a47ac38e","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/fafbef71a47ac38e","status":"passed","time":{"start":1704590033598,"stop":1704590045943,"duration":12345}},{"uid":"f9456d12bd1a121a","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/f9456d12bd1a121a","status":"passed","time":{"start":1704503288120,"stop":1704503300147,"duration":12027}},{"uid":"5326df8badd2b309","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/5326df8badd2b309","status":"passed","time":{"start":1704416758097,"stop":1704416769415,"duration":11318}},{"uid":"6268eaf753ec312c","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/6268eaf753ec312c","status":"passed","time":{"start":1704330360205,"stop":1704330371559,"duration":11354}},{"uid":"1f61ee388389c2a9","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/1f61ee388389c2a9","status":"passed","time":{"start":1704244021707,"stop":1704244033611,"duration":11904}},{"uid":"7ad145a0c7fda005","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/7ad145a0c7fda005","status":"passed","time":{"start":1704157437466,"stop":1704157448315,"duration":10849}},{"uid":"b6731791540a017b","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/b6731791540a017b","status":"passed","time":{"start":1704071389405,"stop":1704071400545,"duration":11140}},{"uid":"ef90b5ca3e9787a","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/ef90b5ca3e9787a","status":"passed","time":{"start":1703984912574,"stop":1703984923226,"duration":10652}},{"uid":"898f36595f784d02","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/898f36595f784d02","status":"passed","time":{"start":1703898187328,"stop":1703898198614,"duration":11286}},{"uid":"141a515f578020a1","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/141a515f578020a1","status":"passed","time":{"start":1703811557707,"stop":1703811569800,"duration":12093}},{"uid":"a8bb3987d9869cba","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/a8bb3987d9869cba","status":"passed","time":{"start":1703725432634,"stop":1703725444069,"duration":11435}},{"uid":"d408ce7547816594","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/d408ce7547816594","status":"passed","time":{"start":1703639263985,"stop":1703639275789,"duration":11804}},{"uid":"665b8b3cdd2bbe34","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/665b8b3cdd2bbe34","status":"passed","time":{"start":1703552582584,"stop":1703552593696,"duration":11112}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"9fd8eeb529658d.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/action'"]}