{"uid":"ee29a61cee41cc96","name":"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","historyId":"20a229ea56dbfac299ce8155fae6537d","time":{"start":1705281263340,"stop":1705281265593,"duration":2253},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5631370bcf83 <unknown>\n#1 0x563136d75cf7 <unknown>\n#2 0x563136dcdd92 <unknown>\n#3 0x563136dcb7f4 <unknown>\n#4 0x563136dc8894 <unknown>\n#5 0x563136dc74b9 <unknown>\n#6 0x563136db9313 <unknown>\n#7 0x563136def0b2 <unknown>\n#8 0x563136db8b49 <unknown>\n#9 0x563136def4ce <unknown>\n#10 0x563136e0e006 <unknown>\n#11 0x563136deee53 <unknown>\n#12 0x563136db6dd4 <unknown>\n#13 0x563136db81de <unknown>\n#14 0x563137081531 <unknown>\n#15 0x563137085455 <unknown>\n#16 0x56313706df55 <unknown>\n#17 0x5631370860ef <unknown>\n#18 0x56313705199f <unknown>\n#19 0x5631370aa008 <unknown>\n#20 0x5631370aa1d7 <unknown>\n#21 0x5631370bc124 <unknown>\n#22 0x7f6b0b20d044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aaca50>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946c2f450>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946773110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5631370aa1d7 \\\\u003Cunknown>\\\\n#21 0x5631370bc124 \\\\u003Cunknown>\\\\n#22 0x7f6b0b20d044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5631370bcf83 <unknown>\nE       #1 0x563136d75cf7 <unknown>\nE       #2 0x563136dcdd92 <unknown>\nE       #3 0x563136dcb7f4 <unknown>\nE       #4 0x563136dc8894 <unknown>\nE       #5 0x563136dc74b9 <unknown>\nE       #6 0x563136db9313 <unknown>\nE       #7 0x563136def0b2 <unknown>\nE       #8 0x563136db8b49 <unknown>\nE       #9 0x563136def4ce <unknown>\nE       #10 0x563136e0e006 <unknown>\nE       #11 0x563136deee53 <unknown>\nE       #12 0x563136db6dd4 <unknown>\nE       #13 0x563136db81de <unknown>\nE       #14 0x563137081531 <unknown>\nE       #15 0x563137085455 <unknown>\nE       #16 0x56313706df55 <unknown>\nE       #17 0x5631370860ef <unknown>\nE       #18 0x56313705199f <unknown>\nE       #19 0x5631370aa008 <unknown>\nE       #20 0x5631370aa1d7 <unknown>\nE       #21 0x5631370bc124 <unknown>\nE       #22 0x7f6b0b20d044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705280052701,"stop":1705280052768,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705280052768,"stop":1705280052768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705281252464,"stop":1705281253238,"duration":774},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705281253239,"stop":1705281263339,"duration":10100},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705281253239,"stop":1705281253239,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5631370bcf83 <unknown>\n#1 0x563136d75cf7 <unknown>\n#2 0x563136dcdd92 <unknown>\n#3 0x563136dcb7f4 <unknown>\n#4 0x563136dc8894 <unknown>\n#5 0x563136dc74b9 <unknown>\n#6 0x563136db9313 <unknown>\n#7 0x563136def0b2 <unknown>\n#8 0x563136db8b49 <unknown>\n#9 0x563136def4ce <unknown>\n#10 0x563136e0e006 <unknown>\n#11 0x563136deee53 <unknown>\n#12 0x563136db6dd4 <unknown>\n#13 0x563136db81de <unknown>\n#14 0x563137081531 <unknown>\n#15 0x563137085455 <unknown>\n#16 0x56313706df55 <unknown>\n#17 0x5631370860ef <unknown>\n#18 0x56313705199f <unknown>\n#19 0x5631370aa008 <unknown>\n#20 0x5631370aa1d7 <unknown>\n#21 0x5631370bc124 <unknown>\n#22 0x7f6b0b20d044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f6947aaca50>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946c2f450>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946773110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5631370aa1d7 \\\\u003Cunknown>\\\\n#21 0x5631370bc124 \\\\u003Cunknown>\\\\n#22 0x7f6b0b20d044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5631370bcf83 <unknown>\nE       #1 0x563136d75cf7 <unknown>\nE       #2 0x563136dcdd92 <unknown>\nE       #3 0x563136dcb7f4 <unknown>\nE       #4 0x563136dc8894 <unknown>\nE       #5 0x563136dc74b9 <unknown>\nE       #6 0x563136db9313 <unknown>\nE       #7 0x563136def0b2 <unknown>\nE       #8 0x563136db8b49 <unknown>\nE       #9 0x563136def4ce <unknown>\nE       #10 0x563136e0e006 <unknown>\nE       #11 0x563136deee53 <unknown>\nE       #12 0x563136db6dd4 <unknown>\nE       #13 0x563136db81de <unknown>\nE       #14 0x563137081531 <unknown>\nE       #15 0x563137085455 <unknown>\nE       #16 0x56313706df55 <unknown>\nE       #17 0x5631370860ef <unknown>\nE       #18 0x56313705199f <unknown>\nE       #19 0x5631370aa008 <unknown>\nE       #20 0x5631370aa1d7 <unknown>\nE       #21 0x5631370bc124 <unknown>\nE       #22 0x7f6b0b20d044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1705281263340,"stop":1705281263369,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1705281263423,"stop":1705281263452,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705281264491,"stop":1705281264531,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"9dd2ff76d4f37927","name":"Screenshot","source":"9dd2ff76d4f37927.png","type":"image/png","size":143971},{"uid":"7654f33d8507d0ba","name":"HTML source","source":"7654f33d8507d0ba.html","type":"text/html","size":739297}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1705281265767,"stop":1705281265837,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1705281265767,"stop":1705281265767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"85a0874d609d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":2,"skipped":0,"passed":135,"unknown":0,"total":151},"items":[{"uid":"b54265a4d5952dbb","reportUrl":"https://Nat754.github.io/StroyremAutomation/186//#testresult/b54265a4d5952dbb","status":"passed","time":{"start":1705195130806,"stop":1705195142494,"duration":11688}},{"uid":"aad18fb9d941d363","reportUrl":"https://Nat754.github.io/StroyremAutomation/185//#testresult/aad18fb9d941d363","status":"passed","time":{"start":1705108384808,"stop":1705108399568,"duration":14760}},{"uid":"b33af9667f0f88f2","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/b33af9667f0f88f2","status":"passed","time":{"start":1705021871150,"stop":1705021882260,"duration":11110}},{"uid":"7746692bc4ae4ade","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/7746692bc4ae4ade","status":"passed","time":{"start":1704935628464,"stop":1704935641096,"duration":12632}},{"uid":"7ee823b1aa8402c4","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/7ee823b1aa8402c4","status":"passed","time":{"start":1704849238061,"stop":1704849249743,"duration":11682}},{"uid":"a5b65a6984baf9b1","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/a5b65a6984baf9b1","status":"passed","time":{"start":1704762554858,"stop":1704762565316,"duration":10458}},{"uid":"68ad9b592b5fb4b6","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/68ad9b592b5fb4b6","status":"passed","time":{"start":1704676196308,"stop":1704676207700,"duration":11392}},{"uid":"31e52269a574130e","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/31e52269a574130e","status":"passed","time":{"start":1704590226780,"stop":1704590238274,"duration":11494}},{"uid":"18133f21c063c914","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/18133f21c063c914","status":"passed","time":{"start":1704503482331,"stop":1704503494162,"duration":11831}},{"uid":"d00764f707f3cab3","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/d00764f707f3cab3","status":"passed","time":{"start":1704416919124,"stop":1704416929802,"duration":10678}},{"uid":"920126a406103364","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/920126a406103364","status":"passed","time":{"start":1704330524192,"stop":1704330534730,"duration":10538}},{"uid":"d9a1de13b9cf2cfa","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/d9a1de13b9cf2cfa","status":"passed","time":{"start":1704244198371,"stop":1704244209814,"duration":11443}},{"uid":"a68796340fb27748","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/a68796340fb27748","status":"passed","time":{"start":1704157599918,"stop":1704157610387,"duration":10469}},{"uid":"fa45a2577606e437","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/fa45a2577606e437","status":"passed","time":{"start":1704071551140,"stop":1704071561459,"duration":10319}},{"uid":"2f9bf95cbfc71996","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/2f9bf95cbfc71996","status":"passed","time":{"start":1703985073113,"stop":1703985083535,"duration":10422}},{"uid":"c22f76433bb584e","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/c22f76433bb584e","status":"passed","time":{"start":1703898350521,"stop":1703898361253,"duration":10732}},{"uid":"83468140361fefa3","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/83468140361fefa3","status":"passed","time":{"start":1703811764116,"stop":1703811775944,"duration":11828}},{"uid":"2f3933d82338621a","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/2f3933d82338621a","status":"passed","time":{"start":1703725595609,"stop":1703725606628,"duration":11019}},{"uid":"1ecbc26a7624b3f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/1ecbc26a7624b3f7","status":"passed","time":{"start":1703639467316,"stop":1703639478878,"duration":11562}},{"uid":"7d45723a7c1a99b7","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/7d45723a7c1a99b7","status":"failed","statusDetails":"AssertionError: ОР: Скидка за объем = 61.39, ФР: скидка = 61.4\nassert 61.4 == 61.39\n +  where 61.39 = round((4093.0 * 0.015), 2)","time":{"start":1703552744893,"stop":1703552755570,"duration":10677}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"ee29a61cee41cc96.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}