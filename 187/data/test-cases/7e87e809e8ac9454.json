{"uid":"7e87e809e8ac9454","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke","historyId":"f06b2cbff298092fba61eca6271d3112","time":{"start":1705280951359,"stop":1705280953636,"duration":2277},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x555a9c84df83 <unknown>\n#1 0x555a9c506cf7 <unknown>\n#2 0x555a9c55ed92 <unknown>\n#3 0x555a9c55c7f4 <unknown>\n#4 0x555a9c559894 <unknown>\n#5 0x555a9c5584b9 <unknown>\n#6 0x555a9c54a313 <unknown>\n#7 0x555a9c5800b2 <unknown>\n#8 0x555a9c549b49 <unknown>\n#9 0x555a9c5804ce <unknown>\n#10 0x555a9c59f006 <unknown>\n#11 0x555a9c57fe53 <unknown>\n#12 0x555a9c547dd4 <unknown>\n#13 0x555a9c5491de <unknown>\n#14 0x555a9c812531 <unknown>\n#15 0x555a9c816455 <unknown>\n#16 0x555a9c7fef55 <unknown>\n#17 0x555a9c8170ef <unknown>\n#18 0x555a9c7e299f <unknown>\n#19 0x555a9c83b008 <unknown>\n#20 0x555a9c83b1d7 <unknown>\n#21 0x555a9c84d124 <unknown>\n#22 0x7f282d622044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f694682fe50>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946eecc10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke(self, link,\n                                                                                           product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946eedc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555a9c83b1d7 \\\\u003Cunknown>\\\\n#21 0x555a9c84d124 \\\\u003Cunknown>\\\\n#22 0x7f282d622044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x555a9c84df83 <unknown>\nE       #1 0x555a9c506cf7 <unknown>\nE       #2 0x555a9c55ed92 <unknown>\nE       #3 0x555a9c55c7f4 <unknown>\nE       #4 0x555a9c559894 <unknown>\nE       #5 0x555a9c5584b9 <unknown>\nE       #6 0x555a9c54a313 <unknown>\nE       #7 0x555a9c5800b2 <unknown>\nE       #8 0x555a9c549b49 <unknown>\nE       #9 0x555a9c5804ce <unknown>\nE       #10 0x555a9c59f006 <unknown>\nE       #11 0x555a9c57fe53 <unknown>\nE       #12 0x555a9c547dd4 <unknown>\nE       #13 0x555a9c5491de <unknown>\nE       #14 0x555a9c812531 <unknown>\nE       #15 0x555a9c816455 <unknown>\nE       #16 0x555a9c7fef55 <unknown>\nE       #17 0x555a9c8170ef <unknown>\nE       #18 0x555a9c7e299f <unknown>\nE       #19 0x555a9c83b008 <unknown>\nE       #20 0x555a9c83b1d7 <unknown>\nE       #21 0x555a9c84d124 <unknown>\nE       #22 0x7f282d622044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705280052701,"stop":1705280052768,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705280052768,"stop":1705280052768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705280936507,"stop":1705280937289,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705280937290,"stop":1705280951358,"duration":14068},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705280937290,"stop":1705280937290,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x555a9c84df83 <unknown>\n#1 0x555a9c506cf7 <unknown>\n#2 0x555a9c55ed92 <unknown>\n#3 0x555a9c55c7f4 <unknown>\n#4 0x555a9c559894 <unknown>\n#5 0x555a9c5584b9 <unknown>\n#6 0x555a9c54a313 <unknown>\n#7 0x555a9c5800b2 <unknown>\n#8 0x555a9c549b49 <unknown>\n#9 0x555a9c5804ce <unknown>\n#10 0x555a9c59f006 <unknown>\n#11 0x555a9c57fe53 <unknown>\n#12 0x555a9c547dd4 <unknown>\n#13 0x555a9c5491de <unknown>\n#14 0x555a9c812531 <unknown>\n#15 0x555a9c816455 <unknown>\n#16 0x555a9c7fef55 <unknown>\n#17 0x555a9c8170ef <unknown>\n#18 0x555a9c7e299f <unknown>\n#19 0x555a9c83b008 <unknown>\n#20 0x555a9c83b1d7 <unknown>\n#21 0x555a9c84d124 <unknown>\n#22 0x7f282d622044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f694682fe50>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f6946eecc10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_50_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_50_3499rub_smoke(self, link,\n                                                                                           product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6946eedc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x555a9c83b1d7 \\\\u003Cunknown>\\\\n#21 0x555a9c84d124 \\\\u003Cunknown>\\\\n#22 0x7f282d622044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x555a9c84df83 <unknown>\nE       #1 0x555a9c506cf7 <unknown>\nE       #2 0x555a9c55ed92 <unknown>\nE       #3 0x555a9c55c7f4 <unknown>\nE       #4 0x555a9c559894 <unknown>\nE       #5 0x555a9c5584b9 <unknown>\nE       #6 0x555a9c54a313 <unknown>\nE       #7 0x555a9c5800b2 <unknown>\nE       #8 0x555a9c549b49 <unknown>\nE       #9 0x555a9c5804ce <unknown>\nE       #10 0x555a9c59f006 <unknown>\nE       #11 0x555a9c57fe53 <unknown>\nE       #12 0x555a9c547dd4 <unknown>\nE       #13 0x555a9c5491de <unknown>\nE       #14 0x555a9c812531 <unknown>\nE       #15 0x555a9c816455 <unknown>\nE       #16 0x555a9c7fef55 <unknown>\nE       #17 0x555a9c8170ef <unknown>\nE       #18 0x555a9c7e299f <unknown>\nE       #19 0x555a9c83b008 <unknown>\nE       #20 0x555a9c83b1d7 <unknown>\nE       #21 0x555a9c84d124 <unknown>\nE       #22 0x7f282d622044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1705280951359,"stop":1705280951392,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1705280951446,"stop":1705280951477,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705280952519,"stop":1705280952577,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"b69c5a77a1540391","name":"Screenshot","source":"b69c5a77a1540391.png","type":"image/png","size":127270},{"uid":"cbbc9c7a6a21db8","name":"HTML source","source":"cbbc9c7a6a21db8.html","type":"text/html","size":796572}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1705280953856,"stop":1705280953856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1705280953857,"stop":1705280953930,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"85a0874d609d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":155,"unknown":0,"total":166},"items":[{"uid":"74fa0e978cf75bec","reportUrl":"https://Nat754.github.io/StroyremAutomation/186//#testresult/74fa0e978cf75bec","status":"passed","time":{"start":1705194767837,"stop":1705194776987,"duration":9150}},{"uid":"c3e221cd002479eb","reportUrl":"https://Nat754.github.io/StroyremAutomation/185//#testresult/c3e221cd002479eb","status":"passed","time":{"start":1705108027716,"stop":1705108037350,"duration":9634}},{"uid":"f3ec33789159202c","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/f3ec33789159202c","status":"passed","time":{"start":1705021568534,"stop":1705021577534,"duration":9000}},{"uid":"45503cf797038e54","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/45503cf797038e54","status":"passed","time":{"start":1704935282775,"stop":1704935291973,"duration":9198}},{"uid":"99fe3139db5c8bd9","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/99fe3139db5c8bd9","status":"passed","time":{"start":1704848891489,"stop":1704848901065,"duration":9576}},{"uid":"e66b7c8a5c1c756f","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/e66b7c8a5c1c756f","status":"passed","time":{"start":1704762275792,"stop":1704762283641,"duration":7849}},{"uid":"1e7158888989bd5f","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/1e7158888989bd5f","status":"passed","time":{"start":1704675909308,"stop":1704675917592,"duration":8284}},{"uid":"75f03832ffb64128","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/75f03832ffb64128","status":"passed","time":{"start":1704589882953,"stop":1704589892352,"duration":9399}},{"uid":"e7a4244b76047cb5","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/e7a4244b76047cb5","status":"passed","time":{"start":1704503137688,"stop":1704503146812,"duration":9124}},{"uid":"9973aa00c8cd96bc","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/9973aa00c8cd96bc","status":"passed","time":{"start":1704416634225,"stop":1704416642321,"duration":8096}},{"uid":"39e92cd83fec2d9a","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/39e92cd83fec2d9a","status":"passed","time":{"start":1704330233572,"stop":1704330241903,"duration":8331}},{"uid":"4bf6fbdfd6fbb4be","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/4bf6fbdfd6fbb4be","status":"passed","time":{"start":1704243887659,"stop":1704243896571,"duration":8912}},{"uid":"65246459512b6955","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/65246459512b6955","status":"passed","time":{"start":1704157314242,"stop":1704157322505,"duration":8263}},{"uid":"e270198f2e59ad88","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/e270198f2e59ad88","status":"passed","time":{"start":1704071267905,"stop":1704071275709,"duration":7804}},{"uid":"7850a847c9f67219","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/7850a847c9f67219","status":"passed","time":{"start":1703984789811,"stop":1703984798175,"duration":8364}},{"uid":"e2bbdc1fe5c750f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/e2bbdc1fe5c750f7","status":"passed","time":{"start":1703898062442,"stop":1703898071110,"duration":8668}},{"uid":"6909892166966bdf","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/6909892166966bdf","status":"passed","time":{"start":1703811401756,"stop":1703811410998,"duration":9242}},{"uid":"9659c897edf990df","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/9659c897edf990df","status":"passed","time":{"start":1703725307370,"stop":1703725315276,"duration":7906}},{"uid":"804898be60a94cdf","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/804898be60a94cdf","status":"passed","time":{"start":1703639107838,"stop":1703639117084,"duration":9246}},{"uid":"5b5cc6d90737d8d5","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/5b5cc6d90737d8d5","status":"passed","time":{"start":1703552460553,"stop":1703552468905,"duration":8352}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"7e87e809e8ac9454.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"]}