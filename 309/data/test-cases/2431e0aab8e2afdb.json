{"uid":"2431e0aab8e2afdb","name":"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke","historyId":"ae0b03f524f3687047fb70a412376bdb","time":{"start":1715821980426,"stop":1715821985167,"duration":4741},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome-headless-shell=125.0.6422.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x559e2e9daeca <unknown>\n#1 0x559e2e6c445c <unknown>\n#2 0x559e2e6c9b69 <unknown>\n#3 0x559e2e6cb915 <unknown>\n#4 0x559e2e6cb99c <unknown>\n#5 0x559e2e71724c <unknown>\n#6 0x559e2e715176 <unknown>\n#7 0x559e2e712b57 <unknown>\n#8 0x559e2e71197c <unknown>\n#9 0x559e2e7050ff <unknown>\n#10 0x559e2e7334b2 <unknown>\n#11 0x559e2e704a79 <unknown>\n#12 0x559e2e73367e <unknown>\n#13 0x559e2e7522cc <unknown>\n#14 0x559e2e733253 <unknown>\n#15 0x559e2e7031c7 <unknown>\n#16 0x559e2e703b3e <unknown>\n#17 0x559e2e9a130b <unknown>\n#18 0x559e2e9a53b7 <unknown>\n#19 0x559e2e98de3e <unknown>\n#20 0x559e2e9a5e82 <unknown>\n#21 0x559e2e9727df <unknown>\n#22 0x559e2e9ca1b8 <unknown>\n#23 0x559e2e9ca38b <unknown>\n#24 0x559e2e9d9ffc <unknown>\n#25 0x7f957c4ce134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f923a069cd0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f923949dbd0>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n        product_page_open.get_text_red_link().click()\n        time.sleep(2)\n>       product_page_open.get_add_to_cart_btn().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9238df8dd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#23 0x559e2e9ca38b \\\\u003Cunknown>\\\\n#24 0x559e2e9d9ffc \\\\u003Cunknown>\\\\n#25 0x7f957c4ce134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome-headless-shell=125.0.6422.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x559e2e9daeca <unknown>\nE       #1 0x559e2e6c445c <unknown>\nE       #2 0x559e2e6c9b69 <unknown>\nE       #3 0x559e2e6cb915 <unknown>\nE       #4 0x559e2e6cb99c <unknown>\nE       #5 0x559e2e71724c <unknown>\nE       #6 0x559e2e715176 <unknown>\nE       #7 0x559e2e712b57 <unknown>\nE       #8 0x559e2e71197c <unknown>\nE       #9 0x559e2e7050ff <unknown>\nE       #10 0x559e2e7334b2 <unknown>\nE       #11 0x559e2e704a79 <unknown>\nE       #12 0x559e2e73367e <unknown>\nE       #13 0x559e2e7522cc <unknown>\nE       #14 0x559e2e733253 <unknown>\nE       #15 0x559e2e7031c7 <unknown>\nE       #16 0x559e2e703b3e <unknown>\nE       #17 0x559e2e9a130b <unknown>\nE       #18 0x559e2e9a53b7 <unknown>\nE       #19 0x559e2e98de3e <unknown>\nE       #20 0x559e2e9a5e82 <unknown>\nE       #21 0x559e2e9727df <unknown>\nE       #22 0x559e2e9ca1b8 <unknown>\nE       #23 0x559e2e9ca38b <unknown>\nE       #24 0x559e2e9d9ffc <unknown>\nE       #25 0x7f957c4ce134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1715820760269,"stop":1715820760337,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1715820760337,"stop":1715820760337,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1715821969628,"stop":1715821970319,"duration":691},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1715821970320,"stop":1715821980425,"duration":10105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1715821970320,"stop":1715821970320,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome-headless-shell=125.0.6422.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x559e2e9daeca <unknown>\n#1 0x559e2e6c445c <unknown>\n#2 0x559e2e6c9b69 <unknown>\n#3 0x559e2e6cb915 <unknown>\n#4 0x559e2e6cb99c <unknown>\n#5 0x559e2e71724c <unknown>\n#6 0x559e2e715176 <unknown>\n#7 0x559e2e712b57 <unknown>\n#8 0x559e2e71197c <unknown>\n#9 0x559e2e7050ff <unknown>\n#10 0x559e2e7334b2 <unknown>\n#11 0x559e2e704a79 <unknown>\n#12 0x559e2e73367e <unknown>\n#13 0x559e2e7522cc <unknown>\n#14 0x559e2e733253 <unknown>\n#15 0x559e2e7031c7 <unknown>\n#16 0x559e2e703b3e <unknown>\n#17 0x559e2e9a130b <unknown>\n#18 0x559e2e9a53b7 <unknown>\n#19 0x559e2e98de3e <unknown>\n#20 0x559e2e9a5e82 <unknown>\n#21 0x559e2e9727df <unknown>\n#22 0x559e2e9ca1b8 <unknown>\n#23 0x559e2e9ca38b <unknown>\n#24 0x559e2e9d9ffc <unknown>\n#25 0x7f957c4ce134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f923a069cd0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f923949dbd0>\n\n    @allure.title(\"positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(2)\n        product_page_open.get_text_red_link().click()\n        time.sleep(2)\n>       product_page_open.get_add_to_cart_btn().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9238df8dd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#23 0x559e2e9ca38b \\\\u003Cunknown>\\\\n#24 0x559e2e9d9ffc \\\\u003Cunknown>\\\\n#25 0x7f957c4ce134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome-headless-shell=125.0.6422.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x559e2e9daeca <unknown>\nE       #1 0x559e2e6c445c <unknown>\nE       #2 0x559e2e6c9b69 <unknown>\nE       #3 0x559e2e6cb915 <unknown>\nE       #4 0x559e2e6cb99c <unknown>\nE       #5 0x559e2e71724c <unknown>\nE       #6 0x559e2e715176 <unknown>\nE       #7 0x559e2e712b57 <unknown>\nE       #8 0x559e2e71197c <unknown>\nE       #9 0x559e2e7050ff <unknown>\nE       #10 0x559e2e7334b2 <unknown>\nE       #11 0x559e2e704a79 <unknown>\nE       #12 0x559e2e73367e <unknown>\nE       #13 0x559e2e7522cc <unknown>\nE       #14 0x559e2e733253 <unknown>\nE       #15 0x559e2e7031c7 <unknown>\nE       #16 0x559e2e703b3e <unknown>\nE       #17 0x559e2e9a130b <unknown>\nE       #18 0x559e2e9a53b7 <unknown>\nE       #19 0x559e2e98de3e <unknown>\nE       #20 0x559e2e9a5e82 <unknown>\nE       #21 0x559e2e9727df <unknown>\nE       #22 0x559e2e9ca1b8 <unknown>\nE       #23 0x559e2e9ca38b <unknown>\nE       #24 0x559e2e9d9ffc <unknown>\nE       #25 0x7f957c4ce134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1715821980426,"stop":1715821980481,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1715821982547,"stop":1715821982589,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'В корзину'","time":{"start":1715821984626,"stop":1715821984676,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"51bf27cb549247a0","name":"Screenshot","source":"51bf27cb549247a0.png","type":"image/png","size":210206},{"uid":"e7c13950f71bdb12","name":"HTML source","source":"e7c13950f71bdb12.html","type":"text/html","size":886416}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1715821985382,"stop":1715821985459,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1715821985382,"stop":1715821985382,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"4edfc54fdd20"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":269,"unknown":0,"total":274},"items":[{"uid":"b7fa1dae9971b47e","reportUrl":"https://Nat754.github.io/StroyremAutomation/308//#testresult/b7fa1dae9971b47e","status":"passed","time":{"start":1715735366844,"stop":1715735377186,"duration":10342}},{"uid":"404bb0fd9d1d1055","reportUrl":"https://Nat754.github.io/StroyremAutomation/307//#testresult/404bb0fd9d1d1055","status":"passed","time":{"start":1715648942099,"stop":1715648951846,"duration":9747}},{"uid":"2182d99723428d43","reportUrl":"https://Nat754.github.io/StroyremAutomation/306//#testresult/2182d99723428d43","status":"passed","time":{"start":1715562846909,"stop":1715562857356,"duration":10447}},{"uid":"713fbe5b4639281a","reportUrl":"https://Nat754.github.io/StroyremAutomation/305//#testresult/713fbe5b4639281a","status":"passed","time":{"start":1715476261486,"stop":1715476270177,"duration":8691}},{"uid":"1e135459e1d1c5cd","reportUrl":"https://Nat754.github.io/StroyremAutomation/304//#testresult/1e135459e1d1c5cd","status":"passed","time":{"start":1715389556768,"stop":1715389565587,"duration":8819}},{"uid":"83cd052d06c58c4f","reportUrl":"https://Nat754.github.io/StroyremAutomation/303//#testresult/83cd052d06c58c4f","status":"passed","time":{"start":1715303504170,"stop":1715303513974,"duration":9804}},{"uid":"8136eb30cd4f320","reportUrl":"https://Nat754.github.io/StroyremAutomation/302//#testresult/8136eb30cd4f320","status":"passed","time":{"start":1715216792610,"stop":1715216801424,"duration":8814}},{"uid":"e74e3d90c9272148","reportUrl":"https://Nat754.github.io/StroyremAutomation/301//#testresult/e74e3d90c9272148","status":"passed","time":{"start":1715130114447,"stop":1715130124264,"duration":9817}},{"uid":"45c94ce041cf5667","reportUrl":"https://Nat754.github.io/StroyremAutomation/300//#testresult/45c94ce041cf5667","status":"passed","time":{"start":1715043974892,"stop":1715043983618,"duration":8726}},{"uid":"eea9a93cbf6aed4a","reportUrl":"https://Nat754.github.io/StroyremAutomation/299//#testresult/eea9a93cbf6aed4a","status":"passed","time":{"start":1714957633172,"stop":1714957641899,"duration":8727}},{"uid":"b11a547efd979017","reportUrl":"https://Nat754.github.io/StroyremAutomation/298//#testresult/b11a547efd979017","status":"passed","time":{"start":1714871372854,"stop":1714871381658,"duration":8804}},{"uid":"a74a5884e3c0d005","reportUrl":"https://Nat754.github.io/StroyremAutomation/297//#testresult/a74a5884e3c0d005","status":"passed","time":{"start":1714784767373,"stop":1714784775888,"duration":8515}},{"uid":"e64ab7d0cebfef9e","reportUrl":"https://Nat754.github.io/StroyremAutomation/296//#testresult/e64ab7d0cebfef9e","status":"passed","time":{"start":1714698624810,"stop":1714698633800,"duration":8990}},{"uid":"76f05b940f29c748","reportUrl":"https://Nat754.github.io/StroyremAutomation/295//#testresult/76f05b940f29c748","status":"passed","time":{"start":1714611913816,"stop":1714611922459,"duration":8643}},{"uid":"f32f396ecfbf2299","reportUrl":"https://Nat754.github.io/StroyremAutomation/294//#testresult/f32f396ecfbf2299","status":"passed","time":{"start":1714525770694,"stop":1714525779182,"duration":8488}},{"uid":"a3b4fe49efac4c71","reportUrl":"https://Nat754.github.io/StroyremAutomation/293//#testresult/a3b4fe49efac4c71","status":"passed","time":{"start":1714439136815,"stop":1714439145976,"duration":9161}},{"uid":"a1ab31dd77d4aa33","reportUrl":"https://Nat754.github.io/StroyremAutomation/292//#testresult/a1ab31dd77d4aa33","status":"passed","time":{"start":1714352823569,"stop":1714352831938,"duration":8369}},{"uid":"d016a1ae69535b81","reportUrl":"https://Nat754.github.io/StroyremAutomation/291//#testresult/d016a1ae69535b81","status":"passed","time":{"start":1714266789912,"stop":1714266799449,"duration":9537}},{"uid":"7b5f9fded772de87","reportUrl":"https://Nat754.github.io/StroyremAutomation/290//#testresult/7b5f9fded772de87","status":"passed","time":{"start":1714180151552,"stop":1714180161629,"duration":10077}},{"uid":"9b56b69681704400","reportUrl":"https://Nat754.github.io/StroyremAutomation/289//#testresult/9b56b69681704400","status":"passed","time":{"start":1714093819286,"stop":1714093829151,"duration":9865}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"2431e0aab8e2afdb.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}