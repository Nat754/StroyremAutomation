{"uid":"cf4a275c21341514","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_0-49rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_0_49rub_smoke","historyId":"7f4f129a3704d352785ddaeba828a7cd","time":{"start":1717549742075,"stop":1717549744348,"duration":2273},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x55e53076ce3a <unknown>\n#1 0x55e53045645c <unknown>\n#2 0x55e5304a9336 <unknown>\n#3 0x55e5304a7176 <unknown>\n#4 0x55e5304a4b57 <unknown>\n#5 0x55e5304a397c <unknown>\n#6 0x55e5304970ff <unknown>\n#7 0x55e5304c54b2 <unknown>\n#8 0x55e530496a79 <unknown>\n#9 0x55e5304c567e <unknown>\n#10 0x55e5304e42cc <unknown>\n#11 0x55e5304c5253 <unknown>\n#12 0x55e5304951c7 <unknown>\n#13 0x55e530495b3e <unknown>\n#14 0x55e53073327b <unknown>\n#15 0x55e530737327 <unknown>\n#16 0x55e53071fdae <unknown>\n#17 0x55e530737df2 <unknown>\n#18 0x55e53070474f <unknown>\n#19 0x55e53075c128 <unknown>\n#20 0x55e53075c2fb <unknown>\n#21 0x55e53076bf6c <unknown>\n#22 0x7f0ca89cf134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fca3ead3710>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shurupy-po-derevu?price_first=0&price_last=49'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fca3d7ba7d0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_0-49rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHURUPY_PO_DEREVU_PAGE_URL}?price_first=0&price_last=49\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHURUPY_PO_DEREVU_PAGE_URL}?price_first=0&price_last=49\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_0_49rub_smoke(self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(0)\n        product_page_open.get_field_price_last().send_keys(49)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fca3d815750>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e53075c2fb \\\\u003Cunknown>\\\\n#21 0x55e53076bf6c \\\\u003Cunknown>\\\\n#22 0x7f0ca89cf134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x55e53076ce3a <unknown>\nE       #1 0x55e53045645c <unknown>\nE       #2 0x55e5304a9336 <unknown>\nE       #3 0x55e5304a7176 <unknown>\nE       #4 0x55e5304a4b57 <unknown>\nE       #5 0x55e5304a397c <unknown>\nE       #6 0x55e5304970ff <unknown>\nE       #7 0x55e5304c54b2 <unknown>\nE       #8 0x55e530496a79 <unknown>\nE       #9 0x55e5304c567e <unknown>\nE       #10 0x55e5304e42cc <unknown>\nE       #11 0x55e5304c5253 <unknown>\nE       #12 0x55e5304951c7 <unknown>\nE       #13 0x55e530495b3e <unknown>\nE       #14 0x55e53073327b <unknown>\nE       #15 0x55e530737327 <unknown>\nE       #16 0x55e53071fdae <unknown>\nE       #17 0x55e530737df2 <unknown>\nE       #18 0x55e53070474f <unknown>\nE       #19 0x55e53075c128 <unknown>\nE       #20 0x55e53075c2fb <unknown>\nE       #21 0x55e53076bf6c <unknown>\nE       #22 0x7f0ca89cf134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1717548811298,"stop":1717548811367,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1717548811367,"stop":1717548811367,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1717549727328,"stop":1717549728015,"duration":687},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1717549728015,"stop":1717549742075,"duration":14060},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1717549728015,"stop":1717549728015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x55e53076ce3a <unknown>\n#1 0x55e53045645c <unknown>\n#2 0x55e5304a9336 <unknown>\n#3 0x55e5304a7176 <unknown>\n#4 0x55e5304a4b57 <unknown>\n#5 0x55e5304a397c <unknown>\n#6 0x55e5304970ff <unknown>\n#7 0x55e5304c54b2 <unknown>\n#8 0x55e530496a79 <unknown>\n#9 0x55e5304c567e <unknown>\n#10 0x55e5304e42cc <unknown>\n#11 0x55e5304c5253 <unknown>\n#12 0x55e5304951c7 <unknown>\n#13 0x55e530495b3e <unknown>\n#14 0x55e53073327b <unknown>\n#15 0x55e530737327 <unknown>\n#16 0x55e53071fdae <unknown>\n#17 0x55e530737df2 <unknown>\n#18 0x55e53070474f <unknown>\n#19 0x55e53075c128 <unknown>\n#20 0x55e53075c2fb <unknown>\n#21 0x55e53076bf6c <unknown>\n#22 0x7f0ca89cf134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fca3ead3710>\nlink = 'https://test2.stroyrem-nn.ru/catalog/shurupy-po-derevu?price_first=0&price_last=49'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fca3d7ba7d0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_0-49rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHURUPY_PO_DEREVU_PAGE_URL}?price_first=0&price_last=49\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHURUPY_PO_DEREVU_PAGE_URL}?price_first=0&price_last=49\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_0_49rub_smoke(self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(0)\n        product_page_open.get_field_price_last().send_keys(49)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fca3d815750>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e53075c2fb \\\\u003Cunknown>\\\\n#21 0x55e53076bf6c \\\\u003Cunknown>\\\\n#22 0x7f0ca89cf134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x55e53076ce3a <unknown>\nE       #1 0x55e53045645c <unknown>\nE       #2 0x55e5304a9336 <unknown>\nE       #3 0x55e5304a7176 <unknown>\nE       #4 0x55e5304a4b57 <unknown>\nE       #5 0x55e5304a397c <unknown>\nE       #6 0x55e5304970ff <unknown>\nE       #7 0x55e5304c54b2 <unknown>\nE       #8 0x55e530496a79 <unknown>\nE       #9 0x55e5304c567e <unknown>\nE       #10 0x55e5304e42cc <unknown>\nE       #11 0x55e5304c5253 <unknown>\nE       #12 0x55e5304951c7 <unknown>\nE       #13 0x55e530495b3e <unknown>\nE       #14 0x55e53073327b <unknown>\nE       #15 0x55e530737327 <unknown>\nE       #16 0x55e53071fdae <unknown>\nE       #17 0x55e530737df2 <unknown>\nE       #18 0x55e53070474f <unknown>\nE       #19 0x55e53075c128 <unknown>\nE       #20 0x55e53075c2fb <unknown>\nE       #21 0x55e53076bf6c <unknown>\nE       #22 0x7f0ca89cf134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1717549742076,"stop":1717549742109,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1717549742155,"stop":1717549742186,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1717549743222,"stop":1717549743262,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"e4b850068bb9f13","name":"Screenshot","source":"e4b850068bb9f13.png","type":"image/png","size":48778},{"uid":"51e2ba7aeaf87f75","name":"HTML source","source":"51e2ba7aeaf87f75.html","type":"text/html","size":932162}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1717549744523,"stop":1717549744599,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1717549744523,"stop":1717549744523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"0acca70e2922"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/shurupy-po-derevu?price_first=0&price_last=49'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":6,"unknown":0,"total":7},"items":[{"uid":"259a60e6742dd85a","reportUrl":"https://Nat754.github.io/StroyremAutomation/328//#testresult/259a60e6742dd85a","status":"passed","time":{"start":1717463151597,"stop":1717463159826,"duration":8229}},{"uid":"73a5de0848784000","reportUrl":"https://Nat754.github.io/StroyremAutomation/327//#testresult/73a5de0848784000","status":"passed","time":{"start":1717376939738,"stop":1717376949367,"duration":9629}},{"uid":"a945414a6b6425d2","reportUrl":"https://Nat754.github.io/StroyremAutomation/326//#testresult/a945414a6b6425d2","status":"passed","time":{"start":1717290666574,"stop":1717290676460,"duration":9886}},{"uid":"1a4dd9e84761f557","reportUrl":"https://Nat754.github.io/StroyremAutomation/325//#testresult/1a4dd9e84761f557","status":"passed","time":{"start":1717204072310,"stop":1717204080561,"duration":8251}},{"uid":"dea206c77f5f3561","reportUrl":"https://Nat754.github.io/StroyremAutomation/324//#testresult/dea206c77f5f3561","status":"passed","time":{"start":1717117710051,"stop":1717117719625,"duration":9574}},{"uid":"b6c333c5b1ca668f","reportUrl":"https://Nat754.github.io/StroyremAutomation/323//#testresult/b6c333c5b1ca668f","status":"passed","time":{"start":1717031057374,"stop":1717031068423,"duration":11049}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"cf4a275c21341514.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/shurupy-po-derevu?price_first=0&price_last=49'"]}