{"uid":"6fee16bb7e01d10c","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"56dc95032881057b0b8ffab5dc914f14","time":{"start":1702602459798,"stop":1702602462032,"duration":2234},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bb075d3d33 <unknown>\n#1 0x55bb07290f87 <unknown>\n#2 0x55bb072e9002 <unknown>\n#3 0x55bb072e6a64 <unknown>\n#4 0x55bb072e3b04 <unknown>\n#5 0x55bb072e2729 <unknown>\n#6 0x55bb072d4583 <unknown>\n#7 0x55bb0730a342 <unknown>\n#8 0x55bb072d3db9 <unknown>\n#9 0x55bb0730a75e <unknown>\n#10 0x55bb07329297 <unknown>\n#11 0x55bb0730a0e3 <unknown>\n#12 0x55bb072d2044 <unknown>\n#13 0x55bb072d344e <unknown>\n#14 0x55bb07598861 <unknown>\n#15 0x55bb0759c785 <unknown>\n#16 0x55bb07586285 <unknown>\n#17 0x55bb0759d41f <unknown>\n#18 0x55bb0756a20f <unknown>\n#19 0x55bb075c1028 <unknown>\n#20 0x55bb075c11f7 <unknown>\n#21 0x55bb075d2ed4 <unknown>\n#22 0x7f85234ee044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff199eef890>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff199eb0a10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff198766810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bb075c11f7 \\\\u003Cunknown>\\\\n#21 0x55bb075d2ed4 \\\\u003Cunknown>\\\\n#22 0x7f85234ee044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55bb075d3d33 <unknown>\nE       #1 0x55bb07290f87 <unknown>\nE       #2 0x55bb072e9002 <unknown>\nE       #3 0x55bb072e6a64 <unknown>\nE       #4 0x55bb072e3b04 <unknown>\nE       #5 0x55bb072e2729 <unknown>\nE       #6 0x55bb072d4583 <unknown>\nE       #7 0x55bb0730a342 <unknown>\nE       #8 0x55bb072d3db9 <unknown>\nE       #9 0x55bb0730a75e <unknown>\nE       #10 0x55bb07329297 <unknown>\nE       #11 0x55bb0730a0e3 <unknown>\nE       #12 0x55bb072d2044 <unknown>\nE       #13 0x55bb072d344e <unknown>\nE       #14 0x55bb07598861 <unknown>\nE       #15 0x55bb0759c785 <unknown>\nE       #16 0x55bb07586285 <unknown>\nE       #17 0x55bb0759d41f <unknown>\nE       #18 0x55bb0756a20f <unknown>\nE       #19 0x55bb075c1028 <unknown>\nE       #20 0x55bb075c11f7 <unknown>\nE       #21 0x55bb075d2ed4 <unknown>\nE       #22 0x7f85234ee044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702601523080,"stop":1702601523150,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702601523150,"stop":1702601523150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702602449678,"stop":1702602450459,"duration":781},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702602450459,"stop":1702602450459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702602450459,"stop":1702602459797,"duration":9338},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55bb075d3d33 <unknown>\n#1 0x55bb07290f87 <unknown>\n#2 0x55bb072e9002 <unknown>\n#3 0x55bb072e6a64 <unknown>\n#4 0x55bb072e3b04 <unknown>\n#5 0x55bb072e2729 <unknown>\n#6 0x55bb072d4583 <unknown>\n#7 0x55bb0730a342 <unknown>\n#8 0x55bb072d3db9 <unknown>\n#9 0x55bb0730a75e <unknown>\n#10 0x55bb07329297 <unknown>\n#11 0x55bb0730a0e3 <unknown>\n#12 0x55bb072d2044 <unknown>\n#13 0x55bb072d344e <unknown>\n#14 0x55bb07598861 <unknown>\n#15 0x55bb0759c785 <unknown>\n#16 0x55bb07586285 <unknown>\n#17 0x55bb0759d41f <unknown>\n#18 0x55bb0756a20f <unknown>\n#19 0x55bb075c1028 <unknown>\n#20 0x55bb075c11f7 <unknown>\n#21 0x55bb075d2ed4 <unknown>\n#22 0x7f85234ee044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff199eef890>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff199eb0a10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff198766810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55bb075c11f7 \\\\u003Cunknown>\\\\n#21 0x55bb075d2ed4 \\\\u003Cunknown>\\\\n#22 0x7f85234ee044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55bb075d3d33 <unknown>\nE       #1 0x55bb07290f87 <unknown>\nE       #2 0x55bb072e9002 <unknown>\nE       #3 0x55bb072e6a64 <unknown>\nE       #4 0x55bb072e3b04 <unknown>\nE       #5 0x55bb072e2729 <unknown>\nE       #6 0x55bb072d4583 <unknown>\nE       #7 0x55bb0730a342 <unknown>\nE       #8 0x55bb072d3db9 <unknown>\nE       #9 0x55bb0730a75e <unknown>\nE       #10 0x55bb07329297 <unknown>\nE       #11 0x55bb0730a0e3 <unknown>\nE       #12 0x55bb072d2044 <unknown>\nE       #13 0x55bb072d344e <unknown>\nE       #14 0x55bb07598861 <unknown>\nE       #15 0x55bb0759c785 <unknown>\nE       #16 0x55bb07586285 <unknown>\nE       #17 0x55bb0759d41f <unknown>\nE       #18 0x55bb0756a20f <unknown>\nE       #19 0x55bb075c1028 <unknown>\nE       #20 0x55bb075c11f7 <unknown>\nE       #21 0x55bb075d2ed4 <unknown>\nE       #22 0x7f85234ee044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702602459798,"stop":1702602459853,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1702602460912,"stop":1702602460958,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"40ddd2bceea95ffc","name":"Screenshot","source":"40ddd2bceea95ffc.png","type":"image/png","size":216282},{"uid":"10beed7d15c80ba4","name":"HTML source","source":"10beed7d15c80ba4.html","type":"text/html","size":830251}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1702602462229,"stop":1702602462303,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1702602462229,"stop":1702602462229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"8a3fb8002ead"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":122,"unknown":0,"total":124},"items":[{"uid":"d9a0d28773123060","reportUrl":"https://Nat754.github.io/StroyremAutomation/155//#testresult/d9a0d28773123060","status":"passed","time":{"start":1702515814876,"stop":1702515825473,"duration":10597}},{"uid":"45c8e211231902b7","reportUrl":"https://Nat754.github.io/StroyremAutomation/154//#testresult/45c8e211231902b7","status":"passed","time":{"start":1702453612238,"stop":1702453623995,"duration":11757}},{"uid":"ff0a0298992b8fb6","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/ff0a0298992b8fb6","status":"passed","time":{"start":1700615209179,"stop":1700615220128,"duration":10949}},{"uid":"94c72a580ee00247","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/94c72a580ee00247","status":"passed","time":{"start":1700529058141,"stop":1700529070265,"duration":12124}},{"uid":"41e1f5903accefc7","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/41e1f5903accefc7","status":"passed","time":{"start":1700442432340,"stop":1700442443542,"duration":11202}},{"uid":"7858e9d9afe3bc19","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/7858e9d9afe3bc19","status":"passed","time":{"start":1700356120938,"stop":1700356132164,"duration":11226}},{"uid":"e78fe798eff6553b","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/e78fe798eff6553b","status":"passed","time":{"start":1700269439478,"stop":1700269450660,"duration":11182}},{"uid":"34c58b775145cb94","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/34c58b775145cb94","status":"passed","time":{"start":1700183351920,"stop":1700183363523,"duration":11603}},{"uid":"bc9529ae30ffaedb","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/bc9529ae30ffaedb","status":"passed","time":{"start":1700096825444,"stop":1700096836543,"duration":11099}},{"uid":"546840207eaf2fde","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/546840207eaf2fde","status":"passed","time":{"start":1700010526715,"stop":1700010538373,"duration":11658}},{"uid":"6b0b94887cd528f9","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/6b0b94887cd528f9","status":"passed","time":{"start":1699923754977,"stop":1699923765656,"duration":10679}},{"uid":"ce77d424afb48200","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/ce77d424afb48200","status":"passed","time":{"start":1699837542452,"stop":1699837553726,"duration":11274}},{"uid":"b7a134dd9f32d50c","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/b7a134dd9f32d50c","status":"passed","time":{"start":1699751272116,"stop":1699751283850,"duration":11734}},{"uid":"f665a124f1d54951","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/f665a124f1d54951","status":"passed","time":{"start":1699664768679,"stop":1699664780871,"duration":12192}},{"uid":"2c5b433a96a3d86f","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/2c5b433a96a3d86f","status":"passed","time":{"start":1699578196816,"stop":1699578207561,"duration":10745}},{"uid":"37860a3fcc253aaf","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/37860a3fcc253aaf","status":"passed","time":{"start":1699491752016,"stop":1699491762920,"duration":10904}},{"uid":"afb07f8ecee02338","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/afb07f8ecee02338","status":"passed","time":{"start":1699405549691,"stop":1699405561765,"duration":12074}},{"uid":"d166078d8a92fa8","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/d166078d8a92fa8","status":"passed","time":{"start":1699319101539,"stop":1699319112271,"duration":10732}},{"uid":"4a34345597c45304","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/4a34345597c45304","status":"passed","time":{"start":1699232820243,"stop":1699232832238,"duration":11995}},{"uid":"363b176ddbd28404","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/363b176ddbd28404","status":"passed","time":{"start":1699146692626,"stop":1699146704155,"duration":11529}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"6fee16bb7e01d10c.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}