{"uid":"498322fc24500b6a","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"dad3617134a119815037f972e0359b9c","time":{"start":1702602477812,"stop":1702602480035,"duration":2223},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x559cc90e9d33 <unknown>\n#1 0x559cc8da6f87 <unknown>\n#2 0x559cc8dff002 <unknown>\n#3 0x559cc8dfca64 <unknown>\n#4 0x559cc8df9b04 <unknown>\n#5 0x559cc8df8729 <unknown>\n#6 0x559cc8dea583 <unknown>\n#7 0x559cc8e20342 <unknown>\n#8 0x559cc8de9db9 <unknown>\n#9 0x559cc8e2075e <unknown>\n#10 0x559cc8e3f297 <unknown>\n#11 0x559cc8e200e3 <unknown>\n#12 0x559cc8de8044 <unknown>\n#13 0x559cc8de944e <unknown>\n#14 0x559cc90ae861 <unknown>\n#15 0x559cc90b2785 <unknown>\n#16 0x559cc909c285 <unknown>\n#17 0x559cc90b341f <unknown>\n#18 0x559cc908020f <unknown>\n#19 0x559cc90d7028 <unknown>\n#20 0x559cc90d71f7 <unknown>\n#21 0x559cc90e8ed4 <unknown>\n#22 0x7f8e15bad044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff199eec290>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff1998f4d10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff1998f7290>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559cc90d71f7 \\\\u003Cunknown>\\\\n#21 0x559cc90e8ed4 \\\\u003Cunknown>\\\\n#22 0x7f8e15bad044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x559cc90e9d33 <unknown>\nE       #1 0x559cc8da6f87 <unknown>\nE       #2 0x559cc8dff002 <unknown>\nE       #3 0x559cc8dfca64 <unknown>\nE       #4 0x559cc8df9b04 <unknown>\nE       #5 0x559cc8df8729 <unknown>\nE       #6 0x559cc8dea583 <unknown>\nE       #7 0x559cc8e20342 <unknown>\nE       #8 0x559cc8de9db9 <unknown>\nE       #9 0x559cc8e2075e <unknown>\nE       #10 0x559cc8e3f297 <unknown>\nE       #11 0x559cc8e200e3 <unknown>\nE       #12 0x559cc8de8044 <unknown>\nE       #13 0x559cc8de944e <unknown>\nE       #14 0x559cc90ae861 <unknown>\nE       #15 0x559cc90b2785 <unknown>\nE       #16 0x559cc909c285 <unknown>\nE       #17 0x559cc90b341f <unknown>\nE       #18 0x559cc908020f <unknown>\nE       #19 0x559cc90d7028 <unknown>\nE       #20 0x559cc90d71f7 <unknown>\nE       #21 0x559cc90e8ed4 <unknown>\nE       #22 0x7f8e15bad044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702601523080,"stop":1702601523150,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702601523150,"stop":1702601523150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702602462304,"stop":1702602463084,"duration":780},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702602463084,"stop":1702602463085,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702602463085,"stop":1702602477811,"duration":14726},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x559cc90e9d33 <unknown>\n#1 0x559cc8da6f87 <unknown>\n#2 0x559cc8dff002 <unknown>\n#3 0x559cc8dfca64 <unknown>\n#4 0x559cc8df9b04 <unknown>\n#5 0x559cc8df8729 <unknown>\n#6 0x559cc8dea583 <unknown>\n#7 0x559cc8e20342 <unknown>\n#8 0x559cc8de9db9 <unknown>\n#9 0x559cc8e2075e <unknown>\n#10 0x559cc8e3f297 <unknown>\n#11 0x559cc8e200e3 <unknown>\n#12 0x559cc8de8044 <unknown>\n#13 0x559cc8de944e <unknown>\n#14 0x559cc90ae861 <unknown>\n#15 0x559cc90b2785 <unknown>\n#16 0x559cc909c285 <unknown>\n#17 0x559cc90b341f <unknown>\n#18 0x559cc908020f <unknown>\n#19 0x559cc90d7028 <unknown>\n#20 0x559cc90d71f7 <unknown>\n#21 0x559cc90e8ed4 <unknown>\n#22 0x7f8e15bad044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff199eec290>\nlink = 'https://test2.stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff1998f4d10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff1998f7290>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559cc90d71f7 \\\\u003Cunknown>\\\\n#21 0x559cc90e8ed4 \\\\u003Cunknown>\\\\n#22 0x7f8e15bad044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x559cc90e9d33 <unknown>\nE       #1 0x559cc8da6f87 <unknown>\nE       #2 0x559cc8dff002 <unknown>\nE       #3 0x559cc8dfca64 <unknown>\nE       #4 0x559cc8df9b04 <unknown>\nE       #5 0x559cc8df8729 <unknown>\nE       #6 0x559cc8dea583 <unknown>\nE       #7 0x559cc8e20342 <unknown>\nE       #8 0x559cc8de9db9 <unknown>\nE       #9 0x559cc8e2075e <unknown>\nE       #10 0x559cc8e3f297 <unknown>\nE       #11 0x559cc8e200e3 <unknown>\nE       #12 0x559cc8de8044 <unknown>\nE       #13 0x559cc8de944e <unknown>\nE       #14 0x559cc90ae861 <unknown>\nE       #15 0x559cc90b2785 <unknown>\nE       #16 0x559cc909c285 <unknown>\nE       #17 0x559cc90b341f <unknown>\nE       #18 0x559cc908020f <unknown>\nE       #19 0x559cc90d7028 <unknown>\nE       #20 0x559cc90d71f7 <unknown>\nE       #21 0x559cc90e8ed4 <unknown>\nE       #22 0x7f8e15bad044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702602477812,"stop":1702602477869,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1702602478914,"stop":1702602478956,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"20b62f321667fa4c","name":"Screenshot","source":"20b62f321667fa4c.png","type":"image/png","size":151866},{"uid":"fc01bcaff4c33129","name":"HTML source","source":"fc01bcaff4c33129.html","type":"text/html","size":811778}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1702602480219,"stop":1702602480219,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1702602480220,"stop":1702602480298,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"8a3fb8002ead"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":113,"unknown":0,"total":124},"items":[{"uid":"8233a88ae4964d99","reportUrl":"https://Nat754.github.io/StroyremAutomation/155//#testresult/8233a88ae4964d99","status":"passed","time":{"start":1702515835579,"stop":1702515846488,"duration":10909}},{"uid":"6806186055085033","reportUrl":"https://Nat754.github.io/StroyremAutomation/154//#testresult/6806186055085033","status":"passed","time":{"start":1702453637799,"stop":1702453649476,"duration":11677}},{"uid":"197e2e5ab7427b92","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/197e2e5ab7427b92","status":"passed","time":{"start":1700615230351,"stop":1700615241558,"duration":11207}},{"uid":"6e01e953da4b6bb9","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/6e01e953da4b6bb9","status":"passed","time":{"start":1700529085915,"stop":1700529097427,"duration":11512}},{"uid":"eef2dba913d47e74","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/eef2dba913d47e74","status":"passed","time":{"start":1700442455110,"stop":1700442466206,"duration":11096}},{"uid":"b69337efd31620fb","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/b69337efd31620fb","status":"passed","time":{"start":1700356142758,"stop":1700356153669,"duration":10911}},{"uid":"9fd8d8e161387fc2","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/9fd8d8e161387fc2","status":"passed","time":{"start":1700269461075,"stop":1700269471617,"duration":10542}},{"uid":"3d40fdeb41891532","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/3d40fdeb41891532","status":"passed","time":{"start":1700183377669,"stop":1700183389391,"duration":11722}},{"uid":"8f03a45de9677d3a","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/8f03a45de9677d3a","status":"passed","time":{"start":1700096848377,"stop":1700096860806,"duration":12429}},{"uid":"ccff2269610ab395","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/ccff2269610ab395","status":"passed","time":{"start":1700010552684,"stop":1700010564078,"duration":11394}},{"uid":"707423ad4b0f3208","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/707423ad4b0f3208","status":"passed","time":{"start":1699923775702,"stop":1699923786406,"duration":10704}},{"uid":"b616de2d1120e274","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/b616de2d1120e274","status":"passed","time":{"start":1699837564197,"stop":1699837575269,"duration":11072}},{"uid":"44f2eb79f5fd7fe4","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/44f2eb79f5fd7fe4","status":"passed","time":{"start":1699751294254,"stop":1699751305729,"duration":11475}},{"uid":"9cfd56e8b08ac081","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/9cfd56e8b08ac081","status":"passed","time":{"start":1699664795258,"stop":1699664806824,"duration":11566}},{"uid":"34c17d22abe306d4","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/34c17d22abe306d4","status":"passed","time":{"start":1699578217809,"stop":1699578228285,"duration":10476}},{"uid":"e9554dc6849ed1a9","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/e9554dc6849ed1a9","status":"passed","time":{"start":1699491773567,"stop":1699491784432,"duration":10865}},{"uid":"e68d31c616b78d97","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/e68d31c616b78d97","status":"passed","time":{"start":1699405574484,"stop":1699405586360,"duration":11876}},{"uid":"64807550542b8c31","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/64807550542b8c31","status":"passed","time":{"start":1699319122668,"stop":1699319133312,"duration":10644}},{"uid":"464e503e9a87a2cc","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/464e503e9a87a2cc","status":"passed","time":{"start":1699232843324,"stop":1699232854851,"duration":11527}},{"uid":"4884fa8cddf057a7","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/4884fa8cddf057a7","status":"passed","time":{"start":1699146718970,"stop":1699146731290,"duration":12320}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"498322fc24500b6a.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/action'"]}