{"uid":"c235fe6a7a6a44bb","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"1b0f7ad8d89bc0387b43367254f3fa4d","time":{"start":1702602447120,"stop":1702602449408,"duration":2288},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55b97fce3d33 <unknown>\n#1 0x55b97f9a0f87 <unknown>\n#2 0x55b97f9f9002 <unknown>\n#3 0x55b97f9f6a64 <unknown>\n#4 0x55b97f9f3b04 <unknown>\n#5 0x55b97f9f2729 <unknown>\n#6 0x55b97f9e4583 <unknown>\n#7 0x55b97fa1a342 <unknown>\n#8 0x55b97f9e3db9 <unknown>\n#9 0x55b97fa1a75e <unknown>\n#10 0x55b97fa39297 <unknown>\n#11 0x55b97fa1a0e3 <unknown>\n#12 0x55b97f9e2044 <unknown>\n#13 0x55b97f9e344e <unknown>\n#14 0x55b97fca8861 <unknown>\n#15 0x55b97fcac785 <unknown>\n#16 0x55b97fc96285 <unknown>\n#17 0x55b97fcad41f <unknown>\n#18 0x55b97fc7a20f <unknown>\n#19 0x55b97fcd1028 <unknown>\n#20 0x55b97fcd11f7 <unknown>\n#21 0x55b97fce2ed4 <unknown>\n#22 0x7f2ffd0ae044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff19ab61bd0>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff199c5cdd0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff199c5d8d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b97fcd11f7 \\\\u003Cunknown>\\\\n#21 0x55b97fce2ed4 \\\\u003Cunknown>\\\\n#22 0x7f2ffd0ae044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55b97fce3d33 <unknown>\nE       #1 0x55b97f9a0f87 <unknown>\nE       #2 0x55b97f9f9002 <unknown>\nE       #3 0x55b97f9f6a64 <unknown>\nE       #4 0x55b97f9f3b04 <unknown>\nE       #5 0x55b97f9f2729 <unknown>\nE       #6 0x55b97f9e4583 <unknown>\nE       #7 0x55b97fa1a342 <unknown>\nE       #8 0x55b97f9e3db9 <unknown>\nE       #9 0x55b97fa1a75e <unknown>\nE       #10 0x55b97fa39297 <unknown>\nE       #11 0x55b97fa1a0e3 <unknown>\nE       #12 0x55b97f9e2044 <unknown>\nE       #13 0x55b97f9e344e <unknown>\nE       #14 0x55b97fca8861 <unknown>\nE       #15 0x55b97fcac785 <unknown>\nE       #16 0x55b97fc96285 <unknown>\nE       #17 0x55b97fcad41f <unknown>\nE       #18 0x55b97fc7a20f <unknown>\nE       #19 0x55b97fcd1028 <unknown>\nE       #20 0x55b97fcd11f7 <unknown>\nE       #21 0x55b97fce2ed4 <unknown>\nE       #22 0x7f2ffd0ae044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702601523080,"stop":1702601523150,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1702601523150,"stop":1702601523150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1702602425998,"stop":1702602426787,"duration":789},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1702602426787,"stop":1702602426788,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1702602426788,"stop":1702602447119,"duration":20331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.71)\nStacktrace:\n#0 0x55b97fce3d33 <unknown>\n#1 0x55b97f9a0f87 <unknown>\n#2 0x55b97f9f9002 <unknown>\n#3 0x55b97f9f6a64 <unknown>\n#4 0x55b97f9f3b04 <unknown>\n#5 0x55b97f9f2729 <unknown>\n#6 0x55b97f9e4583 <unknown>\n#7 0x55b97fa1a342 <unknown>\n#8 0x55b97f9e3db9 <unknown>\n#9 0x55b97fa1a75e <unknown>\n#10 0x55b97fa39297 <unknown>\n#11 0x55b97fa1a0e3 <unknown>\n#12 0x55b97f9e2044 <unknown>\n#13 0x55b97f9e344e <unknown>\n#14 0x55b97fca8861 <unknown>\n#15 0x55b97fcac785 <unknown>\n#16 0x55b97fc96285 <unknown>\n#17 0x55b97fcad41f <unknown>\n#18 0x55b97fc7a20f <unknown>\n#19 0x55b97fcd1028 <unknown>\n#20 0x55b97fcd11f7 <unknown>\n#21 0x55b97fce2ed4 <unknown>\n#22 0x7f2ffd0ae044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff19ab61bd0>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff199c5cdd0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff199c5d8d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b97fcd11f7 \\\\u003Cunknown>\\\\n#21 0x55b97fce2ed4 \\\\u003Cunknown>\\\\n#22 0x7f2ffd0ae044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.71)\nE       Stacktrace:\nE       #0 0x55b97fce3d33 <unknown>\nE       #1 0x55b97f9a0f87 <unknown>\nE       #2 0x55b97f9f9002 <unknown>\nE       #3 0x55b97f9f6a64 <unknown>\nE       #4 0x55b97f9f3b04 <unknown>\nE       #5 0x55b97f9f2729 <unknown>\nE       #6 0x55b97f9e4583 <unknown>\nE       #7 0x55b97fa1a342 <unknown>\nE       #8 0x55b97f9e3db9 <unknown>\nE       #9 0x55b97fa1a75e <unknown>\nE       #10 0x55b97fa39297 <unknown>\nE       #11 0x55b97fa1a0e3 <unknown>\nE       #12 0x55b97f9e2044 <unknown>\nE       #13 0x55b97f9e344e <unknown>\nE       #14 0x55b97fca8861 <unknown>\nE       #15 0x55b97fcac785 <unknown>\nE       #16 0x55b97fc96285 <unknown>\nE       #17 0x55b97fcad41f <unknown>\nE       #18 0x55b97fc7a20f <unknown>\nE       #19 0x55b97fcd1028 <unknown>\nE       #20 0x55b97fcd11f7 <unknown>\nE       #21 0x55b97fce2ed4 <unknown>\nE       #22 0x7f2ffd0ae044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1702602447120,"stop":1702602447159,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1702602447212,"stop":1702602447243,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1702602448286,"stop":1702602448333,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"fd90d3581cae7301","name":"Screenshot","source":"fd90d3581cae7301.png","type":"image/png","size":152005},{"uid":"35ce7b290469f966","name":"HTML source","source":"35ce7b290469f966.html","type":"text/html","size":908539}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1702602449591,"stop":1702602449591,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1702602449592,"stop":1702602449676,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"8a3fb8002ead"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":122,"unknown":0,"total":131},"items":[{"uid":"11fd3866fb549108","reportUrl":"https://Nat754.github.io/StroyremAutomation/155//#testresult/11fd3866fb549108","status":"passed","time":{"start":1702515800201,"stop":1702515807792,"duration":7591}},{"uid":"a29a78a2cce35398","reportUrl":"https://Nat754.github.io/StroyremAutomation/154//#testresult/a29a78a2cce35398","status":"passed","time":{"start":1702453594269,"stop":1702453603722,"duration":9453}},{"uid":"f045b1cbae454c5a","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/f045b1cbae454c5a","status":"passed","time":{"start":1700615194051,"stop":1700615201704,"duration":7653}},{"uid":"ee27af77d1423061","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/ee27af77d1423061","status":"passed","time":{"start":1700529037435,"stop":1700529046632,"duration":9197}},{"uid":"f40cb6ae9d614139","reportUrl":"https://Nat754.github.io/StroyremAutomation/131//#testresult/f40cb6ae9d614139","status":"passed","time":{"start":1700442415510,"stop":1700442423492,"duration":7982}},{"uid":"f728aaf64e37f275","reportUrl":"https://Nat754.github.io/StroyremAutomation/130//#testresult/f728aaf64e37f275","status":"passed","time":{"start":1700356105090,"stop":1700356112629,"duration":7539}},{"uid":"e7c872cfcb094c77","reportUrl":"https://Nat754.github.io/StroyremAutomation/129//#testresult/e7c872cfcb094c77","status":"passed","time":{"start":1700269423629,"stop":1700269431567,"duration":7938}},{"uid":"bfc31fda76e052a","reportUrl":"https://Nat754.github.io/StroyremAutomation/128//#testresult/bfc31fda76e052a","status":"passed","time":{"start":1700183333037,"stop":1700183341510,"duration":8473}},{"uid":"d7be75c56125da12","reportUrl":"https://Nat754.github.io/StroyremAutomation/127//#testresult/d7be75c56125da12","status":"passed","time":{"start":1700096808937,"stop":1700096816742,"duration":7805}},{"uid":"18917f3e7698cc32","reportUrl":"https://Nat754.github.io/StroyremAutomation/126//#testresult/18917f3e7698cc32","status":"passed","time":{"start":1700010506612,"stop":1700010515438,"duration":8826}},{"uid":"a89bc8f5ef93658c","reportUrl":"https://Nat754.github.io/StroyremAutomation/125//#testresult/a89bc8f5ef93658c","status":"passed","time":{"start":1699923739105,"stop":1699923746958,"duration":7853}},{"uid":"e63363208b8a8f38","reportUrl":"https://Nat754.github.io/StroyremAutomation/124//#testresult/e63363208b8a8f38","status":"passed","time":{"start":1699837525845,"stop":1699837534592,"duration":8747}},{"uid":"563d21e21257a4b1","reportUrl":"https://Nat754.github.io/StroyremAutomation/123//#testresult/563d21e21257a4b1","status":"passed","time":{"start":1699751255147,"stop":1699751263801,"duration":8654}},{"uid":"cc36fedf078ecf36","reportUrl":"https://Nat754.github.io/StroyremAutomation/122//#testresult/cc36fedf078ecf36","status":"passed","time":{"start":1699664749201,"stop":1699664757927,"duration":8726}},{"uid":"9793915d7b0382e","reportUrl":"https://Nat754.github.io/StroyremAutomation/121//#testresult/9793915d7b0382e","status":"passed","time":{"start":1699578180798,"stop":1699578188745,"duration":7947}},{"uid":"383de1d309c2de44","reportUrl":"https://Nat754.github.io/StroyremAutomation/120//#testresult/383de1d309c2de44","status":"passed","time":{"start":1699491735787,"stop":1699491744101,"duration":8314}},{"uid":"2ba537516547aba9","reportUrl":"https://Nat754.github.io/StroyremAutomation/119//#testresult/2ba537516547aba9","status":"passed","time":{"start":1699405530018,"stop":1699405538920,"duration":8902}},{"uid":"805bcfe31883527f","reportUrl":"https://Nat754.github.io/StroyremAutomation/118//#testresult/805bcfe31883527f","status":"passed","time":{"start":1699319085397,"stop":1699319093239,"duration":7842}},{"uid":"fc647e21b0f7886f","reportUrl":"https://Nat754.github.io/StroyremAutomation/117//#testresult/fc647e21b0f7886f","status":"passed","time":{"start":1699232802470,"stop":1699232811410,"duration":8940}},{"uid":"3b7256daf12d09dc","reportUrl":"https://Nat754.github.io/StroyremAutomation/116//#testresult/3b7256daf12d09dc","status":"passed","time":{"start":1699146673749,"stop":1699146682357,"duration":8608}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"c235fe6a7a6a44bb.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"]}