{"uid":"e1b573658a3a6dce","name":"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","historyId":"9c158f83f56fa7b7bac987d3d1def5a4","time":{"start":1703985183723,"stop":1703985185994,"duration":2271},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55c747b9cf83 <unknown>\n#1 0x55c747855cf7 <unknown>\n#2 0x55c7478add92 <unknown>\n#3 0x55c7478ab7f4 <unknown>\n#4 0x55c7478a8894 <unknown>\n#5 0x55c7478a74b9 <unknown>\n#6 0x55c747899313 <unknown>\n#7 0x55c7478cf0b2 <unknown>\n#8 0x55c747898b49 <unknown>\n#9 0x55c7478cf4ce <unknown>\n#10 0x55c7478ee006 <unknown>\n#11 0x55c7478cee53 <unknown>\n#12 0x55c747896dd4 <unknown>\n#13 0x55c7478981de <unknown>\n#14 0x55c747b61531 <unknown>\n#15 0x55c747b65455 <unknown>\n#16 0x55c747b4df55 <unknown>\n#17 0x55c747b660ef <unknown>\n#18 0x55c747b3199f <unknown>\n#19 0x55c747b8a008 <unknown>\n#20 0x55c747b8a1d7 <unknown>\n#21 0x55c747b9c124 <unknown>\n#22 0x7ff64780b044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f2bac1b2450>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f2bab725e90>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2bab726510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55c747b8a1d7 \\\\u003Cunknown>\\\\n#21 0x55c747b9c124 \\\\u003Cunknown>\\\\n#22 0x7ff64780b044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55c747b9cf83 <unknown>\nE       #1 0x55c747855cf7 <unknown>\nE       #2 0x55c7478add92 <unknown>\nE       #3 0x55c7478ab7f4 <unknown>\nE       #4 0x55c7478a8894 <unknown>\nE       #5 0x55c7478a74b9 <unknown>\nE       #6 0x55c747899313 <unknown>\nE       #7 0x55c7478cf0b2 <unknown>\nE       #8 0x55c747898b49 <unknown>\nE       #9 0x55c7478cf4ce <unknown>\nE       #10 0x55c7478ee006 <unknown>\nE       #11 0x55c7478cee53 <unknown>\nE       #12 0x55c747896dd4 <unknown>\nE       #13 0x55c7478981de <unknown>\nE       #14 0x55c747b61531 <unknown>\nE       #15 0x55c747b65455 <unknown>\nE       #16 0x55c747b4df55 <unknown>\nE       #17 0x55c747b660ef <unknown>\nE       #18 0x55c747b3199f <unknown>\nE       #19 0x55c747b8a008 <unknown>\nE       #20 0x55c747b8a1d7 <unknown>\nE       #21 0x55c747b9c124 <unknown>\nE       #22 0x7ff64780b044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1703984037958,"stop":1703984038025,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1703984038025,"stop":1703984038025,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1703985173185,"stop":1703985173959,"duration":774},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1703985173959,"stop":1703985173959,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1703985173959,"stop":1703985183723,"duration":9764},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x55c747b9cf83 <unknown>\n#1 0x55c747855cf7 <unknown>\n#2 0x55c7478add92 <unknown>\n#3 0x55c7478ab7f4 <unknown>\n#4 0x55c7478a8894 <unknown>\n#5 0x55c7478a74b9 <unknown>\n#6 0x55c747899313 <unknown>\n#7 0x55c7478cf0b2 <unknown>\n#8 0x55c747898b49 <unknown>\n#9 0x55c7478cf4ce <unknown>\n#10 0x55c7478ee006 <unknown>\n#11 0x55c7478cee53 <unknown>\n#12 0x55c747896dd4 <unknown>\n#13 0x55c7478981de <unknown>\n#14 0x55c747b61531 <unknown>\n#15 0x55c747b65455 <unknown>\n#16 0x55c747b4df55 <unknown>\n#17 0x55c747b660ef <unknown>\n#18 0x55c747b3199f <unknown>\n#19 0x55c747b8a008 <unknown>\n#20 0x55c747b8a1d7 <unknown>\n#21 0x55c747b9c124 <unknown>\n#22 0x7ff64780b044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f2bac1b2450>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f2bab725e90>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2bab726510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55c747b8a1d7 \\\\u003Cunknown>\\\\n#21 0x55c747b9c124 \\\\u003Cunknown>\\\\n#22 0x7ff64780b044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x55c747b9cf83 <unknown>\nE       #1 0x55c747855cf7 <unknown>\nE       #2 0x55c7478add92 <unknown>\nE       #3 0x55c7478ab7f4 <unknown>\nE       #4 0x55c7478a8894 <unknown>\nE       #5 0x55c7478a74b9 <unknown>\nE       #6 0x55c747899313 <unknown>\nE       #7 0x55c7478cf0b2 <unknown>\nE       #8 0x55c747898b49 <unknown>\nE       #9 0x55c7478cf4ce <unknown>\nE       #10 0x55c7478ee006 <unknown>\nE       #11 0x55c7478cee53 <unknown>\nE       #12 0x55c747896dd4 <unknown>\nE       #13 0x55c7478981de <unknown>\nE       #14 0x55c747b61531 <unknown>\nE       #15 0x55c747b65455 <unknown>\nE       #16 0x55c747b4df55 <unknown>\nE       #17 0x55c747b660ef <unknown>\nE       #18 0x55c747b3199f <unknown>\nE       #19 0x55c747b8a008 <unknown>\nE       #20 0x55c747b8a1d7 <unknown>\nE       #21 0x55c747b9c124 <unknown>\nE       #22 0x7ff64780b044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1703985183723,"stop":1703985183757,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1703985183812,"stop":1703985183842,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1703985184877,"stop":1703985184918,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"a9fe29b1a2aad13","name":"Screenshot","source":"a9fe29b1a2aad13.png","type":"image/png","size":127270},{"uid":"3d9a35c5a2a49092","name":"HTML source","source":"3d9a35c5a2a49092.html","type":"text/html","size":796995}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1703985186167,"stop":1703985186167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1703985186167,"stop":1703985186241,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"6c56d3769fad"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":23,"skipped":0,"passed":113,"unknown":0,"total":136},"items":[{"uid":"671b4beae090022d","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/671b4beae090022d","status":"passed","time":{"start":1703898463049,"stop":1703898474033,"duration":10984}},{"uid":"18368abc98b0e340","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/18368abc98b0e340","status":"passed","time":{"start":1703811900352,"stop":1703811912340,"duration":11988}},{"uid":"8d328827711fd2f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/8d328827711fd2f7","status":"passed","time":{"start":1703725708131,"stop":1703725719187,"duration":11056}},{"uid":"77f9a0b906c1ec6c","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/77f9a0b906c1ec6c","status":"passed","time":{"start":1703639604040,"stop":1703639616387,"duration":12347}},{"uid":"88007855ec5f06c0","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/88007855ec5f06c0","status":"passed","time":{"start":1703552854499,"stop":1703552865560,"duration":11061}},{"uid":"c9203740c68eabc0","reportUrl":"https://Nat754.github.io/StroyremAutomation/166//#testresult/c9203740c68eabc0","status":"passed","time":{"start":1703466964724,"stop":1703466976452,"duration":11728}},{"uid":"6c9c52f464abe090","reportUrl":"https://Nat754.github.io/StroyremAutomation/165//#testresult/6c9c52f464abe090","status":"passed","time":{"start":1703380631485,"stop":1703380643157,"duration":11672}},{"uid":"687bea6848057b7e","reportUrl":"https://Nat754.github.io/StroyremAutomation/164//#testresult/687bea6848057b7e","status":"passed","time":{"start":1703293694201,"stop":1703293705678,"duration":11477}},{"uid":"9d58e9d552b65684","reportUrl":"https://Nat754.github.io/StroyremAutomation/163//#testresult/9d58e9d552b65684","status":"passed","time":{"start":1703207408587,"stop":1703207419637,"duration":11050}},{"uid":"77b9c2f90c9b285d","reportUrl":"https://Nat754.github.io/StroyremAutomation/162//#testresult/77b9c2f90c9b285d","status":"passed","time":{"start":1703121054643,"stop":1703121066074,"duration":11431}},{"uid":"92026d53aeeabbd4","reportUrl":"https://Nat754.github.io/StroyremAutomation/161//#testresult/92026d53aeeabbd4","status":"passed","time":{"start":1703034116659,"stop":1703034128276,"duration":11617}},{"uid":"bdc7f0210f320b43","reportUrl":"https://Nat754.github.io/StroyremAutomation/160//#testresult/bdc7f0210f320b43","status":"passed","time":{"start":1702948223804,"stop":1702948234783,"duration":10979}},{"uid":"f76363fb41302023","reportUrl":"https://Nat754.github.io/StroyremAutomation/159//#testresult/f76363fb41302023","status":"passed","time":{"start":1702861887637,"stop":1702861898378,"duration":10741}},{"uid":"fabe0ab24449cf35","reportUrl":"https://Nat754.github.io/StroyremAutomation/158//#testresult/fabe0ab24449cf35","status":"passed","time":{"start":1702775769339,"stop":1702775781071,"duration":11732}},{"uid":"67923a7c677b985d","reportUrl":"https://Nat754.github.io/StroyremAutomation/157//#testresult/67923a7c677b985d","status":"passed","time":{"start":1702689057233,"stop":1702689068784,"duration":11551}},{"uid":"eef35427f5b77cbf","reportUrl":"https://Nat754.github.io/StroyremAutomation/156//#testresult/eef35427f5b77cbf","status":"passed","time":{"start":1702602750164,"stop":1702602762349,"duration":12185}},{"uid":"c6badea73256ae44","reportUrl":"https://Nat754.github.io/StroyremAutomation/155//#testresult/c6badea73256ae44","status":"passed","time":{"start":1702516101048,"stop":1702516111576,"duration":10528}},{"uid":"b2ffa8b2a48a540a","reportUrl":"https://Nat754.github.io/StroyremAutomation/154//#testresult/b2ffa8b2a48a540a","status":"passed","time":{"start":1702453934129,"stop":1702453945502,"duration":11373}},{"uid":"f6096e446f9e9527","reportUrl":"https://Nat754.github.io/StroyremAutomation/133//#testresult/f6096e446f9e9527","status":"passed","time":{"start":1700615472995,"stop":1700615483467,"duration":10472}},{"uid":"28c4b5e780d77ebc","reportUrl":"https://Nat754.github.io/StroyremAutomation/132//#testresult/28c4b5e780d77ebc","status":"passed","time":{"start":1700529400570,"stop":1700529412435,"duration":11865}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"e1b573658a3a6dce.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"]}