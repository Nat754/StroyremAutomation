{"uid":"b7b9db2d52c1d17b","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke","historyId":"5ec2250188f66239d7a557e2f16d23d1","time":{"start":1705107971676,"stop":1705107973964,"duration":2288},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5641c9a7ef83 <unknown>\n#1 0x5641c9737cf7 <unknown>\n#2 0x5641c978fd92 <unknown>\n#3 0x5641c978d7f4 <unknown>\n#4 0x5641c978a894 <unknown>\n#5 0x5641c97894b9 <unknown>\n#6 0x5641c977b313 <unknown>\n#7 0x5641c97b10b2 <unknown>\n#8 0x5641c977ab49 <unknown>\n#9 0x5641c97b14ce <unknown>\n#10 0x5641c97d0006 <unknown>\n#11 0x5641c97b0e53 <unknown>\n#12 0x5641c9778dd4 <unknown>\n#13 0x5641c977a1de <unknown>\n#14 0x5641c9a43531 <unknown>\n#15 0x5641c9a47455 <unknown>\n#16 0x5641c9a2ff55 <unknown>\n#17 0x5641c9a480ef <unknown>\n#18 0x5641c9a1399f <unknown>\n#19 0x5641c9a6c008 <unknown>\n#20 0x5641c9a6c1d7 <unknown>\n#21 0x5641c9a7e124 <unknown>\n#22 0x7ff1b0d22044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fd08fe92990>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fd08efdbed0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd08ea4c6d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5641c9a6c1d7 \\\\u003Cunknown>\\\\n#21 0x5641c9a7e124 \\\\u003Cunknown>\\\\n#22 0x7ff1b0d22044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5641c9a7ef83 <unknown>\nE       #1 0x5641c9737cf7 <unknown>\nE       #2 0x5641c978fd92 <unknown>\nE       #3 0x5641c978d7f4 <unknown>\nE       #4 0x5641c978a894 <unknown>\nE       #5 0x5641c97894b9 <unknown>\nE       #6 0x5641c977b313 <unknown>\nE       #7 0x5641c97b10b2 <unknown>\nE       #8 0x5641c977ab49 <unknown>\nE       #9 0x5641c97b14ce <unknown>\nE       #10 0x5641c97d0006 <unknown>\nE       #11 0x5641c97b0e53 <unknown>\nE       #12 0x5641c9778dd4 <unknown>\nE       #13 0x5641c977a1de <unknown>\nE       #14 0x5641c9a43531 <unknown>\nE       #15 0x5641c9a47455 <unknown>\nE       #16 0x5641c9a2ff55 <unknown>\nE       #17 0x5641c9a480ef <unknown>\nE       #18 0x5641c9a1399f <unknown>\nE       #19 0x5641c9a6c008 <unknown>\nE       #20 0x5641c9a6c1d7 <unknown>\nE       #21 0x5641c9a7e124 <unknown>\nE       #22 0x7ff1b0d22044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1705107091356,"stop":1705107091422,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1705107091422,"stop":1705107091422,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1705107960119,"stop":1705107960934,"duration":815},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1705107960935,"stop":1705107960935,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1705107960935,"stop":1705107971675,"duration":10740},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=120.0.6099.109)\nStacktrace:\n#0 0x5641c9a7ef83 <unknown>\n#1 0x5641c9737cf7 <unknown>\n#2 0x5641c978fd92 <unknown>\n#3 0x5641c978d7f4 <unknown>\n#4 0x5641c978a894 <unknown>\n#5 0x5641c97894b9 <unknown>\n#6 0x5641c977b313 <unknown>\n#7 0x5641c97b10b2 <unknown>\n#8 0x5641c977ab49 <unknown>\n#9 0x5641c97b14ce <unknown>\n#10 0x5641c97d0006 <unknown>\n#11 0x5641c97b0e53 <unknown>\n#12 0x5641c9778dd4 <unknown>\n#13 0x5641c977a1de <unknown>\n#14 0x5641c9a43531 <unknown>\n#15 0x5641c9a47455 <unknown>\n#16 0x5641c9a2ff55 <unknown>\n#17 0x5641c9a480ef <unknown>\n#18 0x5641c9a1399f <unknown>\n#19 0x5641c9a6c008 <unknown>\n#20 0x5641c9a6c1d7 <unknown>\n#21 0x5641c9a7e124 <unknown>\n#22 0x7ff1b0d22044 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fd08fe92990>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fd08efdbed0>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_3500_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_3500_4999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd08ea4c6d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5641c9a6c1d7 \\\\u003Cunknown>\\\\n#21 0x5641c9a7e124 \\\\u003Cunknown>\\\\n#22 0x7ff1b0d22044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=120.0.6099.109)\nE       Stacktrace:\nE       #0 0x5641c9a7ef83 <unknown>\nE       #1 0x5641c9737cf7 <unknown>\nE       #2 0x5641c978fd92 <unknown>\nE       #3 0x5641c978d7f4 <unknown>\nE       #4 0x5641c978a894 <unknown>\nE       #5 0x5641c97894b9 <unknown>\nE       #6 0x5641c977b313 <unknown>\nE       #7 0x5641c97b10b2 <unknown>\nE       #8 0x5641c977ab49 <unknown>\nE       #9 0x5641c97b14ce <unknown>\nE       #10 0x5641c97d0006 <unknown>\nE       #11 0x5641c97b0e53 <unknown>\nE       #12 0x5641c9778dd4 <unknown>\nE       #13 0x5641c977a1de <unknown>\nE       #14 0x5641c9a43531 <unknown>\nE       #15 0x5641c9a47455 <unknown>\nE       #16 0x5641c9a2ff55 <unknown>\nE       #17 0x5641c9a480ef <unknown>\nE       #18 0x5641c9a1399f <unknown>\nE       #19 0x5641c9a6c008 <unknown>\nE       #20 0x5641c9a6c1d7 <unknown>\nE       #21 0x5641c9a7e124 <unknown>\nE       #22 0x7ff1b0d22044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1705107971676,"stop":1705107971712,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1705107971775,"stop":1705107971806,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1705107972848,"stop":1705107972889,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"221ff872204c2e11","name":"Screenshot","source":"221ff872204c2e11.png","type":"image/png","size":143971},{"uid":"50d2de17038b2c05","name":"HTML source","source":"50d2de17038b2c05.html","type":"text/html","size":739298}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1705107974145,"stop":1705107974145,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1705107974145,"stop":1705107974219,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"26bbeba49f9b"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":5,"skipped":0,"passed":147,"unknown":0,"total":165},"items":[{"uid":"eaca480e2ca69e98","reportUrl":"https://Nat754.github.io/StroyremAutomation/184//#testresult/eaca480e2ca69e98","status":"passed","time":{"start":1705021511687,"stop":1705021520474,"duration":8787}},{"uid":"ea06c27e26ba6b87","reportUrl":"https://Nat754.github.io/StroyremAutomation/183//#testresult/ea06c27e26ba6b87","status":"passed","time":{"start":1704935215160,"stop":1704935224803,"duration":9643}},{"uid":"40a1a752f1ae579f","reportUrl":"https://Nat754.github.io/StroyremAutomation/182//#testresult/40a1a752f1ae579f","status":"passed","time":{"start":1704848824086,"stop":1704848833024,"duration":8938}},{"uid":"a1cc6800a269ef7a","reportUrl":"https://Nat754.github.io/StroyremAutomation/181//#testresult/a1cc6800a269ef7a","status":"passed","time":{"start":1704762223092,"stop":1704762231478,"duration":8386}},{"uid":"94b26d01ee6aecd","reportUrl":"https://Nat754.github.io/StroyremAutomation/180//#testresult/94b26d01ee6aecd","status":"passed","time":{"start":1704675855084,"stop":1704675863431,"duration":8347}},{"uid":"3be066ae80ee2362","reportUrl":"https://Nat754.github.io/StroyremAutomation/179//#testresult/3be066ae80ee2362","status":"passed","time":{"start":1704589816314,"stop":1704589825579,"duration":9265}},{"uid":"aabfcd5f07cb3704","reportUrl":"https://Nat754.github.io/StroyremAutomation/178//#testresult/aabfcd5f07cb3704","status":"passed","time":{"start":1704503069988,"stop":1704503079400,"duration":9412}},{"uid":"112cd17c04c22689","reportUrl":"https://Nat754.github.io/StroyremAutomation/177//#testresult/112cd17c04c22689","status":"passed","time":{"start":1704416581338,"stop":1704416589520,"duration":8182}},{"uid":"61515fdc690bd35","reportUrl":"https://Nat754.github.io/StroyremAutomation/176//#testresult/61515fdc690bd35","status":"passed","time":{"start":1704330178397,"stop":1704330187428,"duration":9031}},{"uid":"1c5d3a3850e119a9","reportUrl":"https://Nat754.github.io/StroyremAutomation/175//#testresult/1c5d3a3850e119a9","status":"passed","time":{"start":1704243828744,"stop":1704243837696,"duration":8952}},{"uid":"54eb2a6c8c11d646","reportUrl":"https://Nat754.github.io/StroyremAutomation/174//#testresult/54eb2a6c8c11d646","status":"passed","time":{"start":1704157261519,"stop":1704157269776,"duration":8257}},{"uid":"c9d508b470ee652c","reportUrl":"https://Nat754.github.io/StroyremAutomation/173//#testresult/c9d508b470ee652c","status":"passed","time":{"start":1704071215573,"stop":1704071223476,"duration":7903}},{"uid":"a60cdc1ef643ce58","reportUrl":"https://Nat754.github.io/StroyremAutomation/172//#testresult/a60cdc1ef643ce58","status":"passed","time":{"start":1703984736825,"stop":1703984744771,"duration":7946}},{"uid":"e74f915de44c81c8","reportUrl":"https://Nat754.github.io/StroyremAutomation/171//#testresult/e74f915de44c81c8","status":"passed","time":{"start":1703898008551,"stop":1703898017083,"duration":8532}},{"uid":"9defc8ec075e1ca3","reportUrl":"https://Nat754.github.io/StroyremAutomation/170//#testresult/9defc8ec075e1ca3","status":"passed","time":{"start":1703811332815,"stop":1703811342456,"duration":9641}},{"uid":"4e4350cbb144535e","reportUrl":"https://Nat754.github.io/StroyremAutomation/169//#testresult/4e4350cbb144535e","status":"passed","time":{"start":1703725253310,"stop":1703725261377,"duration":8067}},{"uid":"2bab3dedac3f6c10","reportUrl":"https://Nat754.github.io/StroyremAutomation/168//#testresult/2bab3dedac3f6c10","status":"passed","time":{"start":1703639036117,"stop":1703639045900,"duration":9783}},{"uid":"d52f994a8c5e861","reportUrl":"https://Nat754.github.io/StroyremAutomation/167//#testresult/d52f994a8c5e861","status":"failed","statusDetails":"AssertionError: ОР: Скидка = 61.39, ФР: скидка = 61.4\nassert 61.4 == 61.39\n +  where 61.39 = round((4093.0 * 0.015), 2)","time":{"start":1703552406661,"stop":1703552414837,"duration":8176}},{"uid":"f87d6997ae0e32d5","reportUrl":"https://Nat754.github.io/StroyremAutomation/166//#testresult/f87d6997ae0e32d5","status":"failed","statusDetails":"AssertionError: ОР: Скидка = 61.39, ФР: скидка = 61.4\nassert 61.4 == 61.39\n +  where 61.39 = round((4093.0 * 0.015), 2)","time":{"start":1703466397880,"stop":1703466407294,"duration":9414}},{"uid":"11a13d262fcbed44","reportUrl":"https://Nat754.github.io/StroyremAutomation/165//#testresult/11a13d262fcbed44","status":"failed","statusDetails":"AssertionError: ОР: Скидка = 61.39, ФР: скидка = 61.4\nassert 61.4 == 61.39\n +  where 61.39 = round((4093.0 * 0.015), 2)","time":{"start":1703380092076,"stop":1703380101295,"duration":9219}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"b7b9db2d52c1d17b.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}