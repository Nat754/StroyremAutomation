{"uid":"abf3857524bdba8c","name":"Авторизация с помощью аккаунта ya.ru","fullName":"tests.test_sign_in.test_sign_in_page.TestSignInPage#test_positive_authorization_first_time_using_YA_smoke","historyId":"dad914aa68b78287aa131957fc42820c","time":{"start":1692579697917,"stop":1692579702111,"duration":4194},"status":"skipped","statusMessage":"XFAIL Появляется капча Яндекса при запуске теста на Github\n\nselenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain: Cookie 'domain' mismatch\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x55f412283e23 <unknown>\n#1 0x55f411fac7a7 <unknown>\n#2 0x55f412035181 <unknown>\n#3 0x55f41200c012 <unknown>\n#4 0x55f412024369 <unknown>\n#5 0x55f41200bde3 <unknown>\n#6 0x55f411fdfa7b <unknown>\n#7 0x55f411fe081e <unknown>\n#8 0x55f412245638 <unknown>\n#9 0x55f412249507 <unknown>\n#10 0x55f412253c4c <unknown>\n#11 0x55f41224a136 <unknown>\n#12 0x55f4122189cf <unknown>\n#13 0x55f41226db98 <unknown>\n#14 0x55f41226dd68 <unknown>\n#15 0x55f41227ccb3 <unknown>\n#16 0x7ff33511b044 <unknown>","statusTrace":"self = <tests.test_sign_in.test_sign_in_page.TestSignInPage object at 0x7fb7759f79d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e95fd64ca466047c3a7200696298fafc\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7fb7764f3ad0>\nopen_sign_in_window = None\n\n    @allure.title(\"Авторизация с помощью аккаунта ya.ru\")\n    @pytest.mark.xfail(reason=\"Появляется капча Яндекса при запуске теста на Github\")\n    @pytest.mark.smoke_test\n    def test_positive_authorization_first_time_using_YA_smoke(self, driver, sign_in_page, open_sign_in_window):\n        sign_in_page.get_ya_ru_auth_icon().click()\n        driver.switch_to.window(driver.window_handles[1])\n        # driver.delete_all_cookies()\n>       driver.add_cookie({'name': 'uniqueuid',\n                           'value': '384528911692006899',\n                           'domain': 'passport.yandex.ru',\n                           'httpOnly': True,\n                           'path': '/',\n                           'expiry': 1723499808,\n                           'sameSite': 'Lax',\n                           'secure': True})\n\ntests/test_sign_in/test_sign_in_page.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:633: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb775a35450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain: Cookie \\'domain\\...\\\\n#14 0x55f41226dd68 \\\\u003Cunknown>\\\\n#15 0x55f41227ccb3 \\\\u003Cunknown>\\\\n#16 0x7ff33511b044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain: Cookie 'domain' mismatch\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x55f412283e23 <unknown>\nE       #1 0x55f411fac7a7 <unknown>\nE       #2 0x55f412035181 <unknown>\nE       #3 0x55f41200c012 <unknown>\nE       #4 0x55f412024369 <unknown>\nE       #5 0x55f41200bde3 <unknown>\nE       #6 0x55f411fdfa7b <unknown>\nE       #7 0x55f411fe081e <unknown>\nE       #8 0x55f412245638 <unknown>\nE       #9 0x55f412249507 <unknown>\nE       #10 0x55f412253c4c <unknown>\nE       #11 0x55f41224a136 <unknown>\nE       #12 0x55f4122189cf <unknown>\nE       #13 0x55f41226db98 <unknown>\nE       #14 0x55f41226dd68 <unknown>\nE       #15 0x55f41227ccb3 <unknown>\nE       #16 0x7ff33511b044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidCookieDomainException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1692578723909,"stop":1692578723976,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1692578723976,"stop":1692578723976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1692579689082,"stop":1692579689877,"duration":795},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup","time":{"start":1692579689877,"stop":1692579689877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"sign_in_page","time":{"start":1692579689878,"stop":1692579697518,"duration":7640},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"open_sign_in_window","time":{"start":1692579697518,"stop":1692579697916,"duration":398},"status":"passed","steps":[{"name":"Нахождение элемента: иконка профиля в хедере","time":{"start":1692579697519,"stop":1692579697533,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL Появляется капча Яндекса при запуске теста на Github\n\nselenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain: Cookie 'domain' mismatch\n  (Session info: headless chrome=116.0.5845.96)\nStacktrace:\n#0 0x55f412283e23 <unknown>\n#1 0x55f411fac7a7 <unknown>\n#2 0x55f412035181 <unknown>\n#3 0x55f41200c012 <unknown>\n#4 0x55f412024369 <unknown>\n#5 0x55f41200bde3 <unknown>\n#6 0x55f411fdfa7b <unknown>\n#7 0x55f411fe081e <unknown>\n#8 0x55f412245638 <unknown>\n#9 0x55f412249507 <unknown>\n#10 0x55f412253c4c <unknown>\n#11 0x55f41224a136 <unknown>\n#12 0x55f4122189cf <unknown>\n#13 0x55f41226db98 <unknown>\n#14 0x55f41226dd68 <unknown>\n#15 0x55f41227ccb3 <unknown>\n#16 0x7ff33511b044 <unknown>","statusTrace":"self = <tests.test_sign_in.test_sign_in_page.TestSignInPage object at 0x7fb7759f79d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e95fd64ca466047c3a7200696298fafc\")>\nsign_in_page = <pages.sign_in_page.SignInPage object at 0x7fb7764f3ad0>\nopen_sign_in_window = None\n\n    @allure.title(\"Авторизация с помощью аккаунта ya.ru\")\n    @pytest.mark.xfail(reason=\"Появляется капча Яндекса при запуске теста на Github\")\n    @pytest.mark.smoke_test\n    def test_positive_authorization_first_time_using_YA_smoke(self, driver, sign_in_page, open_sign_in_window):\n        sign_in_page.get_ya_ru_auth_icon().click()\n        driver.switch_to.window(driver.window_handles[1])\n        # driver.delete_all_cookies()\n>       driver.add_cookie({'name': 'uniqueuid',\n                           'value': '384528911692006899',\n                           'domain': 'passport.yandex.ru',\n                           'httpOnly': True,\n                           'path': '/',\n                           'expiry': 1723499808,\n                           'sameSite': 'Lax',\n                           'secure': True})\n\ntests/test_sign_in/test_sign_in_page.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:633: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb775a35450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain: Cookie \\'domain\\...\\\\n#14 0x55f41226dd68 \\\\u003Cunknown>\\\\n#15 0x55f41227ccb3 \\\\u003Cunknown>\\\\n#16 0x7ff33511b044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain: Cookie 'domain' mismatch\nE         (Session info: headless chrome=116.0.5845.96)\nE       Stacktrace:\nE       #0 0x55f412283e23 <unknown>\nE       #1 0x55f411fac7a7 <unknown>\nE       #2 0x55f412035181 <unknown>\nE       #3 0x55f41200c012 <unknown>\nE       #4 0x55f412024369 <unknown>\nE       #5 0x55f41200bde3 <unknown>\nE       #6 0x55f411fdfa7b <unknown>\nE       #7 0x55f411fe081e <unknown>\nE       #8 0x55f412245638 <unknown>\nE       #9 0x55f412249507 <unknown>\nE       #10 0x55f412253c4c <unknown>\nE       #11 0x55f41224a136 <unknown>\nE       #12 0x55f4122189cf <unknown>\nE       #13 0x55f41226db98 <unknown>\nE       #14 0x55f41226dd68 <unknown>\nE       #15 0x55f41227ccb3 <unknown>\nE       #16 0x7ff33511b044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidCookieDomainException","steps":[{"name":"Нахождение элемента: иконка 'ya.ru' окна авторизации","time":{"start":1692579697917,"stop":1692579697936,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[{"uid":"9022a3c160d8fdb4","name":"Screenshot","source":"9022a3c160d8fdb4.png","type":"image/png","size":384916},{"uid":"ba2646feaef2974a","name":"HTML source","source":"ba2646feaef2974a.html","type":"text/html","size":13822}],"parameters":[],"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1692579702407,"stop":1692579702408,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1692579702408,"stop":1692579702478,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"Sign In Page"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"@pytest.mark.xfail(reason='Появляется капча Яндекса при запуске теста на Github')"},{"name":"parentSuite","value":"tests.test_sign_in"},{"name":"suite","value":"test_sign_in_page"},{"name":"subSuite","value":"TestSignInPage"},{"name":"host","value":"c7237e469f72"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_sign_in.test_sign_in_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":11,"passed":0,"unknown":0,"total":11},"items":[{"uid":"4e41fab74d29dec2","reportUrl":"https://Nat754.github.io/StroyremAutomation/31//#testresult/4e41fab74d29dec2","status":"skipped","statusDetails":"XFAIL Появляется капча Яндекса при запуске теста на Github\n\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"button[data-t='button:clear']\"}\n  (Session info: headless chrome=116.0.5845.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x55d959b85e23 <unknown>\n#1 0x55d9598ae7a7 <unknown>\n#2 0x55d9598ed1d3 <unknown>\n#3 0x55d9598ed2c1 <unknown>\n#4 0x55d959928a04 <unknown>\n#5 0x55d95990e03d <unknown>\n#6 0x55d959926369 <unknown>\n#7 0x55d95990dde3 <unknown>\n#8 0x55d9598e1a7b <unknown>\n#9 0x55d9598e281e <unknown>\n#10 0x55d959b47638 <unknown>\n#11 0x55d959b4b507 <unknown>\n#12 0x55d959b55c4c <unknown>\n#13 0x55d959b4c136 <unknown>\n#14 0x55d959b1a9cf <unknown>\n#15 0x55d959b6fb98 <unknown>\n#16 0x55d959b6fd68 <unknown>\n#17 0x55d959b7ecb3 <unknown>\n#18 0x7f92ba9ac044 <unknown>","time":{"start":1692568154813,"stop":1692568159666,"duration":4853}},{"uid":"e06c81e3de738221","reportUrl":"https://Nat754.github.io/StroyremAutomation/32//#testresult/e06c81e3de738221","status":"skipped","statusDetails":"XFAIL Появляется капча Яндекса при запуске теста на Github\n\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"button[data-t='button:clear']\"}\n  (Session info: headless chrome=116.0.5845.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x555f358bee23 <unknown>\n#1 0x555f355e77a7 <unknown>\n#2 0x555f356261d3 <unknown>\n#3 0x555f356262c1 <unknown>\n#4 0x555f35661a04 <unknown>\n#5 0x555f3564703d <unknown>\n#6 0x555f3565f369 <unknown>\n#7 0x555f35646de3 <unknown>\n#8 0x555f3561aa7b <unknown>\n#9 0x555f3561b81e <unknown>\n#10 0x555f35880638 <unknown>\n#11 0x555f35884507 <unknown>\n#12 0x555f3588ec4c <unknown>\n#13 0x555f35885136 <unknown>\n#14 0x555f358539cf <unknown>\n#15 0x555f358a8b98 <unknown>\n#16 0x555f358a8d68 <unknown>\n#17 0x555f358b7cb3 <unknown>\n#18 0x7f9948d46044 <unknown>","time":{"start":1692566040162,"stop":1692566043722,"duration":3560}},{"uid":"73645e69eb5bb47","reportUrl":"https://Nat754.github.io/StroyremAutomation/27//#testresult/73645e69eb5bb47","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nselenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5569c3158613 <unknown>\n#1 0x5569c2e84537 <unknown>\n#2 0x5569c2ec2f53 <unknown>\n#3 0x5569c2ec3041 <unknown>\n#4 0x5569c2efe2a4 <unknown>\n#5 0x5569c2ee3a5d <unknown>\n#6 0x5569c2efbd09 <unknown>\n#7 0x5569c2ee3803 <unknown>\n#8 0x5569c2eb768b <unknown>\n#9 0x5569c2eb842e <unknown>\n#10 0x5569c3119c28 <unknown>\n#11 0x5569c311daf7 <unknown>\n#12 0x5569c312801c <unknown>\n#13 0x5569c311e723 <unknown>\n#14 0x5569c30ed457 <unknown>\n#15 0x5569c3142628 <unknown>\n#16 0x5569c31427b7 <unknown>\n#17 0x5569c3151483 <unknown>\n#18 0x7f8c3e003044 <unknown>","time":{"start":1692061276948,"stop":1692061292110,"duration":15162}},{"uid":"3d115223f2dc23fa","reportUrl":"https://Nat754.github.io/StroyremAutomation/26//#testresult/3d115223f2dc23fa","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691974691858,"stop":1691974696052,"duration":4194}},{"uid":"19b1b3388e3cb679","reportUrl":"https://Nat754.github.io/StroyremAutomation/25//#testresult/19b1b3388e3cb679","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nselenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f7a004a613 <unknown>\n#1 0x55f79fd76537 <unknown>\n#2 0x55f79fdb4f53 <unknown>\n#3 0x55f79fdb5041 <unknown>\n#4 0x55f79fdf02a4 <unknown>\n#5 0x55f79fdd5a5d <unknown>\n#6 0x55f79fdedd09 <unknown>\n#7 0x55f79fdd5803 <unknown>\n#8 0x55f79fda968b <unknown>\n#9 0x55f79fdaa42e <unknown>\n#10 0x55f7a000bc28 <unknown>\n#11 0x55f7a000faf7 <unknown>\n#12 0x55f7a001a01c <unknown>\n#13 0x55f7a0010723 <unknown>\n#14 0x55f79ffdf457 <unknown>\n#15 0x55f7a0034628 <unknown>\n#16 0x55f7a00347b7 <unknown>\n#17 0x55f7a0043483 <unknown>\n#18 0x7fa6ae835044 <unknown>","time":{"start":1691888360864,"stop":1691888376116,"duration":15252}},{"uid":"5bd80ea7e4965bf6","reportUrl":"https://Nat754.github.io/StroyremAutomation/24//#testresult/5bd80ea7e4965bf6","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691801676097,"stop":1691801680068,"duration":3971}},{"uid":"f9b2c4e7ba9fdc77","reportUrl":"https://Nat754.github.io/StroyremAutomation/23//#testresult/f9b2c4e7ba9fdc77","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691715329548,"stop":1691715333295,"duration":3747}},{"uid":"3c7252dcb5cf5f5e","reportUrl":"https://Nat754.github.io/StroyremAutomation/22//#testresult/3c7252dcb5cf5f5e","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691629659992,"stop":1691629663571,"duration":3579}},{"uid":"da648ad2af6e376f","reportUrl":"https://Nat754.github.io/StroyremAutomation/21//#testresult/da648ad2af6e376f","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691543210401,"stop":1691543214966,"duration":4565}},{"uid":"2563309a9901312a","reportUrl":"https://Nat754.github.io/StroyremAutomation/20//#testresult/2563309a9901312a","status":"skipped","statusDetails":"XFAIL хранение логинов/паролей не реализовано\n\nNameError: name 'credentials' is not defined","time":{"start":1691456779790,"stop":1691456784441,"duration":4651}}]},"tags":["@pytest.mark.xfail(reason='Появляется капча Яндекса при запуске теста на Github')","smoke_test"]},"source":"abf3857524bdba8c.json","parameterValues":[]}