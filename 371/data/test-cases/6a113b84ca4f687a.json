{"uid":"6a113b84ca4f687a","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke","historyId":"56dc95032881057b0b8ffab5dc914f14","time":{"start":1721178730599,"stop":1721178732873,"duration":2274},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x563e29a64c5a <unknown>\n#1 0x563e29747e2c <unknown>\n#2 0x563e2979b406 <unknown>\n#3 0x563e29799246 <unknown>\n#4 0x563e29796c27 <unknown>\n#5 0x563e29795a60 <unknown>\n#6 0x563e2978915f <unknown>\n#7 0x563e297b75c2 <unknown>\n#8 0x563e29788ad9 <unknown>\n#9 0x563e297b778e <unknown>\n#10 0x563e297d6303 <unknown>\n#11 0x563e297b7363 <unknown>\n#12 0x563e29787247 <unknown>\n#13 0x563e29787b9e <unknown>\n#14 0x563e29a2b22b <unknown>\n#15 0x563e29a2f2d1 <unknown>\n#16 0x563e29a16ade <unknown>\n#17 0x563e29a2fe32 <unknown>\n#18 0x563e299fb77f <unknown>\n#19 0x563e29a54618 <unknown>\n#20 0x563e29a547f0 <unknown>\n#21 0x563e29a63d8c <unknown>\n#22 0x7fdc75575134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fcea56805d0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fcea37ba650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcea56a8b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x563e29a547f0 \\\\u003Cunknown>\\\\n#21 0x563e29a63d8c \\\\u003Cunknown>\\\\n#22 0x7fdc75575134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x563e29a64c5a <unknown>\nE       #1 0x563e29747e2c <unknown>\nE       #2 0x563e2979b406 <unknown>\nE       #3 0x563e29799246 <unknown>\nE       #4 0x563e29796c27 <unknown>\nE       #5 0x563e29795a60 <unknown>\nE       #6 0x563e2978915f <unknown>\nE       #7 0x563e297b75c2 <unknown>\nE       #8 0x563e29788ad9 <unknown>\nE       #9 0x563e297b778e <unknown>\nE       #10 0x563e297d6303 <unknown>\nE       #11 0x563e297b7363 <unknown>\nE       #12 0x563e29787247 <unknown>\nE       #13 0x563e29787b9e <unknown>\nE       #14 0x563e29a2b22b <unknown>\nE       #15 0x563e29a2f2d1 <unknown>\nE       #16 0x563e29a16ade <unknown>\nE       #17 0x563e29a2fe32 <unknown>\nE       #18 0x563e299fb77f <unknown>\nE       #19 0x563e29a54618 <unknown>\nE       #20 0x563e29a547f0 <unknown>\nE       #21 0x563e29a63d8c <unknown>\nE       #22 0x7fdc75575134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721177789149,"stop":1721177789218,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1721177789218,"stop":1721177789219,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1721178721127,"stop":1721178721820,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1721178721820,"stop":1721178730598,"duration":8778},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1721178721820,"stop":1721178721820,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x563e29a64c5a <unknown>\n#1 0x563e29747e2c <unknown>\n#2 0x563e2979b406 <unknown>\n#3 0x563e29799246 <unknown>\n#4 0x563e29796c27 <unknown>\n#5 0x563e29795a60 <unknown>\n#6 0x563e2978915f <unknown>\n#7 0x563e297b75c2 <unknown>\n#8 0x563e29788ad9 <unknown>\n#9 0x563e297b778e <unknown>\n#10 0x563e297d6303 <unknown>\n#11 0x563e297b7363 <unknown>\n#12 0x563e29787247 <unknown>\n#13 0x563e29787b9e <unknown>\n#14 0x563e29a2b22b <unknown>\n#15 0x563e29a2f2d1 <unknown>\n#16 0x563e29a16ade <unknown>\n#17 0x563e29a2fe32 <unknown>\n#18 0x563e299fb77f <unknown>\n#19 0x563e29a54618 <unknown>\n#20 0x563e29a547f0 <unknown>\n#21 0x563e29a63d8c <unknown>\n#22 0x7fdc75575134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fcea56805d0>\nlink = 'https://stroyrem-nn.ru/catalog/action'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fcea37ba650>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ACTION_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ACTION_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_there_is_no_discount_for_unauthorized_customer_on_order_page_for_red_prices_smoke(\n            self, link, product_page_open):\n        product_page_open.get_in_stock_products_link().click()\n        time.sleep(1)\n>       product_page_open.get_text_red_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcea56a8b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x563e29a547f0 \\\\u003Cunknown>\\\\n#21 0x563e29a63d8c \\\\u003Cunknown>\\\\n#22 0x7fdc75575134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label for=\"discounted_products\" class=\"text-red\">...</label> is not clickable at point (265, 18). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x563e29a64c5a <unknown>\nE       #1 0x563e29747e2c <unknown>\nE       #2 0x563e2979b406 <unknown>\nE       #3 0x563e29799246 <unknown>\nE       #4 0x563e29796c27 <unknown>\nE       #5 0x563e29795a60 <unknown>\nE       #6 0x563e2978915f <unknown>\nE       #7 0x563e297b75c2 <unknown>\nE       #8 0x563e29788ad9 <unknown>\nE       #9 0x563e297b778e <unknown>\nE       #10 0x563e297d6303 <unknown>\nE       #11 0x563e297b7363 <unknown>\nE       #12 0x563e29787247 <unknown>\nE       #13 0x563e29787b9e <unknown>\nE       #14 0x563e29a2b22b <unknown>\nE       #15 0x563e29a2f2d1 <unknown>\nE       #16 0x563e29a16ade <unknown>\nE       #17 0x563e29a2fe32 <unknown>\nE       #18 0x563e299fb77f <unknown>\nE       #19 0x563e29a54618 <unknown>\nE       #20 0x563e29a547f0 <unknown>\nE       #21 0x563e29a63d8c <unknown>\nE       #22 0x7fdc75575134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1721178730599,"stop":1721178730661,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'Красная цена!'","time":{"start":1721178731737,"stop":1721178731780,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"4a301e828271f93c","name":"Screenshot","source":"4a301e828271f93c.png","type":"image/png","size":211683},{"uid":"11a49d1e87cf78cb","name":"HTML source","source":"11a49d1e87cf78cb.html","type":"text/html","size":890392}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1721178733062,"stop":1721178733062,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1721178733063,"stop":1721178733141,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"6651c47149d4"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/action'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":42,"unknown":0,"total":49},"items":[{"uid":"5edf39a5fba5546f","reportUrl":"https://Nat754.github.io/StroyremAutomation/370//#testresult/5edf39a5fba5546f","status":"passed","time":{"start":1721092538002,"stop":1721092550659,"duration":12657}},{"uid":"749360b4e7a07fa","reportUrl":"https://Nat754.github.io/StroyremAutomation/369//#testresult/749360b4e7a07fa","status":"passed","time":{"start":1721006269697,"stop":1721006282778,"duration":13081}},{"uid":"b370d41d4f49b525","reportUrl":"https://Nat754.github.io/StroyremAutomation/368//#testresult/b370d41d4f49b525","status":"passed","time":{"start":1720919804710,"stop":1720919815990,"duration":11280}},{"uid":"ad0685f470ab835c","reportUrl":"https://Nat754.github.io/StroyremAutomation/367//#testresult/ad0685f470ab835c","status":"passed","time":{"start":1720833100206,"stop":1720833112800,"duration":12594}},{"uid":"a0bfb6b054d222ed","reportUrl":"https://Nat754.github.io/StroyremAutomation/366//#testresult/a0bfb6b054d222ed","status":"passed","time":{"start":1720746938080,"stop":1720746950550,"duration":12470}},{"uid":"a4649cbb8b4e8608","reportUrl":"https://Nat754.github.io/StroyremAutomation/365//#testresult/a4649cbb8b4e8608","status":"passed","time":{"start":1720660421569,"stop":1720660434608,"duration":13039}},{"uid":"ae502f045a60fd82","reportUrl":"https://Nat754.github.io/StroyremAutomation/364//#testresult/ae502f045a60fd82","status":"passed","time":{"start":1720574022091,"stop":1720574034761,"duration":12670}},{"uid":"424057382072ad67","reportUrl":"https://Nat754.github.io/StroyremAutomation/363//#testresult/424057382072ad67","status":"passed","time":{"start":1720487687626,"stop":1720487701255,"duration":13629}},{"uid":"907ec47130468d2b","reportUrl":"https://Nat754.github.io/StroyremAutomation/362//#testresult/907ec47130468d2b","status":"passed","time":{"start":1720401157639,"stop":1720401169978,"duration":12339}},{"uid":"9c71a425dc644f1","reportUrl":"https://Nat754.github.io/StroyremAutomation/361//#testresult/9c71a425dc644f1","status":"passed","time":{"start":1720314922945,"stop":1720314934711,"duration":11766}},{"uid":"b5ea294676695237","reportUrl":"https://Nat754.github.io/StroyremAutomation/360//#testresult/b5ea294676695237","status":"passed","time":{"start":1720228232905,"stop":1720228245964,"duration":13059}},{"uid":"66b489a13e4d45df","reportUrl":"https://Nat754.github.io/StroyremAutomation/359//#testresult/66b489a13e4d45df","status":"passed","time":{"start":1720141836529,"stop":1720141848670,"duration":12141}},{"uid":"f43fece82f0cf55e","reportUrl":"https://Nat754.github.io/StroyremAutomation/358//#testresult/f43fece82f0cf55e","status":"passed","time":{"start":1720055503810,"stop":1720055516322,"duration":12512}},{"uid":"e67d941a9a3a7d0c","reportUrl":"https://Nat754.github.io/StroyremAutomation/357//#testresult/e67d941a9a3a7d0c","status":"passed","time":{"start":1719969154563,"stop":1719969167261,"duration":12698}},{"uid":"42d5f3bdad2338f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/356//#testresult/42d5f3bdad2338f7","status":"passed","time":{"start":1719882745170,"stop":1719882757196,"duration":12026}},{"uid":"4e44b20c131d7ace","reportUrl":"https://Nat754.github.io/StroyremAutomation/355//#testresult/4e44b20c131d7ace","status":"passed","time":{"start":1719796585364,"stop":1719796596718,"duration":11354}},{"uid":"4b72b7b20abdb9e3","reportUrl":"https://Nat754.github.io/StroyremAutomation/354//#testresult/4b72b7b20abdb9e3","status":"passed","time":{"start":1719710106361,"stop":1719710119065,"duration":12704}},{"uid":"cf7b680051944f50","reportUrl":"https://Nat754.github.io/StroyremAutomation/353//#testresult/cf7b680051944f50","status":"passed","time":{"start":1719623388309,"stop":1719623400483,"duration":12174}},{"uid":"1afff86a1209db04","reportUrl":"https://Nat754.github.io/StroyremAutomation/352//#testresult/1afff86a1209db04","status":"passed","time":{"start":1719537264527,"stop":1719537276807,"duration":12280}},{"uid":"ca2d54208bddddf7","reportUrl":"https://Nat754.github.io/StroyremAutomation/351//#testresult/ca2d54208bddddf7","status":"passed","time":{"start":1719450692689,"stop":1719450704350,"duration":11661}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"6a113b84ca4f687a.json","parameterValues":["'https://stroyrem-nn.ru/catalog/action'"]}