{"uid":"706abfa803279a79","name":"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke","historyId":"20a229ea56dbfac299ce8155fae6537d","time":{"start":1722387909347,"stop":1722387911611,"duration":2264},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x55ba8179c71a <unknown>\n#1 0x55ba8146d640 <unknown>\n#2 0x55ba814c3926 <unknown>\n#3 0x55ba814c1836 <unknown>\n#4 0x55ba814bf2b7 <unknown>\n#5 0x55ba814be15c <unknown>\n#6 0x55ba814b1c26 <unknown>\n#7 0x55ba814df8e2 <unknown>\n#8 0x55ba814b15d9 <unknown>\n#9 0x55ba814dfaae <unknown>\n#10 0x55ba814fe08a <unknown>\n#11 0x55ba814df683 <unknown>\n#12 0x55ba814afd71 <unknown>\n#13 0x55ba814b07de <unknown>\n#14 0x55ba817642ab <unknown>\n#15 0x55ba81768242 <unknown>\n#16 0x55ba81751665 <unknown>\n#17 0x55ba81768dd2 <unknown>\n#18 0x55ba817362af <unknown>\n#19 0x55ba8178beb8 <unknown>\n#20 0x55ba8178c090 <unknown>\n#21 0x55ba8179b4ec <unknown>\n#22 0x7f4fdda5f134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f9c09bf9a10>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f9c09342690>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9c09bc2810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ba8178c090 \\\\u003Cunknown>\\\\n#21 0x55ba8179b4ec \\\\u003Cunknown>\\\\n#22 0x7f4fdda5f134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=127.0.6533.88)\nE       Stacktrace:\nE       #0 0x55ba8179c71a <unknown>\nE       #1 0x55ba8146d640 <unknown>\nE       #2 0x55ba814c3926 <unknown>\nE       #3 0x55ba814c1836 <unknown>\nE       #4 0x55ba814bf2b7 <unknown>\nE       #5 0x55ba814be15c <unknown>\nE       #6 0x55ba814b1c26 <unknown>\nE       #7 0x55ba814df8e2 <unknown>\nE       #8 0x55ba814b15d9 <unknown>\nE       #9 0x55ba814dfaae <unknown>\nE       #10 0x55ba814fe08a <unknown>\nE       #11 0x55ba814df683 <unknown>\nE       #12 0x55ba814afd71 <unknown>\nE       #13 0x55ba814b07de <unknown>\nE       #14 0x55ba817642ab <unknown>\nE       #15 0x55ba81768242 <unknown>\nE       #16 0x55ba81751665 <unknown>\nE       #17 0x55ba81768dd2 <unknown>\nE       #18 0x55ba817362af <unknown>\nE       #19 0x55ba8178beb8 <unknown>\nE       #20 0x55ba8178c090 <unknown>\nE       #21 0x55ba8179b4ec <unknown>\nE       #22 0x7f4fdda5f134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1722386774894,"stop":1722386774964,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1722386774965,"stop":1722386774965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1722387900348,"stop":1722387901044,"duration":696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1722387901044,"stop":1722387901044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1722387901044,"stop":1722387909346,"duration":8302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=127.0.6533.88)\nStacktrace:\n#0 0x55ba8179c71a <unknown>\n#1 0x55ba8146d640 <unknown>\n#2 0x55ba814c3926 <unknown>\n#3 0x55ba814c1836 <unknown>\n#4 0x55ba814bf2b7 <unknown>\n#5 0x55ba814be15c <unknown>\n#6 0x55ba814b1c26 <unknown>\n#7 0x55ba814df8e2 <unknown>\n#8 0x55ba814b15d9 <unknown>\n#9 0x55ba814dfaae <unknown>\n#10 0x55ba814fe08a <unknown>\n#11 0x55ba814df683 <unknown>\n#12 0x55ba814afd71 <unknown>\n#13 0x55ba814b07de <unknown>\n#14 0x55ba817642ab <unknown>\n#15 0x55ba81768242 <unknown>\n#16 0x55ba81751665 <unknown>\n#17 0x55ba81768dd2 <unknown>\n#18 0x55ba817362af <unknown>\n#19 0x55ba8178beb8 <unknown>\n#20 0x55ba8178c090 <unknown>\n#21 0x55ba8179b4ec <unknown>\n#22 0x7f4fdda5f134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f9c09bf9a10>\nlink = 'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f9c09342690>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{SHLIFOVALNYE_MASHINY_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_3500_to_4999rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(3500)\n        product_page_open.get_field_price_last().send_keys(4999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9c09bc2810>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ba8178c090 \\\\u003Cunknown>\\\\n#21 0x55ba8179b4ec \\\\u003Cunknown>\\\\n#22 0x7f4fdda5f134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=127.0.6533.88)\nE       Stacktrace:\nE       #0 0x55ba8179c71a <unknown>\nE       #1 0x55ba8146d640 <unknown>\nE       #2 0x55ba814c3926 <unknown>\nE       #3 0x55ba814c1836 <unknown>\nE       #4 0x55ba814bf2b7 <unknown>\nE       #5 0x55ba814be15c <unknown>\nE       #6 0x55ba814b1c26 <unknown>\nE       #7 0x55ba814df8e2 <unknown>\nE       #8 0x55ba814b15d9 <unknown>\nE       #9 0x55ba814dfaae <unknown>\nE       #10 0x55ba814fe08a <unknown>\nE       #11 0x55ba814df683 <unknown>\nE       #12 0x55ba814afd71 <unknown>\nE       #13 0x55ba814b07de <unknown>\nE       #14 0x55ba817642ab <unknown>\nE       #15 0x55ba81768242 <unknown>\nE       #16 0x55ba81751665 <unknown>\nE       #17 0x55ba81768dd2 <unknown>\nE       #18 0x55ba817362af <unknown>\nE       #19 0x55ba8178beb8 <unknown>\nE       #20 0x55ba8178c090 <unknown>\nE       #21 0x55ba8179b4ec <unknown>\nE       #22 0x7f4fdda5f134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1722387909347,"stop":1722387909378,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1722387909445,"stop":1722387909474,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1722387910513,"stop":1722387910553,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"f28fdaf00362934c","name":"Screenshot","source":"f28fdaf00362934c.png","type":"image/png","size":88583},{"uid":"f4a371c6ce0769f1","name":"HTML source","source":"f4a371c6ce0769f1.html","type":"text/html","size":688416}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1722387911790,"stop":1722387911790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1722387911791,"stop":1722387911863,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"63e36e0b95b4"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":2,"skipped":0,"passed":46,"unknown":0,"total":63},"items":[{"uid":"7c774b17e2742244","reportUrl":"https://Nat754.github.io/StroyremAutomation/384//#testresult/7c774b17e2742244","status":"passed","time":{"start":1722302108756,"stop":1722302120384,"duration":11628}},{"uid":"d4cfbfe6745f15e3","reportUrl":"https://Nat754.github.io/StroyremAutomation/383//#testresult/d4cfbfe6745f15e3","status":"passed","time":{"start":1722215828490,"stop":1722215840368,"duration":11878}},{"uid":"bc5d03e28de394a0","reportUrl":"https://Nat754.github.io/StroyremAutomation/382//#testresult/bc5d03e28de394a0","status":"passed","time":{"start":1722129656560,"stop":1722129669310,"duration":12750}},{"uid":"bc7708c8e49cd7d1","reportUrl":"https://Nat754.github.io/StroyremAutomation/381//#testresult/bc7708c8e49cd7d1","status":"passed","time":{"start":1722042897906,"stop":1722042909836,"duration":11930}},{"uid":"521647f3c2cddda9","reportUrl":"https://Nat754.github.io/StroyremAutomation/380//#testresult/521647f3c2cddda9","status":"passed","time":{"start":1721956506098,"stop":1721956518794,"duration":12696}},{"uid":"ea20326c5208a565","reportUrl":"https://Nat754.github.io/StroyremAutomation/379//#testresult/ea20326c5208a565","status":"passed","time":{"start":1721870415610,"stop":1721870429490,"duration":13880}},{"uid":"5a1d6cb297d7bf86","reportUrl":"https://Nat754.github.io/StroyremAutomation/378//#testresult/5a1d6cb297d7bf86","status":"passed","time":{"start":1721784041337,"stop":1721784054093,"duration":12756}},{"uid":"58aebb5d7795c3de","reportUrl":"https://Nat754.github.io/StroyremAutomation/377//#testresult/58aebb5d7795c3de","status":"passed","time":{"start":1721697560279,"stop":1721697572722,"duration":12443}},{"uid":"5038848006d81232","reportUrl":"https://Nat754.github.io/StroyremAutomation/376//#testresult/5038848006d81232","status":"passed","time":{"start":1721611317582,"stop":1721611331136,"duration":13554}},{"uid":"951c3081105f9748","reportUrl":"https://Nat754.github.io/StroyremAutomation/375//#testresult/951c3081105f9748","status":"passed","time":{"start":1721524761100,"stop":1721524772137,"duration":11037}},{"uid":"8cc1da66649ee2ef","reportUrl":"https://Nat754.github.io/StroyremAutomation/374//#testresult/8cc1da66649ee2ef","status":"passed","time":{"start":1721438258133,"stop":1721438269857,"duration":11724}},{"uid":"a4c00beeea79d4d7","reportUrl":"https://Nat754.github.io/StroyremAutomation/373//#testresult/a4c00beeea79d4d7","status":"passed","time":{"start":1721351985362,"stop":1721351997652,"duration":12290}},{"uid":"67f6d7e7f80f79e9","reportUrl":"https://Nat754.github.io/StroyremAutomation/372//#testresult/67f6d7e7f80f79e9","status":"passed","time":{"start":1721265496365,"stop":1721265509574,"duration":13209}},{"uid":"1bf7ba0c96c5bbb2","reportUrl":"https://Nat754.github.io/StroyremAutomation/371//#testresult/1bf7ba0c96c5bbb2","status":"passed","time":{"start":1721178925990,"stop":1721178937366,"duration":11376}},{"uid":"a421a688b12585a9","reportUrl":"https://Nat754.github.io/StroyremAutomation/370//#testresult/a421a688b12585a9","status":"passed","time":{"start":1721092778170,"stop":1721092790239,"duration":12069}},{"uid":"14af9599b27293d2","reportUrl":"https://Nat754.github.io/StroyremAutomation/369//#testresult/14af9599b27293d2","status":"passed","time":{"start":1721006505126,"stop":1721006516977,"duration":11851}},{"uid":"42f729dec32a2232","reportUrl":"https://Nat754.github.io/StroyremAutomation/368//#testresult/42f729dec32a2232","status":"passed","time":{"start":1720919999432,"stop":1720920011708,"duration":12276}},{"uid":"bf59851b7a90586a","reportUrl":"https://Nat754.github.io/StroyremAutomation/367//#testresult/bf59851b7a90586a","status":"passed","time":{"start":1720833286629,"stop":1720833298931,"duration":12302}},{"uid":"be0fb38b586737a","reportUrl":"https://Nat754.github.io/StroyremAutomation/366//#testresult/be0fb38b586737a","status":"passed","time":{"start":1720747177338,"stop":1720747189427,"duration":12089}},{"uid":"b6b439e35955be9f","reportUrl":"https://Nat754.github.io/StroyremAutomation/365//#testresult/b6b439e35955be9f","status":"passed","time":{"start":1720660646810,"stop":1720660658513,"duration":11703}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"706abfa803279a79.json","parameterValues":["'https://stroyrem-nn.ru/catalog/shlifovalnye-mashiny'"]}