{"uid":"5e1d52b4b8f6d26e","name":"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","historyId":"9c158f83f56fa7b7bac987d3d1def5a4","time":{"start":1721006651172,"stop":1721006952447,"duration":301275},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome-headless-shell=126.0.6478.126)\nStacktrace:\n#0 0x563dc1a18c7a <unknown>\n#1 0x563dc16fbe2c <unknown>\n#2 0x563dc16e31a6 <unknown>\n#3 0x563dc16e2d85 <unknown>\n#4 0x563dc16e0cc6 <unknown>\n#5 0x563dc16e133f <unknown>\n#6 0x563dc16f1c67 <unknown>\n#7 0x563dc17081be <unknown>\n#8 0x563dc170d8ab <unknown>\n#9 0x563dc16e1a8a <unknown>\n#10 0x563dc170803e <unknown>\n#11 0x563dc178a679 <unknown>\n#12 0x563dc176b363 <unknown>\n#13 0x563dc173b247 <unknown>\n#14 0x563dc173bb9e <unknown>\n#15 0x563dc19df24b <unknown>\n#16 0x563dc19e32f1 <unknown>\n#17 0x563dc19caafe <unknown>\n#18 0x563dc19e3e52 <unknown>\n#19 0x563dc19af79f <unknown>\n#20 0x563dc1a08638 <unknown>\n#21 0x563dc1a08810 <unknown>\n#22 0x563dc1a17dac <unknown>\n#23 0x7f0688669134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff820a18210>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff820f7b550>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff820a19350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x563dc1a08810 \\\\u003Cunknown>\\\\n#22 0x563dc1a17dac \\\\u003Cunknown>\\\\n#23 0x7f0688669134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome-headless-shell=126.0.6478.126)\nE       Stacktrace:\nE       #0 0x563dc1a18c7a <unknown>\nE       #1 0x563dc16fbe2c <unknown>\nE       #2 0x563dc16e31a6 <unknown>\nE       #3 0x563dc16e2d85 <unknown>\nE       #4 0x563dc16e0cc6 <unknown>\nE       #5 0x563dc16e133f <unknown>\nE       #6 0x563dc16f1c67 <unknown>\nE       #7 0x563dc17081be <unknown>\nE       #8 0x563dc170d8ab <unknown>\nE       #9 0x563dc16e1a8a <unknown>\nE       #10 0x563dc170803e <unknown>\nE       #11 0x563dc178a679 <unknown>\nE       #12 0x563dc176b363 <unknown>\nE       #13 0x563dc173b247 <unknown>\nE       #14 0x563dc173bb9e <unknown>\nE       #15 0x563dc19df24b <unknown>\nE       #16 0x563dc19e32f1 <unknown>\nE       #17 0x563dc19caafe <unknown>\nE       #18 0x563dc19e3e52 <unknown>\nE       #19 0x563dc19af79f <unknown>\nE       #20 0x563dc1a08638 <unknown>\nE       #21 0x563dc1a08810 <unknown>\nE       #22 0x563dc1a17dac <unknown>\nE       #23 0x7f0688669134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721005068619,"stop":1721005068686,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1721005068686,"stop":1721005068686,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1721006635638,"stop":1721006636331,"duration":693},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1721006636331,"stop":1721006651172,"duration":14841},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1721006636331,"stop":1721006636331,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome-headless-shell=126.0.6478.126)\nStacktrace:\n#0 0x563dc1a18c7a <unknown>\n#1 0x563dc16fbe2c <unknown>\n#2 0x563dc16e31a6 <unknown>\n#3 0x563dc16e2d85 <unknown>\n#4 0x563dc16e0cc6 <unknown>\n#5 0x563dc16e133f <unknown>\n#6 0x563dc16f1c67 <unknown>\n#7 0x563dc17081be <unknown>\n#8 0x563dc170d8ab <unknown>\n#9 0x563dc16e1a8a <unknown>\n#10 0x563dc170803e <unknown>\n#11 0x563dc178a679 <unknown>\n#12 0x563dc176b363 <unknown>\n#13 0x563dc173b247 <unknown>\n#14 0x563dc173bb9e <unknown>\n#15 0x563dc19df24b <unknown>\n#16 0x563dc19e32f1 <unknown>\n#17 0x563dc19caafe <unknown>\n#18 0x563dc19e3e52 <unknown>\n#19 0x563dc19af79f <unknown>\n#20 0x563dc1a08638 <unknown>\n#21 0x563dc1a08810 <unknown>\n#22 0x563dc1a17dac <unknown>\n#23 0x7f0688669134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7ff820a18210>\nlink = 'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7ff820f7b550>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff820a19350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\\\n#21 0x563dc1a08810 \\\\u003Cunknown>\\\\n#22 0x563dc1a17dac \\\\u003Cunknown>\\\\n#23 0x7f0688669134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome-headless-shell=126.0.6478.126)\nE       Stacktrace:\nE       #0 0x563dc1a18c7a <unknown>\nE       #1 0x563dc16fbe2c <unknown>\nE       #2 0x563dc16e31a6 <unknown>\nE       #3 0x563dc16e2d85 <unknown>\nE       #4 0x563dc16e0cc6 <unknown>\nE       #5 0x563dc16e133f <unknown>\nE       #6 0x563dc16f1c67 <unknown>\nE       #7 0x563dc17081be <unknown>\nE       #8 0x563dc170d8ab <unknown>\nE       #9 0x563dc16e1a8a <unknown>\nE       #10 0x563dc170803e <unknown>\nE       #11 0x563dc178a679 <unknown>\nE       #12 0x563dc176b363 <unknown>\nE       #13 0x563dc173b247 <unknown>\nE       #14 0x563dc173bb9e <unknown>\nE       #15 0x563dc19df24b <unknown>\nE       #16 0x563dc19e32f1 <unknown>\nE       #17 0x563dc19caafe <unknown>\nE       #18 0x563dc19e3e52 <unknown>\nE       #19 0x563dc19af79f <unknown>\nE       #20 0x563dc1a08638 <unknown>\nE       #21 0x563dc1a08810 <unknown>\nE       #22 0x563dc1a17dac <unknown>\nE       #23 0x7f0688669134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1721006651172,"stop":1721006651210,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1721006651259,"stop":1721006651296,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1721006652334,"stop":1721006652400,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1721007252506,"stop":1721007252506,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1721007252507,"stop":1721007252586,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"37010a9470b6"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":46,"unknown":0,"total":47},"items":[{"uid":"283fb5e574ae2d17","reportUrl":"https://Nat754.github.io/StroyremAutomation/368//#testresult/283fb5e574ae2d17","status":"passed","time":{"start":1720920123194,"stop":1720920134543,"duration":11349}},{"uid":"d1b134e6568516af","reportUrl":"https://Nat754.github.io/StroyremAutomation/367//#testresult/d1b134e6568516af","status":"passed","time":{"start":1720833416650,"stop":1720833427507,"duration":10857}},{"uid":"5bc482b66d3645cf","reportUrl":"https://Nat754.github.io/StroyremAutomation/366//#testresult/5bc482b66d3645cf","status":"passed","time":{"start":1720747322656,"stop":1720747335193,"duration":12537}},{"uid":"40eb713d00bb6aaf","reportUrl":"https://Nat754.github.io/StroyremAutomation/365//#testresult/40eb713d00bb6aaf","status":"passed","time":{"start":1720660777043,"stop":1720660788100,"duration":11057}},{"uid":"df4fefccd6314a5c","reportUrl":"https://Nat754.github.io/StroyremAutomation/364//#testresult/df4fefccd6314a5c","status":"passed","time":{"start":1720574352260,"stop":1720574363153,"duration":10893}},{"uid":"f8b71a2099ef0619","reportUrl":"https://Nat754.github.io/StroyremAutomation/363//#testresult/f8b71a2099ef0619","status":"passed","time":{"start":1720488062222,"stop":1720488074353,"duration":12131}},{"uid":"ed868f96fbfadf18","reportUrl":"https://Nat754.github.io/StroyremAutomation/362//#testresult/ed868f96fbfadf18","status":"passed","time":{"start":1720401469264,"stop":1720401479820,"duration":10556}},{"uid":"9555e1e780b88982","reportUrl":"https://Nat754.github.io/StroyremAutomation/361//#testresult/9555e1e780b88982","status":"passed","time":{"start":1720315236042,"stop":1720315246648,"duration":10606}},{"uid":"f8d1b24762c4f18b","reportUrl":"https://Nat754.github.io/StroyremAutomation/360//#testresult/f8d1b24762c4f18b","status":"passed","time":{"start":1720228571602,"stop":1720228582848,"duration":11246}},{"uid":"eae613f5e5eef8d5","reportUrl":"https://Nat754.github.io/StroyremAutomation/359//#testresult/eae613f5e5eef8d5","status":"passed","time":{"start":1720142158725,"stop":1720142169626,"duration":10901}},{"uid":"e5b792d02965f63e","reportUrl":"https://Nat754.github.io/StroyremAutomation/358//#testresult/e5b792d02965f63e","status":"passed","time":{"start":1720055845653,"stop":1720055856307,"duration":10654}},{"uid":"5b07678bbfe11c40","reportUrl":"https://Nat754.github.io/StroyremAutomation/357//#testresult/5b07678bbfe11c40","status":"passed","time":{"start":1719969495712,"stop":1719969506817,"duration":11105}},{"uid":"20d1c8e906a01c25","reportUrl":"https://Nat754.github.io/StroyremAutomation/356//#testresult/20d1c8e906a01c25","status":"passed","time":{"start":1719883080602,"stop":1719883091645,"duration":11043}},{"uid":"314e509fa975003f","reportUrl":"https://Nat754.github.io/StroyremAutomation/355//#testresult/314e509fa975003f","status":"passed","time":{"start":1719796900743,"stop":1719796911228,"duration":10485}},{"uid":"ab6935bb7fc0e35a","reportUrl":"https://Nat754.github.io/StroyremAutomation/354//#testresult/ab6935bb7fc0e35a","status":"passed","time":{"start":1719710414949,"stop":1719710426315,"duration":11366}},{"uid":"b11a0cf56a555890","reportUrl":"https://Nat754.github.io/StroyremAutomation/353//#testresult/b11a0cf56a555890","status":"passed","time":{"start":1719623719966,"stop":1719623730433,"duration":10467}},{"uid":"4d460b2561abbd08","reportUrl":"https://Nat754.github.io/StroyremAutomation/352//#testresult/4d460b2561abbd08","status":"passed","time":{"start":1719537651400,"stop":1719537662846,"duration":11446}},{"uid":"1cbf231a273dada6","reportUrl":"https://Nat754.github.io/StroyremAutomation/351//#testresult/1cbf231a273dada6","status":"passed","time":{"start":1719451026280,"stop":1719451037068,"duration":10788}},{"uid":"81073ac1483ad0c5","reportUrl":"https://Nat754.github.io/StroyremAutomation/350//#testresult/81073ac1483ad0c5","status":"passed","time":{"start":1719364559603,"stop":1719364570606,"duration":11003}},{"uid":"c1e67e6f24a01141","reportUrl":"https://Nat754.github.io/StroyremAutomation/349//#testresult/c1e67e6f24a01141","status":"passed","time":{"start":1719278437638,"stop":1719278449430,"duration":11792}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"5e1d52b4b8f6d26e.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/kisti-malyarnye'"]}