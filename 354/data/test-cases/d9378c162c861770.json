{"uid":"d9378c162c861770","name":"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke","historyId":"24bb2201ad02feae4230ec2c85755ba8","time":{"start":1719710400988,"stop":1719710403291,"duration":2303},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.126)\nStacktrace:\n#0 0x562eed898c7a <unknown>\n#1 0x562eed57be2c <unknown>\n#2 0x562eed5cf406 <unknown>\n#3 0x562eed5cd246 <unknown>\n#4 0x562eed5cac27 <unknown>\n#5 0x562eed5c9a60 <unknown>\n#6 0x562eed5bd15f <unknown>\n#7 0x562eed5eb5c2 <unknown>\n#8 0x562eed5bcad9 <unknown>\n#9 0x562eed5eb78e <unknown>\n#10 0x562eed60a303 <unknown>\n#11 0x562eed5eb363 <unknown>\n#12 0x562eed5bb247 <unknown>\n#13 0x562eed5bbb9e <unknown>\n#14 0x562eed85f24b <unknown>\n#15 0x562eed8632f1 <unknown>\n#16 0x562eed84aafe <unknown>\n#17 0x562eed863e52 <unknown>\n#18 0x562eed82f79f <unknown>\n#19 0x562eed888638 <unknown>\n#20 0x562eed888810 <unknown>\n#21 0x562eed897dac <unknown>\n#22 0x7f3d1ec13134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f93749cdfd0>\nlink = 'https://stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f93739726d0>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9375497590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562eed888810 \\\\u003Cunknown>\\\\n#21 0x562eed897dac \\\\u003Cunknown>\\\\n#22 0x7f3d1ec13134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.126)\nE       Stacktrace:\nE       #0 0x562eed898c7a <unknown>\nE       #1 0x562eed57be2c <unknown>\nE       #2 0x562eed5cf406 <unknown>\nE       #3 0x562eed5cd246 <unknown>\nE       #4 0x562eed5cac27 <unknown>\nE       #5 0x562eed5c9a60 <unknown>\nE       #6 0x562eed5bd15f <unknown>\nE       #7 0x562eed5eb5c2 <unknown>\nE       #8 0x562eed5bcad9 <unknown>\nE       #9 0x562eed5eb78e <unknown>\nE       #10 0x562eed60a303 <unknown>\nE       #11 0x562eed5eb363 <unknown>\nE       #12 0x562eed5bb247 <unknown>\nE       #13 0x562eed5bbb9e <unknown>\nE       #14 0x562eed85f24b <unknown>\nE       #15 0x562eed8632f1 <unknown>\nE       #16 0x562eed84aafe <unknown>\nE       #17 0x562eed863e52 <unknown>\nE       #18 0x562eed82f79f <unknown>\nE       #19 0x562eed888638 <unknown>\nE       #20 0x562eed888810 <unknown>\nE       #21 0x562eed897dac <unknown>\nE       #22 0x7f3d1ec13134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1719709150208,"stop":1719709150276,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1719709150276,"stop":1719709150277,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1719710393440,"stop":1719710394127,"duration":687},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1719710394127,"stop":1719710400988,"duration":6861},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1719710394127,"stop":1719710394127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=126.0.6478.126)\nStacktrace:\n#0 0x562eed898c7a <unknown>\n#1 0x562eed57be2c <unknown>\n#2 0x562eed5cf406 <unknown>\n#3 0x562eed5cd246 <unknown>\n#4 0x562eed5cac27 <unknown>\n#5 0x562eed5c9a60 <unknown>\n#6 0x562eed5bd15f <unknown>\n#7 0x562eed5eb5c2 <unknown>\n#8 0x562eed5bcad9 <unknown>\n#9 0x562eed5eb78e <unknown>\n#10 0x562eed60a303 <unknown>\n#11 0x562eed5eb363 <unknown>\n#12 0x562eed5bb247 <unknown>\n#13 0x562eed5bbb9e <unknown>\n#14 0x562eed85f24b <unknown>\n#15 0x562eed8632f1 <unknown>\n#16 0x562eed84aafe <unknown>\n#17 0x562eed863e52 <unknown>\n#18 0x562eed82f79f <unknown>\n#19 0x562eed888638 <unknown>\n#20 0x562eed888810 <unknown>\n#21 0x562eed897dac <unknown>\n#22 0x7f3d1ec13134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f93749cdfd0>\nlink = 'https://stroyrem-nn.ru/catalog/kisti-malyarnye'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f93739726d0>\n\n    @allure.title(\"positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{KISTI_MALYARNYE_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{KISTI_MALYARNYE_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_discount_for_unauthorized_customer_purchase_amount_50_to_3499rub_smoke(\n            self, link, product_page_open):\n        product_page_open.get_field_price_first().send_keys(50)\n        product_page_open.get_field_price_last().send_keys(3499)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9375497590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x562eed888810 \\\\u003Cunknown>\\\\n#21 0x562eed897dac \\\\u003Cunknown>\\\\n#22 0x7f3d1ec13134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=126.0.6478.126)\nE       Stacktrace:\nE       #0 0x562eed898c7a <unknown>\nE       #1 0x562eed57be2c <unknown>\nE       #2 0x562eed5cf406 <unknown>\nE       #3 0x562eed5cd246 <unknown>\nE       #4 0x562eed5cac27 <unknown>\nE       #5 0x562eed5c9a60 <unknown>\nE       #6 0x562eed5bd15f <unknown>\nE       #7 0x562eed5eb5c2 <unknown>\nE       #8 0x562eed5bcad9 <unknown>\nE       #9 0x562eed5eb78e <unknown>\nE       #10 0x562eed60a303 <unknown>\nE       #11 0x562eed5eb363 <unknown>\nE       #12 0x562eed5bb247 <unknown>\nE       #13 0x562eed5bbb9e <unknown>\nE       #14 0x562eed85f24b <unknown>\nE       #15 0x562eed8632f1 <unknown>\nE       #16 0x562eed84aafe <unknown>\nE       #17 0x562eed863e52 <unknown>\nE       #18 0x562eed82f79f <unknown>\nE       #19 0x562eed888638 <unknown>\nE       #20 0x562eed888810 <unknown>\nE       #21 0x562eed897dac <unknown>\nE       #22 0x7f3d1ec13134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1719710400988,"stop":1719710401020,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1719710401099,"stop":1719710401127,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1719710402169,"stop":1719710402210,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"ec4c311fd46b3f9f","name":"Screenshot","source":"ec4c311fd46b3f9f.png","type":"image/png","size":101358},{"uid":"cdc552d04a428b9a","name":"HTML source","source":"cdc552d04a428b9a.html","type":"text/html","size":938892}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1719710403469,"stop":1719710403544,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1719710403469,"stop":1719710403469,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"2b8e6b9b3817"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/catalog/kisti-malyarnye'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"6681ec47412aa747","reportUrl":"https://Nat754.github.io/StroyremAutomation/353//#testresult/6681ec47412aa747","status":"passed","time":{"start":1719623697214,"stop":1719623709020,"duration":11806}},{"uid":"295a6415c1264523","reportUrl":"https://Nat754.github.io/StroyremAutomation/352//#testresult/295a6415c1264523","status":"passed","time":{"start":1719537624052,"stop":1719537636669,"duration":12617}},{"uid":"dd3400e3904ab98c","reportUrl":"https://Nat754.github.io/StroyremAutomation/351//#testresult/dd3400e3904ab98c","status":"passed","time":{"start":1719451003762,"stop":1719451015039,"duration":11277}},{"uid":"ae231e14c5c088a7","reportUrl":"https://Nat754.github.io/StroyremAutomation/350//#testresult/ae231e14c5c088a7","status":"passed","time":{"start":1719364537804,"stop":1719364548945,"duration":11141}},{"uid":"64b8fe3696ec4fd4","reportUrl":"https://Nat754.github.io/StroyremAutomation/349//#testresult/64b8fe3696ec4fd4","status":"passed","time":{"start":1719278408086,"stop":1719278422199,"duration":14113}},{"uid":"e7906dfc1b2af326","reportUrl":"https://Nat754.github.io/StroyremAutomation/348//#testresult/e7906dfc1b2af326","status":"passed","time":{"start":1719191925570,"stop":1719191936954,"duration":11384}},{"uid":"7690d4a0f190ca27","reportUrl":"https://Nat754.github.io/StroyremAutomation/347//#testresult/7690d4a0f190ca27","status":"passed","time":{"start":1719105642005,"stop":1719105653494,"duration":11489}},{"uid":"75b19b2dfab3e1f6","reportUrl":"https://Nat754.github.io/StroyremAutomation/346//#testresult/75b19b2dfab3e1f6","status":"passed","time":{"start":1719019079721,"stop":1719019092481,"duration":12760}},{"uid":"304ab691e8ec6bd","reportUrl":"https://Nat754.github.io/StroyremAutomation/345//#testresult/304ab691e8ec6bd","status":"passed","time":{"start":1718932827688,"stop":1718932840230,"duration":12542}},{"uid":"c12aecfee57bc4bb","reportUrl":"https://Nat754.github.io/StroyremAutomation/344//#testresult/c12aecfee57bc4bb","status":"passed","time":{"start":1718846078122,"stop":1718846089259,"duration":11137}},{"uid":"b8a86bcbebcbb47e","reportUrl":"https://Nat754.github.io/StroyremAutomation/343//#testresult/b8a86bcbebcbb47e","status":"passed","time":{"start":1718760089707,"stop":1718760102730,"duration":13023}},{"uid":"de32671a2b8ae452","reportUrl":"https://Nat754.github.io/StroyremAutomation/342//#testresult/de32671a2b8ae452","status":"passed","time":{"start":1718673421834,"stop":1718673434996,"duration":13162}},{"uid":"21a4b4d34d668701","reportUrl":"https://Nat754.github.io/StroyremAutomation/341//#testresult/21a4b4d34d668701","status":"passed","time":{"start":1718587356683,"stop":1718587368908,"duration":12225}},{"uid":"bb9886f8e91903b9","reportUrl":"https://Nat754.github.io/StroyremAutomation/340//#testresult/bb9886f8e91903b9","status":"passed","time":{"start":1718501055661,"stop":1718501069059,"duration":13398}},{"uid":"24de7bdf00a41bb9","reportUrl":"https://Nat754.github.io/StroyremAutomation/339//#testresult/24de7bdf00a41bb9","status":"passed","time":{"start":1718414426333,"stop":1718414438810,"duration":12477}},{"uid":"5096805fb1cbdd05","reportUrl":"https://Nat754.github.io/StroyremAutomation/338//#testresult/5096805fb1cbdd05","status":"passed","time":{"start":1718327908964,"stop":1718327920686,"duration":11722}},{"uid":"78d211ac407bdbd9","reportUrl":"https://Nat754.github.io/StroyremAutomation/337//#testresult/78d211ac407bdbd9","status":"passed","time":{"start":1718241508686,"stop":1718241520991,"duration":12305}},{"uid":"32422a153b2c9e62","reportUrl":"https://Nat754.github.io/StroyremAutomation/336//#testresult/32422a153b2c9e62","status":"passed","time":{"start":1718155250427,"stop":1718155262836,"duration":12409}},{"uid":"6e49514f3d58fa60","reportUrl":"https://Nat754.github.io/StroyremAutomation/335//#testresult/6e49514f3d58fa60","status":"passed","time":{"start":1718068549815,"stop":1718068561293,"duration":11478}},{"uid":"75721c2085af6cd0","reportUrl":"https://Nat754.github.io/StroyremAutomation/334//#testresult/75721c2085af6cd0","status":"passed","time":{"start":1717982487389,"stop":1717982499580,"duration":12191}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"d9378c162c861770.json","parameterValues":["'https://stroyrem-nn.ru/catalog/kisti-malyarnye'"]}