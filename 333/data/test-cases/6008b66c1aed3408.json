{"uid":"6008b66c1aed3408","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"1b0f7ad8d89bc0387b43367254f3fa4d","time":{"start":1717895701040,"stop":1717895703345,"duration":2305},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x5616c0758e3a <unknown>\n#1 0x5616c044245c <unknown>\n#2 0x5616c0495336 <unknown>\n#3 0x5616c0493176 <unknown>\n#4 0x5616c0490b57 <unknown>\n#5 0x5616c048f97c <unknown>\n#6 0x5616c04830ff <unknown>\n#7 0x5616c04b14b2 <unknown>\n#8 0x5616c0482a79 <unknown>\n#9 0x5616c04b167e <unknown>\n#10 0x5616c04d02cc <unknown>\n#11 0x5616c04b1253 <unknown>\n#12 0x5616c04811c7 <unknown>\n#13 0x5616c0481b3e <unknown>\n#14 0x5616c071f27b <unknown>\n#15 0x5616c0723327 <unknown>\n#16 0x5616c070bdae <unknown>\n#17 0x5616c0723df2 <unknown>\n#18 0x5616c06f074f <unknown>\n#19 0x5616c0748128 <unknown>\n#20 0x5616c07482fb <unknown>\n#21 0x5616c0757f6c <unknown>\n#22 0x7fe083b70134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fd025918c90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fd025994c10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd025995b10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5616c07482fb \\\\u003Cunknown>\\\\n#21 0x5616c0757f6c \\\\u003Cunknown>\\\\n#22 0x7fe083b70134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x5616c0758e3a <unknown>\nE       #1 0x5616c044245c <unknown>\nE       #2 0x5616c0495336 <unknown>\nE       #3 0x5616c0493176 <unknown>\nE       #4 0x5616c0490b57 <unknown>\nE       #5 0x5616c048f97c <unknown>\nE       #6 0x5616c04830ff <unknown>\nE       #7 0x5616c04b14b2 <unknown>\nE       #8 0x5616c0482a79 <unknown>\nE       #9 0x5616c04b167e <unknown>\nE       #10 0x5616c04d02cc <unknown>\nE       #11 0x5616c04b1253 <unknown>\nE       #12 0x5616c04811c7 <unknown>\nE       #13 0x5616c0481b3e <unknown>\nE       #14 0x5616c071f27b <unknown>\nE       #15 0x5616c0723327 <unknown>\nE       #16 0x5616c070bdae <unknown>\nE       #17 0x5616c0723df2 <unknown>\nE       #18 0x5616c06f074f <unknown>\nE       #19 0x5616c0748128 <unknown>\nE       #20 0x5616c07482fb <unknown>\nE       #21 0x5616c0757f6c <unknown>\nE       #22 0x7fe083b70134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1717894716546,"stop":1717894716617,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1717894716617,"stop":1717894716617,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1717895686900,"stop":1717895687592,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1717895687593,"stop":1717895687593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1717895687593,"stop":1717895701039,"duration":13446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.141)\nStacktrace:\n#0 0x5616c0758e3a <unknown>\n#1 0x5616c044245c <unknown>\n#2 0x5616c0495336 <unknown>\n#3 0x5616c0493176 <unknown>\n#4 0x5616c0490b57 <unknown>\n#5 0x5616c048f97c <unknown>\n#6 0x5616c04830ff <unknown>\n#7 0x5616c04b14b2 <unknown>\n#8 0x5616c0482a79 <unknown>\n#9 0x5616c04b167e <unknown>\n#10 0x5616c04d02cc <unknown>\n#11 0x5616c04b1253 <unknown>\n#12 0x5616c04811c7 <unknown>\n#13 0x5616c0481b3e <unknown>\n#14 0x5616c071f27b <unknown>\n#15 0x5616c0723327 <unknown>\n#16 0x5616c070bdae <unknown>\n#17 0x5616c0723df2 <unknown>\n#18 0x5616c06f074f <unknown>\n#19 0x5616c0748128 <unknown>\n#20 0x5616c07482fb <unknown>\n#21 0x5616c0757f6c <unknown>\n#22 0x7fe083b70134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7fd025918c90>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7fd025994c10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd025995b10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5616c07482fb \\\\u003Cunknown>\\\\n#21 0x5616c0757f6c \\\\u003Cunknown>\\\\n#22 0x7fe083b70134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.141)\nE       Stacktrace:\nE       #0 0x5616c0758e3a <unknown>\nE       #1 0x5616c044245c <unknown>\nE       #2 0x5616c0495336 <unknown>\nE       #3 0x5616c0493176 <unknown>\nE       #4 0x5616c0490b57 <unknown>\nE       #5 0x5616c048f97c <unknown>\nE       #6 0x5616c04830ff <unknown>\nE       #7 0x5616c04b14b2 <unknown>\nE       #8 0x5616c0482a79 <unknown>\nE       #9 0x5616c04b167e <unknown>\nE       #10 0x5616c04d02cc <unknown>\nE       #11 0x5616c04b1253 <unknown>\nE       #12 0x5616c04811c7 <unknown>\nE       #13 0x5616c0481b3e <unknown>\nE       #14 0x5616c071f27b <unknown>\nE       #15 0x5616c0723327 <unknown>\nE       #16 0x5616c070bdae <unknown>\nE       #17 0x5616c0723df2 <unknown>\nE       #18 0x5616c06f074f <unknown>\nE       #19 0x5616c0748128 <unknown>\nE       #20 0x5616c07482fb <unknown>\nE       #21 0x5616c0757f6c <unknown>\nE       #22 0x7fe083b70134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1717895701040,"stop":1717895701072,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1717895701120,"stop":1717895701157,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1717895702195,"stop":1717895702236,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"87286fb6adf620fd","name":"Screenshot","source":"87286fb6adf620fd.png","type":"image/png","size":136361},{"uid":"519d185da10910fd","name":"HTML source","source":"519d185da10910fd.html","type":"text/html","size":907166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1717895703539,"stop":1717895703539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1717895703539,"stop":1717895703629,"duration":90},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"ebfd6f4da4fc"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"d19d35566421d97c","reportUrl":"https://Nat754.github.io/StroyremAutomation/332//#testresult/d19d35566421d97c","status":"passed","time":{"start":1717809210726,"stop":1717809220134,"duration":9408}},{"uid":"f649c70bd312072a","reportUrl":"https://Nat754.github.io/StroyremAutomation/331//#testresult/f649c70bd312072a","status":"passed","time":{"start":1717722715854,"stop":1717722724266,"duration":8412}},{"uid":"a49f48468309f01e","reportUrl":"https://Nat754.github.io/StroyremAutomation/330//#testresult/a49f48468309f01e","status":"passed","time":{"start":1717636228791,"stop":1717636237431,"duration":8640}},{"uid":"4162fe21f63d7c96","reportUrl":"https://Nat754.github.io/StroyremAutomation/329//#testresult/4162fe21f63d7c96","status":"passed","time":{"start":1717550032348,"stop":1717550042029,"duration":9681}},{"uid":"43c23c1bac74a6f7","reportUrl":"https://Nat754.github.io/StroyremAutomation/328//#testresult/43c23c1bac74a6f7","status":"passed","time":{"start":1717463418008,"stop":1717463426614,"duration":8606}},{"uid":"c69423d29f722213","reportUrl":"https://Nat754.github.io/StroyremAutomation/327//#testresult/c69423d29f722213","status":"passed","time":{"start":1717377254899,"stop":1717377264309,"duration":9410}},{"uid":"92427e98f0fec7ca","reportUrl":"https://Nat754.github.io/StroyremAutomation/326//#testresult/92427e98f0fec7ca","status":"passed","time":{"start":1717290983917,"stop":1717290993335,"duration":9418}},{"uid":"317b2bb1ba537e8c","reportUrl":"https://Nat754.github.io/StroyremAutomation/325//#testresult/317b2bb1ba537e8c","status":"passed","time":{"start":1717204320735,"stop":1717204330603,"duration":9868}},{"uid":"d8af80ed75dc335e","reportUrl":"https://Nat754.github.io/StroyremAutomation/324//#testresult/d8af80ed75dc335e","status":"passed","time":{"start":1717118013018,"stop":1717118022602,"duration":9584}},{"uid":"95b0db0b7f77a5b7","reportUrl":"https://Nat754.github.io/StroyremAutomation/323//#testresult/95b0db0b7f77a5b7","status":"passed","time":{"start":1717031335834,"stop":1717031344521,"duration":8687}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"6008b66c1aed3408.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"]}