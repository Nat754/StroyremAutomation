{"uid":"e0de75ad110cad7e","name":"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke","fullName":"tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage#test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke","historyId":"1b0f7ad8d89bc0387b43367254f3fa4d","time":{"start":1716081127330,"stop":1716081129645,"duration":2315},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x5609406d6eca <unknown>\n#1 0x5609403c045c <unknown>\n#2 0x560940413336 <unknown>\n#3 0x560940411176 <unknown>\n#4 0x56094040eb57 <unknown>\n#5 0x56094040d97c <unknown>\n#6 0x5609404010ff <unknown>\n#7 0x56094042f4b2 <unknown>\n#8 0x560940400a79 <unknown>\n#9 0x56094042f67e <unknown>\n#10 0x56094044e2cc <unknown>\n#11 0x56094042f253 <unknown>\n#12 0x5609403ff1c7 <unknown>\n#13 0x5609403ffb3e <unknown>\n#14 0x56094069d30b <unknown>\n#15 0x5609406a13b7 <unknown>\n#16 0x560940689e3e <unknown>\n#17 0x5609406a1e82 <unknown>\n#18 0x56094066e7df <unknown>\n#19 0x5609406c61b8 <unknown>\n#20 0x5609406c638b <unknown>\n#21 0x5609406d5ffc <unknown>\n#22 0x7f12d8917134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f12e7dc5050>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f12e8a7ab10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12e77e2b50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5609406c638b \\\\u003Cunknown>\\\\n#21 0x5609406d5ffc \\\\u003Cunknown>\\\\n#22 0x7f12d8917134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x5609406d6eca <unknown>\nE       #1 0x5609403c045c <unknown>\nE       #2 0x560940413336 <unknown>\nE       #3 0x560940411176 <unknown>\nE       #4 0x56094040eb57 <unknown>\nE       #5 0x56094040d97c <unknown>\nE       #6 0x5609404010ff <unknown>\nE       #7 0x56094042f4b2 <unknown>\nE       #8 0x560940400a79 <unknown>\nE       #9 0x56094042f67e <unknown>\nE       #10 0x56094044e2cc <unknown>\nE       #11 0x56094042f253 <unknown>\nE       #12 0x5609403ff1c7 <unknown>\nE       #13 0x5609403ffb3e <unknown>\nE       #14 0x56094069d30b <unknown>\nE       #15 0x5609406a13b7 <unknown>\nE       #16 0x560940689e3e <unknown>\nE       #17 0x5609406a1e82 <unknown>\nE       #18 0x56094066e7df <unknown>\nE       #19 0x5609406c61b8 <unknown>\nE       #20 0x5609406c638b <unknown>\nE       #21 0x5609406d5ffc <unknown>\nE       #22 0x7f12d8917134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1716080152510,"stop":1716080152577,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_allure_results_folder","time":{"start":1716080152577,"stop":1716080152577,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1716081109757,"stop":1716081110448,"duration":691},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page_open","time":{"start":1716081110449,"stop":1716081127330,"duration":16881},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1716081110449,"stop":1716081110449,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\n  (Session info: chrome-headless-shell=125.0.6422.60)\nStacktrace:\n#0 0x5609406d6eca <unknown>\n#1 0x5609403c045c <unknown>\n#2 0x560940413336 <unknown>\n#3 0x560940411176 <unknown>\n#4 0x56094040eb57 <unknown>\n#5 0x56094040d97c <unknown>\n#6 0x5609404010ff <unknown>\n#7 0x56094042f4b2 <unknown>\n#8 0x560940400a79 <unknown>\n#9 0x56094042f67e <unknown>\n#10 0x56094044e2cc <unknown>\n#11 0x56094042f253 <unknown>\n#12 0x5609403ff1c7 <unknown>\n#13 0x5609403ffb3e <unknown>\n#14 0x56094069d30b <unknown>\n#15 0x5609406a13b7 <unknown>\n#16 0x560940689e3e <unknown>\n#17 0x5609406a1e82 <unknown>\n#18 0x56094066e7df <unknown>\n#19 0x5609406c61b8 <unknown>\n#20 0x5609406c638b <unknown>\n#21 0x5609406d5ffc <unknown>\n#22 0x7f12d8917134 <unknown>","statusTrace":"self = <tests.test_products_on_sale.test_products_on_sale_page.TestProductsOnSalePage object at 0x7f12e7dc5050>\nlink = 'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'\nproduct_page_open = <pages.products_on_sale_page.ProductsOnSale object at 0x7f12e8a7ab10>\n\n    @allure.title(\"positive_check_discount_displayed_for_unauthorized_customer_for_amount_7500_9999rub_smoke\")\n    @pytest.mark.parametrize('link', [f\"{MAIN_PAGE_PROD_URL}{ELECTROINSTRUMENT_PAGE_URL}\",\n                                      f\"{MAIN_PAGE_STAGE_URL}{ELECTROINSTRUMENT_PAGE_URL}\"])\n    @pytest.mark.smoke_test\n    def test_positive_check_discount_for_unauthorized_customer_for_amount_7500_9999rub_smoke(self, link,\n                                                                                             product_page_open):\n        product_page_open.get_field_price_first().send_keys(7500)\n        product_page_open.get_field_price_last().send_keys(9999)\n        time.sleep(1)\n>       product_page_open.get_in_stock_products_link().click()\n\ntests/test_products_on_sale/test_products_on_sale_page.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12e77e2b50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5609406c638b \\\\u003Cunknown>\\\\n#21 0x5609406d5ffc \\\\u003Cunknown>\\\\n#22 0x7f12d8917134 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (163, 9). Other element would receive the click: <div style=\"position:fixed;background:rgba(255,255,255,0.5);z-index:1000;left:0;top:0;width:100%;height:100%;\" class=\"fpreloader\"></div>\nE         (Session info: chrome-headless-shell=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x5609406d6eca <unknown>\nE       #1 0x5609403c045c <unknown>\nE       #2 0x560940413336 <unknown>\nE       #3 0x560940411176 <unknown>\nE       #4 0x56094040eb57 <unknown>\nE       #5 0x56094040d97c <unknown>\nE       #6 0x5609404010ff <unknown>\nE       #7 0x56094042f4b2 <unknown>\nE       #8 0x560940400a79 <unknown>\nE       #9 0x56094042f67e <unknown>\nE       #10 0x56094044e2cc <unknown>\nE       #11 0x56094042f253 <unknown>\nE       #12 0x5609403ff1c7 <unknown>\nE       #13 0x5609403ffb3e <unknown>\nE       #14 0x56094069d30b <unknown>\nE       #15 0x5609406a13b7 <unknown>\nE       #16 0x560940689e3e <unknown>\nE       #17 0x5609406a1e82 <unknown>\nE       #18 0x56094066e7df <unknown>\nE       #19 0x5609406c61b8 <unknown>\nE       #20 0x5609406c638b <unknown>\nE       #21 0x5609406d5ffc <unknown>\nE       #22 0x7f12d8917134 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Проверяем видимость поля 'ЦЕНА от'","time":{"start":1716081127331,"stop":1716081127366,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем видимость поля 'ЦЕНА до'","time":{"start":1716081127431,"stop":1716081127463,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем кликабельность кнопки 'На складе'","time":{"start":1716081128504,"stop":1716081128549,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"2def67f3166dbd8e","name":"Screenshot","source":"2def67f3166dbd8e.png","type":"image/png","size":136361},{"uid":"4ca09965f340c5ee","name":"HTML source","source":"4ca09965f340c5ee.html","type":"text/html","size":907157}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1716081129826,"stop":1716081129913,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup::0","time":{"start":1716081129826,"stop":1716081129826,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Products On SalePage"},{"name":"tag","value":"smoke_test"},{"name":"tag","value":"flaky(max_runs=3, min_passes=1)"},{"name":"parentSuite","value":"tests.test_products_on_sale"},{"name":"suite","value":"test_products_on_sale_page"},{"name":"subSuite","value":"TestProductsOnSalePage"},{"name":"host","value":"3ceb2c0e7944"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products_on_sale.test_products_on_sale_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":277,"unknown":0,"total":287},"items":[{"uid":"8bf32b2dda8fa567","reportUrl":"https://Nat754.github.io/StroyremAutomation/311//#testresult/8bf32b2dda8fa567","status":"passed","time":{"start":1715994627035,"stop":1715994637081,"duration":10046}},{"uid":"c64225c0e6d54cdd","reportUrl":"https://Nat754.github.io/StroyremAutomation/310//#testresult/c64225c0e6d54cdd","status":"passed","time":{"start":1715908071216,"stop":1715908079640,"duration":8424}},{"uid":"967613fa637b6add","reportUrl":"https://Nat754.github.io/StroyremAutomation/309//#testresult/967613fa637b6add","status":"passed","time":{"start":1715821869351,"stop":1715821878953,"duration":9602}},{"uid":"c085783669ec4813","reportUrl":"https://Nat754.github.io/StroyremAutomation/308//#testresult/c085783669ec4813","status":"passed","time":{"start":1715735268219,"stop":1715735276333,"duration":8114}},{"uid":"93793d8e454304d7","reportUrl":"https://Nat754.github.io/StroyremAutomation/307//#testresult/93793d8e454304d7","status":"passed","time":{"start":1715648848851,"stop":1715648857027,"duration":8176}},{"uid":"44b66e257b90d1c3","reportUrl":"https://Nat754.github.io/StroyremAutomation/306//#testresult/44b66e257b90d1c3","status":"passed","time":{"start":1715562732834,"stop":1715562741958,"duration":9124}},{"uid":"86384f9fac14bcd2","reportUrl":"https://Nat754.github.io/StroyremAutomation/305//#testresult/86384f9fac14bcd2","status":"passed","time":{"start":1715476173586,"stop":1715476181677,"duration":8091}},{"uid":"cc39b15e39443b16","reportUrl":"https://Nat754.github.io/StroyremAutomation/304//#testresult/cc39b15e39443b16","status":"passed","time":{"start":1715389468763,"stop":1715389476749,"duration":7986}},{"uid":"77911497a0fc07cc","reportUrl":"https://Nat754.github.io/StroyremAutomation/303//#testresult/77911497a0fc07cc","status":"passed","time":{"start":1715303392830,"stop":1715303402070,"duration":9240}},{"uid":"9d4088ceaa82ff66","reportUrl":"https://Nat754.github.io/StroyremAutomation/302//#testresult/9d4088ceaa82ff66","status":"passed","time":{"start":1715216706140,"stop":1715216713950,"duration":7810}},{"uid":"8a4dba82a8fab34d","reportUrl":"https://Nat754.github.io/StroyremAutomation/301//#testresult/8a4dba82a8fab34d","status":"passed","time":{"start":1715130000992,"stop":1715130010710,"duration":9718}},{"uid":"3606bba984278c53","reportUrl":"https://Nat754.github.io/StroyremAutomation/300//#testresult/3606bba984278c53","status":"passed","time":{"start":1715043888247,"stop":1715043896435,"duration":8188}},{"uid":"e18326df654f37a","reportUrl":"https://Nat754.github.io/StroyremAutomation/299//#testresult/e18326df654f37a","status":"passed","time":{"start":1714957547048,"stop":1714957554833,"duration":7785}},{"uid":"66ecfbbf152a25","reportUrl":"https://Nat754.github.io/StroyremAutomation/298//#testresult/66ecfbbf152a25","status":"passed","time":{"start":1714871285862,"stop":1714871293570,"duration":7708}},{"uid":"d84e895002ca174f","reportUrl":"https://Nat754.github.io/StroyremAutomation/297//#testresult/d84e895002ca174f","status":"passed","time":{"start":1714784678953,"stop":1714784686968,"duration":8015}},{"uid":"cc4dc7b50fcaa587","reportUrl":"https://Nat754.github.io/StroyremAutomation/296//#testresult/cc4dc7b50fcaa587","status":"passed","time":{"start":1714698532519,"stop":1714698540412,"duration":7893}},{"uid":"2c97a90cb5ccabbc","reportUrl":"https://Nat754.github.io/StroyremAutomation/295//#testresult/2c97a90cb5ccabbc","status":"passed","time":{"start":1714611826397,"stop":1714611834620,"duration":8223}},{"uid":"92e135e75857c2e4","reportUrl":"https://Nat754.github.io/StroyremAutomation/294//#testresult/92e135e75857c2e4","status":"passed","time":{"start":1714525685103,"stop":1714525692965,"duration":7862}},{"uid":"d77534cb4c6f3108","reportUrl":"https://Nat754.github.io/StroyremAutomation/293//#testresult/d77534cb4c6f3108","status":"passed","time":{"start":1714439050506,"stop":1714439058655,"duration":8149}},{"uid":"72d3d5cc9b5e5c1f","reportUrl":"https://Nat754.github.io/StroyremAutomation/292//#testresult/72d3d5cc9b5e5c1f","status":"passed","time":{"start":1714352737932,"stop":1714352745568,"duration":7636}}]},"tags":["smoke_test","flaky(max_runs=3, min_passes=1)"]},"source":"e0de75ad110cad7e.json","parameterValues":["'https://test2.stroyrem-nn.ru/catalog/elektroinstrument'"]}