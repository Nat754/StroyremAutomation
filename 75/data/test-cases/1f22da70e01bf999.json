{"uid":"1f22da70e01bf999","name":"ym_is_present_smoke","fullName":"tests.test_ym.test_ym.TestYaMetric#test_ym_is_present_smoke","historyId":"88c6f825982852b40224647cec355379","time":{"start":1695690853392,"stop":1695690853596,"duration":204},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55999bc836b3 <unknown>\n#1 0x55999b9591e7 <unknown>\n#2 0x55999b9512f3 <unknown>\n#3 0x55999b941d17 <unknown>\n#4 0x55999b943191 <unknown>\n#5 0x55999b942053 <unknown>\n#6 0x55999b94106c <unknown>\n#7 0x55999b940fde <unknown>\n#8 0x55999b93fbe4 <unknown>\n#9 0x55999b94006a <unknown>\n#10 0x55999b95b8ce <unknown>\n#11 0x55999b9dbad5 <unknown>\n#12 0x55999b9c20c2 <unknown>\n#13 0x55999b9db322 <unknown>\n#14 0x55999b9c1e93 <unknown>\n#15 0x55999b994934 <unknown>\n#16 0x55999b99571e <unknown>\n#17 0x55999bc48cb8 <unknown>\n#18 0x55999bc4cbf0 <unknown>\n#19 0x55999bc5719c <unknown>\n#20 0x55999bc4d808 <unknown>\n#21 0x55999bc1a27f <unknown>\n#22 0x55999bc71e88 <unknown>\n#23 0x55999bc72059 <unknown>\n#24 0x55999bc82843 <unknown>\n#25 0x7f42aa55e044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f045410>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99f6289377da73251606ebfd1bc96831\")>\nlink = 'https://stroyrem-nn.ru/podem-strojmaterialov-v-kvartiru?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742ed951d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55999bc72059 \\\\u003Cunknown>\\\\n#24 0x55999bc82843 \\\\u003Cunknown>\\\\n#25 0x7f42aa55e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55999bc836b3 <unknown>\nE       #1 0x55999b9591e7 <unknown>\nE       #2 0x55999b9512f3 <unknown>\nE       #3 0x55999b941d17 <unknown>\nE       #4 0x55999b943191 <unknown>\nE       #5 0x55999b942053 <unknown>\nE       #6 0x55999b94106c <unknown>\nE       #7 0x55999b940fde <unknown>\nE       #8 0x55999b93fbe4 <unknown>\nE       #9 0x55999b94006a <unknown>\nE       #10 0x55999b95b8ce <unknown>\nE       #11 0x55999b9dbad5 <unknown>\nE       #12 0x55999b9c20c2 <unknown>\nE       #13 0x55999b9db322 <unknown>\nE       #14 0x55999b9c1e93 <unknown>\nE       #15 0x55999b994934 <unknown>\nE       #16 0x55999b99571e <unknown>\nE       #17 0x55999bc48cb8 <unknown>\nE       #18 0x55999bc4cbf0 <unknown>\nE       #19 0x55999bc5719c <unknown>\nE       #20 0x55999bc4d808 <unknown>\nE       #21 0x55999bc1a27f <unknown>\nE       #22 0x55999bc71e88 <unknown>\nE       #23 0x55999bc72059 <unknown>\nE       #24 0x55999bc82843 <unknown>\nE       #25 0x7f42aa55e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695689287890,"stop":1695689287973,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1695689287973,"stop":1695689287973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1695690852571,"stop":1695690853391,"duration":820},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1695690853391,"stop":1695690853391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55999bc836b3 <unknown>\n#1 0x55999b9591e7 <unknown>\n#2 0x55999b9512f3 <unknown>\n#3 0x55999b941d17 <unknown>\n#4 0x55999b943191 <unknown>\n#5 0x55999b942053 <unknown>\n#6 0x55999b94106c <unknown>\n#7 0x55999b940fde <unknown>\n#8 0x55999b93fbe4 <unknown>\n#9 0x55999b94006a <unknown>\n#10 0x55999b95b8ce <unknown>\n#11 0x55999b9dbad5 <unknown>\n#12 0x55999b9c20c2 <unknown>\n#13 0x55999b9db322 <unknown>\n#14 0x55999b9c1e93 <unknown>\n#15 0x55999b994934 <unknown>\n#16 0x55999b99571e <unknown>\n#17 0x55999bc48cb8 <unknown>\n#18 0x55999bc4cbf0 <unknown>\n#19 0x55999bc5719c <unknown>\n#20 0x55999bc4d808 <unknown>\n#21 0x55999bc1a27f <unknown>\n#22 0x55999bc71e88 <unknown>\n#23 0x55999bc72059 <unknown>\n#24 0x55999bc82843 <unknown>\n#25 0x7f42aa55e044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f045410>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99f6289377da73251606ebfd1bc96831\")>\nlink = 'https://stroyrem-nn.ru/podem-strojmaterialov-v-kvartiru?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742ed951d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55999bc72059 \\\\u003Cunknown>\\\\n#24 0x55999bc82843 \\\\u003Cunknown>\\\\n#25 0x7f42aa55e044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55999bc836b3 <unknown>\nE       #1 0x55999b9591e7 <unknown>\nE       #2 0x55999b9512f3 <unknown>\nE       #3 0x55999b941d17 <unknown>\nE       #4 0x55999b943191 <unknown>\nE       #5 0x55999b942053 <unknown>\nE       #6 0x55999b94106c <unknown>\nE       #7 0x55999b940fde <unknown>\nE       #8 0x55999b93fbe4 <unknown>\nE       #9 0x55999b94006a <unknown>\nE       #10 0x55999b95b8ce <unknown>\nE       #11 0x55999b9dbad5 <unknown>\nE       #12 0x55999b9c20c2 <unknown>\nE       #13 0x55999b9db322 <unknown>\nE       #14 0x55999b9c1e93 <unknown>\nE       #15 0x55999b994934 <unknown>\nE       #16 0x55999b99571e <unknown>\nE       #17 0x55999bc48cb8 <unknown>\nE       #18 0x55999bc4cbf0 <unknown>\nE       #19 0x55999bc5719c <unknown>\nE       #20 0x55999bc4d808 <unknown>\nE       #21 0x55999bc1a27f <unknown>\nE       #22 0x55999bc71e88 <unknown>\nE       #23 0x55999bc72059 <unknown>\nE       #24 0x55999bc82843 <unknown>\nE       #25 0x7f42aa55e044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"732d5ceef24de08b","name":"Screenshot","source":"732d5ceef24de08b.png","type":"image/png","size":5862},{"uid":"73b0cdcdf681d95","name":"HTML source","source":"73b0cdcdf681d95.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1695690853715,"stop":1695690853715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1695690853716,"stop":1695690853772,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"YA Metric"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_ym"},{"name":"suite","value":"test_ym"},{"name":"subSuite","value":"TestYaMetric"},{"name":"host","value":"a710f57ebf7d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ym.test_ym"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/podem-strojmaterialov-v-kvartiru?_ym_status-check=40023215&_ym_lang=ru'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":30,"unknown":0,"total":31},"items":[{"uid":"6f1684fe8b254bbc","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/6f1684fe8b254bbc","status":"passed","time":{"start":1695604619966,"stop":1695604625821,"duration":5855}},{"uid":"447b55ac1a202ee0","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/447b55ac1a202ee0","status":"passed","time":{"start":1695517907510,"stop":1695517911331,"duration":3821}},{"uid":"47cbd0a6697f486f","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/47cbd0a6697f486f","status":"passed","time":{"start":1695431716396,"stop":1695431722291,"duration":5895}},{"uid":"1d200a032520ba80","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/1d200a032520ba80","status":"passed","time":{"start":1695407003933,"stop":1695407009867,"duration":5934}},{"uid":"a15aa6b748a4e81c","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/a15aa6b748a4e81c","status":"passed","time":{"start":1695344999435,"stop":1695345003354,"duration":3919}},{"uid":"e51fc3e1315bf178","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/e51fc3e1315bf178","status":"passed","time":{"start":1695258604399,"stop":1695258608373,"duration":3974}},{"uid":"7338db79bae24a2f","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/7338db79bae24a2f","status":"passed","time":{"start":1695172800243,"stop":1695172806480,"duration":6237}},{"uid":"475782eaf2e2505","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/475782eaf2e2505","status":"passed","time":{"start":1695085999708,"stop":1695086004446,"duration":4738}},{"uid":"7a0882c425b08796","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/7a0882c425b08796","status":"passed","time":{"start":1695064618570,"stop":1695064623608,"duration":5038}},{"uid":"e8fe5b1fb290029c","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/e8fe5b1fb290029c","status":"passed","time":{"start":1695061172175,"stop":1695061176507,"duration":4332}},{"uid":"f163778bf88c9575","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/f163778bf88c9575","status":"passed","time":{"start":1694999216771,"stop":1694999221363,"duration":4592}},{"uid":"1adc3042989488ae","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/1adc3042989488ae","status":"passed","time":{"start":1694930229890,"stop":1694930235104,"duration":5214}},{"uid":"57c3822e07ab809","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/57c3822e07ab809","status":"passed","time":{"start":1694913131855,"stop":1694913136579,"duration":4724}},{"uid":"5b26a1d96a6185e3","reportUrl":"https://Nat754.github.io/StroyremAutomation/64//#testresult/5b26a1d96a6185e3","status":"passed","time":{"start":1694826426052,"stop":1694826430994,"duration":4942}},{"uid":"1e03261b9ecb47c7","reportUrl":"https://Nat754.github.io/StroyremAutomation/63//#testresult/1e03261b9ecb47c7","status":"passed","time":{"start":1694740169584,"stop":1694740174971,"duration":5387}},{"uid":"b27627fb1fddb085","reportUrl":"https://Nat754.github.io/StroyremAutomation/62//#testresult/b27627fb1fddb085","status":"passed","time":{"start":1694653611523,"stop":1694653615689,"duration":4166}},{"uid":"4e96c335062c9809","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/4e96c335062c9809","status":"passed","time":{"start":1694638605199,"stop":1694638609674,"duration":4475}},{"uid":"f274cc249242e06","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/f274cc249242e06","status":"passed","time":{"start":1694581568273,"stop":1694581574435,"duration":6162}},{"uid":"69c8eba30fc7a39f","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/69c8eba30fc7a39f","status":"passed","time":{"start":1694567305500,"stop":1694567309795,"duration":4295}},{"uid":"9cc90c0d742439ff","reportUrl":"https://Nat754.github.io/StroyremAutomation/60//#testresult/9cc90c0d742439ff","status":"passed","time":{"start":1694505596598,"stop":1694505602636,"duration":6038}}]},"tags":["smoke_test"]},"source":"1f22da70e01bf999.json","parameterValues":["'https://stroyrem-nn.ru/podem-strojmaterialov-v-kvartiru?_ym_status-check=40023215&_ym_lang=ru'"]}