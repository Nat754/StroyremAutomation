{"uid":"2f6c3702ca440f4d","name":"ym_is_present_smoke","fullName":"tests.test_ym.test_ym.TestYaMetric#test_ym_is_present_smoke","historyId":"1e25fce827b4f6e415fc38b1787b1f85","time":{"start":1695690850972,"stop":1695690851180,"duration":208},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x559e5ef506b3 <unknown>\n#1 0x559e5ec261e7 <unknown>\n#2 0x559e5ec1e2f3 <unknown>\n#3 0x559e5ec0ed17 <unknown>\n#4 0x559e5ec10191 <unknown>\n#5 0x559e5ec0f053 <unknown>\n#6 0x559e5ec0e06c <unknown>\n#7 0x559e5ec0dfde <unknown>\n#8 0x559e5ec0cbe4 <unknown>\n#9 0x559e5ec0d06a <unknown>\n#10 0x559e5ec288ce <unknown>\n#11 0x559e5eca8ad5 <unknown>\n#12 0x559e5ec8f0c2 <unknown>\n#13 0x559e5eca8322 <unknown>\n#14 0x559e5ec8ee93 <unknown>\n#15 0x559e5ec61934 <unknown>\n#16 0x559e5ec6271e <unknown>\n#17 0x559e5ef15cb8 <unknown>\n#18 0x559e5ef19bf0 <unknown>\n#19 0x559e5ef2419c <unknown>\n#20 0x559e5ef1a808 <unknown>\n#21 0x559e5eee727f <unknown>\n#22 0x559e5ef3ee88 <unknown>\n#23 0x559e5ef3f059 <unknown>\n#24 0x559e5ef4f843 <unknown>\n#25 0x7f037aa8d044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05b1d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8217ae853970c1da3dbdc83aa50b959d\")>\nlink = 'https://stroyrem-nn.ru/articles?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742d3f0dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559e5ef3f059 \\\\u003Cunknown>\\\\n#24 0x559e5ef4f843 \\\\u003Cunknown>\\\\n#25 0x7f037aa8d044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x559e5ef506b3 <unknown>\nE       #1 0x559e5ec261e7 <unknown>\nE       #2 0x559e5ec1e2f3 <unknown>\nE       #3 0x559e5ec0ed17 <unknown>\nE       #4 0x559e5ec10191 <unknown>\nE       #5 0x559e5ec0f053 <unknown>\nE       #6 0x559e5ec0e06c <unknown>\nE       #7 0x559e5ec0dfde <unknown>\nE       #8 0x559e5ec0cbe4 <unknown>\nE       #9 0x559e5ec0d06a <unknown>\nE       #10 0x559e5ec288ce <unknown>\nE       #11 0x559e5eca8ad5 <unknown>\nE       #12 0x559e5ec8f0c2 <unknown>\nE       #13 0x559e5eca8322 <unknown>\nE       #14 0x559e5ec8ee93 <unknown>\nE       #15 0x559e5ec61934 <unknown>\nE       #16 0x559e5ec6271e <unknown>\nE       #17 0x559e5ef15cb8 <unknown>\nE       #18 0x559e5ef19bf0 <unknown>\nE       #19 0x559e5ef2419c <unknown>\nE       #20 0x559e5ef1a808 <unknown>\nE       #21 0x559e5eee727f <unknown>\nE       #22 0x559e5ef3ee88 <unknown>\nE       #23 0x559e5ef3f059 <unknown>\nE       #24 0x559e5ef4f843 <unknown>\nE       #25 0x7f037aa8d044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695689287890,"stop":1695689287973,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1695689287973,"stop":1695689287973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1695690850141,"stop":1695690850972,"duration":831},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1695690850972,"stop":1695690850972,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x559e5ef506b3 <unknown>\n#1 0x559e5ec261e7 <unknown>\n#2 0x559e5ec1e2f3 <unknown>\n#3 0x559e5ec0ed17 <unknown>\n#4 0x559e5ec10191 <unknown>\n#5 0x559e5ec0f053 <unknown>\n#6 0x559e5ec0e06c <unknown>\n#7 0x559e5ec0dfde <unknown>\n#8 0x559e5ec0cbe4 <unknown>\n#9 0x559e5ec0d06a <unknown>\n#10 0x559e5ec288ce <unknown>\n#11 0x559e5eca8ad5 <unknown>\n#12 0x559e5ec8f0c2 <unknown>\n#13 0x559e5eca8322 <unknown>\n#14 0x559e5ec8ee93 <unknown>\n#15 0x559e5ec61934 <unknown>\n#16 0x559e5ec6271e <unknown>\n#17 0x559e5ef15cb8 <unknown>\n#18 0x559e5ef19bf0 <unknown>\n#19 0x559e5ef2419c <unknown>\n#20 0x559e5ef1a808 <unknown>\n#21 0x559e5eee727f <unknown>\n#22 0x559e5ef3ee88 <unknown>\n#23 0x559e5ef3f059 <unknown>\n#24 0x559e5ef4f843 <unknown>\n#25 0x7f037aa8d044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05b1d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8217ae853970c1da3dbdc83aa50b959d\")>\nlink = 'https://stroyrem-nn.ru/articles?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742d3f0dd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559e5ef3f059 \\\\u003Cunknown>\\\\n#24 0x559e5ef4f843 \\\\u003Cunknown>\\\\n#25 0x7f037aa8d044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x559e5ef506b3 <unknown>\nE       #1 0x559e5ec261e7 <unknown>\nE       #2 0x559e5ec1e2f3 <unknown>\nE       #3 0x559e5ec0ed17 <unknown>\nE       #4 0x559e5ec10191 <unknown>\nE       #5 0x559e5ec0f053 <unknown>\nE       #6 0x559e5ec0e06c <unknown>\nE       #7 0x559e5ec0dfde <unknown>\nE       #8 0x559e5ec0cbe4 <unknown>\nE       #9 0x559e5ec0d06a <unknown>\nE       #10 0x559e5ec288ce <unknown>\nE       #11 0x559e5eca8ad5 <unknown>\nE       #12 0x559e5ec8f0c2 <unknown>\nE       #13 0x559e5eca8322 <unknown>\nE       #14 0x559e5ec8ee93 <unknown>\nE       #15 0x559e5ec61934 <unknown>\nE       #16 0x559e5ec6271e <unknown>\nE       #17 0x559e5ef15cb8 <unknown>\nE       #18 0x559e5ef19bf0 <unknown>\nE       #19 0x559e5ef2419c <unknown>\nE       #20 0x559e5ef1a808 <unknown>\nE       #21 0x559e5eee727f <unknown>\nE       #22 0x559e5ef3ee88 <unknown>\nE       #23 0x559e5ef3f059 <unknown>\nE       #24 0x559e5ef4f843 <unknown>\nE       #25 0x7f037aa8d044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"5fa11aa6c45c49a0","name":"Screenshot","source":"5fa11aa6c45c49a0.png","type":"image/png","size":5862},{"uid":"9eb8a6d483d0d6ea","name":"HTML source","source":"9eb8a6d483d0d6ea.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1695690851300,"stop":1695690851356,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1695690851300,"stop":1695690851300,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"YA Metric"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_ym"},{"name":"suite","value":"test_ym"},{"name":"subSuite","value":"TestYaMetric"},{"name":"host","value":"a710f57ebf7d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ym.test_ym"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/articles?_ym_status-check=40023215&_ym_lang=ru'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":30,"unknown":0,"total":31},"items":[{"uid":"4976374760238e68","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/4976374760238e68","status":"passed","time":{"start":1695604606275,"stop":1695604612594,"duration":6319}},{"uid":"f34fd1db9d8c2a2d","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/f34fd1db9d8c2a2d","status":"passed","time":{"start":1695517897350,"stop":1695517901690,"duration":4340}},{"uid":"33b2fdffd47afd62","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/33b2fdffd47afd62","status":"passed","time":{"start":1695431701875,"stop":1695431708351,"duration":6476}},{"uid":"4f359673ec735c66","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/4f359673ec735c66","status":"passed","time":{"start":1695406989186,"stop":1695406995738,"duration":6552}},{"uid":"52a93fcc7b97138c","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/52a93fcc7b97138c","status":"passed","time":{"start":1695344989142,"stop":1695344993594,"duration":4452}},{"uid":"3d4a60fde4a3846d","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/3d4a60fde4a3846d","status":"passed","time":{"start":1695258594223,"stop":1695258598723,"duration":4500}},{"uid":"252a64afe9fea7d2","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/252a64afe9fea7d2","status":"passed","time":{"start":1695172786336,"stop":1695172792714,"duration":6378}},{"uid":"e94e2f24b1c5e0f0","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/e94e2f24b1c5e0f0","status":"passed","time":{"start":1695085987755,"stop":1695085992973,"duration":5218}},{"uid":"ca868b4dfdf8140","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/ca868b4dfdf8140","status":"passed","time":{"start":1695064606191,"stop":1695064611722,"duration":5531}},{"uid":"eced07c10129bc71","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/eced07c10129bc71","status":"passed","time":{"start":1695061161673,"stop":1695061166199,"duration":4526}},{"uid":"9054cebbef20bdf4","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/9054cebbef20bdf4","status":"passed","time":{"start":1694999206071,"stop":1694999210679,"duration":4608}},{"uid":"465b34580e632390","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/465b34580e632390","status":"passed","time":{"start":1694930217170,"stop":1694930223058,"duration":5888}},{"uid":"31e4334ca665d4cd","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/31e4334ca665d4cd","status":"passed","time":{"start":1694913119790,"stop":1694913125092,"duration":5302}},{"uid":"5156c20fa25b7fad","reportUrl":"https://Nat754.github.io/StroyremAutomation/64//#testresult/5156c20fa25b7fad","status":"passed","time":{"start":1694826408053,"stop":1694826418717,"duration":10664}},{"uid":"27c00685f08e0ae4","reportUrl":"https://Nat754.github.io/StroyremAutomation/63//#testresult/27c00685f08e0ae4","status":"passed","time":{"start":1694740156889,"stop":1694740162825,"duration":5936}},{"uid":"667e5c208097c708","reportUrl":"https://Nat754.github.io/StroyremAutomation/62//#testresult/667e5c208097c708","status":"passed","time":{"start":1694653601309,"stop":1694653605649,"duration":4340}},{"uid":"c0a42ea46002d0b","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/c0a42ea46002d0b","status":"passed","time":{"start":1694638594608,"stop":1694638599393,"duration":4785}},{"uid":"74e3bd6239b743d5","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/74e3bd6239b743d5","status":"passed","time":{"start":1694581553967,"stop":1694581560530,"duration":6563}},{"uid":"f2949b7c43c46fe4","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/f2949b7c43c46fe4","status":"passed","time":{"start":1694567295440,"stop":1694567299751,"duration":4311}},{"uid":"6047fbb4e63cbc0e","reportUrl":"https://Nat754.github.io/StroyremAutomation/60//#testresult/6047fbb4e63cbc0e","status":"passed","time":{"start":1694505582863,"stop":1694505589349,"duration":6486}}]},"tags":["smoke_test"]},"source":"2f6c3702ca440f4d.json","parameterValues":["'https://stroyrem-nn.ru/articles?_ym_status-check=40023215&_ym_lang=ru'"]}