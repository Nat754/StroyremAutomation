{"uid":"5f49b88c254ead7d","name":"ym_is_present_smoke","fullName":"tests.test_ym.test_ym.TestYaMetric#test_ym_is_present_smoke","historyId":"a3f829856854d64d9648464495c46a1e","time":{"start":1695690852183,"stop":1695690852392,"duration":209},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55cda71096b3 <unknown>\n#1 0x55cda6ddf1e7 <unknown>\n#2 0x55cda6dd72f3 <unknown>\n#3 0x55cda6dc7d17 <unknown>\n#4 0x55cda6dc9191 <unknown>\n#5 0x55cda6dc8053 <unknown>\n#6 0x55cda6dc706c <unknown>\n#7 0x55cda6dc6fde <unknown>\n#8 0x55cda6dc5be4 <unknown>\n#9 0x55cda6dc606a <unknown>\n#10 0x55cda6de18ce <unknown>\n#11 0x55cda6e61ad5 <unknown>\n#12 0x55cda6e480c2 <unknown>\n#13 0x55cda6e61322 <unknown>\n#14 0x55cda6e47e93 <unknown>\n#15 0x55cda6e1a934 <unknown>\n#16 0x55cda6e1b71e <unknown>\n#17 0x55cda70cecb8 <unknown>\n#18 0x55cda70d2bf0 <unknown>\n#19 0x55cda70dd19c <unknown>\n#20 0x55cda70d3808 <unknown>\n#21 0x55cda70a027f <unknown>\n#22 0x55cda70f7e88 <unknown>\n#23 0x55cda70f8059 <unknown>\n#24 0x55cda7108843 <unknown>\n#25 0x7fd962dfc044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05b190>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7cadf59980aeba0099974171fb0d50d1\")>\nlink = 'https://stroyrem-nn.ru/dostavka?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742f5de4d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55cda70f8059 \\\\u003Cunknown>\\\\n#24 0x55cda7108843 \\\\u003Cunknown>\\\\n#25 0x7fd962dfc044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55cda71096b3 <unknown>\nE       #1 0x55cda6ddf1e7 <unknown>\nE       #2 0x55cda6dd72f3 <unknown>\nE       #3 0x55cda6dc7d17 <unknown>\nE       #4 0x55cda6dc9191 <unknown>\nE       #5 0x55cda6dc8053 <unknown>\nE       #6 0x55cda6dc706c <unknown>\nE       #7 0x55cda6dc6fde <unknown>\nE       #8 0x55cda6dc5be4 <unknown>\nE       #9 0x55cda6dc606a <unknown>\nE       #10 0x55cda6de18ce <unknown>\nE       #11 0x55cda6e61ad5 <unknown>\nE       #12 0x55cda6e480c2 <unknown>\nE       #13 0x55cda6e61322 <unknown>\nE       #14 0x55cda6e47e93 <unknown>\nE       #15 0x55cda6e1a934 <unknown>\nE       #16 0x55cda6e1b71e <unknown>\nE       #17 0x55cda70cecb8 <unknown>\nE       #18 0x55cda70d2bf0 <unknown>\nE       #19 0x55cda70dd19c <unknown>\nE       #20 0x55cda70d3808 <unknown>\nE       #21 0x55cda70a027f <unknown>\nE       #22 0x55cda70f7e88 <unknown>\nE       #23 0x55cda70f8059 <unknown>\nE       #24 0x55cda7108843 <unknown>\nE       #25 0x7fd962dfc044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695689287890,"stop":1695689287973,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1695689287973,"stop":1695689287973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1695690851358,"stop":1695690852183,"duration":825},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1695690852183,"stop":1695690852183,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x55cda71096b3 <unknown>\n#1 0x55cda6ddf1e7 <unknown>\n#2 0x55cda6dd72f3 <unknown>\n#3 0x55cda6dc7d17 <unknown>\n#4 0x55cda6dc9191 <unknown>\n#5 0x55cda6dc8053 <unknown>\n#6 0x55cda6dc706c <unknown>\n#7 0x55cda6dc6fde <unknown>\n#8 0x55cda6dc5be4 <unknown>\n#9 0x55cda6dc606a <unknown>\n#10 0x55cda6de18ce <unknown>\n#11 0x55cda6e61ad5 <unknown>\n#12 0x55cda6e480c2 <unknown>\n#13 0x55cda6e61322 <unknown>\n#14 0x55cda6e47e93 <unknown>\n#15 0x55cda6e1a934 <unknown>\n#16 0x55cda6e1b71e <unknown>\n#17 0x55cda70cecb8 <unknown>\n#18 0x55cda70d2bf0 <unknown>\n#19 0x55cda70dd19c <unknown>\n#20 0x55cda70d3808 <unknown>\n#21 0x55cda70a027f <unknown>\n#22 0x55cda70f7e88 <unknown>\n#23 0x55cda70f8059 <unknown>\n#24 0x55cda7108843 <unknown>\n#25 0x7fd962dfc044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05b190>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7cadf59980aeba0099974171fb0d50d1\")>\nlink = 'https://stroyrem-nn.ru/dostavka?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742f5de4d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55cda70f8059 \\\\u003Cunknown>\\\\n#24 0x55cda7108843 \\\\u003Cunknown>\\\\n#25 0x7fd962dfc044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x55cda71096b3 <unknown>\nE       #1 0x55cda6ddf1e7 <unknown>\nE       #2 0x55cda6dd72f3 <unknown>\nE       #3 0x55cda6dc7d17 <unknown>\nE       #4 0x55cda6dc9191 <unknown>\nE       #5 0x55cda6dc8053 <unknown>\nE       #6 0x55cda6dc706c <unknown>\nE       #7 0x55cda6dc6fde <unknown>\nE       #8 0x55cda6dc5be4 <unknown>\nE       #9 0x55cda6dc606a <unknown>\nE       #10 0x55cda6de18ce <unknown>\nE       #11 0x55cda6e61ad5 <unknown>\nE       #12 0x55cda6e480c2 <unknown>\nE       #13 0x55cda6e61322 <unknown>\nE       #14 0x55cda6e47e93 <unknown>\nE       #15 0x55cda6e1a934 <unknown>\nE       #16 0x55cda6e1b71e <unknown>\nE       #17 0x55cda70cecb8 <unknown>\nE       #18 0x55cda70d2bf0 <unknown>\nE       #19 0x55cda70dd19c <unknown>\nE       #20 0x55cda70d3808 <unknown>\nE       #21 0x55cda70a027f <unknown>\nE       #22 0x55cda70f7e88 <unknown>\nE       #23 0x55cda70f8059 <unknown>\nE       #24 0x55cda7108843 <unknown>\nE       #25 0x7fd962dfc044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"de8a78ac21b45f5f","name":"Screenshot","source":"de8a78ac21b45f5f.png","type":"image/png","size":5862},{"uid":"c9e8b7d56ce7823","name":"HTML source","source":"c9e8b7d56ce7823.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1695690852514,"stop":1695690852514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1695690852514,"stop":1695690852570,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"YA Metric"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_ym"},{"name":"suite","value":"test_ym"},{"name":"subSuite","value":"TestYaMetric"},{"name":"host","value":"a710f57ebf7d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ym.test_ym"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/dostavka?_ym_status-check=40023215&_ym_lang=ru'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":30,"unknown":0,"total":31},"items":[{"uid":"461a4347ed700286","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/461a4347ed700286","status":"passed","time":{"start":1695604613515,"stop":1695604619061,"duration":5546}},{"uid":"ca539c0d930f0f8d","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/ca539c0d930f0f8d","status":"passed","time":{"start":1695517902570,"stop":1695517906628,"duration":4058}},{"uid":"ff47f647d9ab5918","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/ff47f647d9ab5918","status":"passed","time":{"start":1695431709332,"stop":1695431715440,"duration":6108}},{"uid":"6d009f5bc1306184","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/6d009f5bc1306184","status":"passed","time":{"start":1695406996703,"stop":1695407002934,"duration":6231}},{"uid":"c113fdea044ff56e","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/c113fdea044ff56e","status":"passed","time":{"start":1695344994474,"stop":1695344998566,"duration":4092}},{"uid":"75e858eda1eb6fd9","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/75e858eda1eb6fd9","status":"passed","time":{"start":1695258599623,"stop":1695258603506,"duration":3883}},{"uid":"95abd19612f3cf8c","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/95abd19612f3cf8c","status":"passed","time":{"start":1695172793644,"stop":1695172799323,"duration":5679}},{"uid":"6cf7a55c587de73d","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/6cf7a55c587de73d","status":"passed","time":{"start":1695085993887,"stop":1695085998812,"duration":4925}},{"uid":"87f0bf201e3c485","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/87f0bf201e3c485","status":"passed","time":{"start":1695064612699,"stop":1695064617598,"duration":4899}},{"uid":"d7be00eaf010a077","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/d7be00eaf010a077","status":"passed","time":{"start":1695061167079,"stop":1695061171300,"duration":4221}},{"uid":"f542a1409e1ec4b2","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/f542a1409e1ec4b2","status":"passed","time":{"start":1694999211553,"stop":1694999215899,"duration":4346}},{"uid":"1d3802fceb1f34f3","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/1d3802fceb1f34f3","status":"passed","time":{"start":1694930223928,"stop":1694930229026,"duration":5098}},{"uid":"ab1f68c3012959ea","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/ab1f68c3012959ea","status":"passed","time":{"start":1694913126028,"stop":1694913130874,"duration":4846}},{"uid":"3fdcc87f590432d2","reportUrl":"https://Nat754.github.io/StroyremAutomation/64//#testresult/3fdcc87f590432d2","status":"passed","time":{"start":1694826419642,"stop":1694826425138,"duration":5496}},{"uid":"2d95885bd8d1158a","reportUrl":"https://Nat754.github.io/StroyremAutomation/63//#testresult/2d95885bd8d1158a","status":"passed","time":{"start":1694740163756,"stop":1694740168646,"duration":4890}},{"uid":"8ce7e4feb7a35e7f","reportUrl":"https://Nat754.github.io/StroyremAutomation/62//#testresult/8ce7e4feb7a35e7f","status":"passed","time":{"start":1694653606506,"stop":1694653610656,"duration":4150}},{"uid":"bfa811bceebf24e0","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/bfa811bceebf24e0","status":"passed","time":{"start":1694638600248,"stop":1694638604343,"duration":4095}},{"uid":"975415c9c9470fca","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/975415c9c9470fca","status":"passed","time":{"start":1694581561439,"stop":1694581567347,"duration":5908}},{"uid":"be73baafb30bfcd2","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/be73baafb30bfcd2","status":"passed","time":{"start":1694567300692,"stop":1694567304549,"duration":3857}},{"uid":"64755500ce0f8f51","reportUrl":"https://Nat754.github.io/StroyremAutomation/60//#testresult/64755500ce0f8f51","status":"passed","time":{"start":1694505590260,"stop":1694505595690,"duration":5430}}]},"tags":["smoke_test"]},"source":"5f49b88c254ead7d.json","parameterValues":["'https://stroyrem-nn.ru/dostavka?_ym_status-check=40023215&_ym_lang=ru'"]}