{"uid":"1fb0a59170a559f2","name":"ym_is_present_smoke","fullName":"tests.test_ym.test_ym.TestYaMetric#test_ym_is_present_smoke","historyId":"9a39aa7f1ea3e5482218bb05d6a4e9f0","time":{"start":1695690848414,"stop":1695690848614,"duration":200},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x559a9abc46b3 <unknown>\n#1 0x559a9a89a1e7 <unknown>\n#2 0x559a9a8922f3 <unknown>\n#3 0x559a9a882d17 <unknown>\n#4 0x559a9a884191 <unknown>\n#5 0x559a9a883053 <unknown>\n#6 0x559a9a88206c <unknown>\n#7 0x559a9a881fde <unknown>\n#8 0x559a9a880be4 <unknown>\n#9 0x559a9a88106a <unknown>\n#10 0x559a9a89c8ce <unknown>\n#11 0x559a9a91cad5 <unknown>\n#12 0x559a9a9030c2 <unknown>\n#13 0x559a9a91c322 <unknown>\n#14 0x559a9a902e93 <unknown>\n#15 0x559a9a8d5934 <unknown>\n#16 0x559a9a8d671e <unknown>\n#17 0x559a9ab89cb8 <unknown>\n#18 0x559a9ab8dbf0 <unknown>\n#19 0x559a9ab9819c <unknown>\n#20 0x559a9ab8e808 <unknown>\n#21 0x559a9ab5b27f <unknown>\n#22 0x559a9abb2e88 <unknown>\n#23 0x559a9abb3059 <unknown>\n#24 0x559a9abc3843 <unknown>\n#25 0x7f679b260044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05af10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6bf2e82969270ee8fd37f419dc0f1e7c\")>\nlink = 'https://stroyrem-nn.ru/?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742e6a8250>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559a9abb3059 \\\\u003Cunknown>\\\\n#24 0x559a9abc3843 \\\\u003Cunknown>\\\\n#25 0x7f679b260044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x559a9abc46b3 <unknown>\nE       #1 0x559a9a89a1e7 <unknown>\nE       #2 0x559a9a8922f3 <unknown>\nE       #3 0x559a9a882d17 <unknown>\nE       #4 0x559a9a884191 <unknown>\nE       #5 0x559a9a883053 <unknown>\nE       #6 0x559a9a88206c <unknown>\nE       #7 0x559a9a881fde <unknown>\nE       #8 0x559a9a880be4 <unknown>\nE       #9 0x559a9a88106a <unknown>\nE       #10 0x559a9a89c8ce <unknown>\nE       #11 0x559a9a91cad5 <unknown>\nE       #12 0x559a9a9030c2 <unknown>\nE       #13 0x559a9a91c322 <unknown>\nE       #14 0x559a9a902e93 <unknown>\nE       #15 0x559a9a8d5934 <unknown>\nE       #16 0x559a9a8d671e <unknown>\nE       #17 0x559a9ab89cb8 <unknown>\nE       #18 0x559a9ab8dbf0 <unknown>\nE       #19 0x559a9ab9819c <unknown>\nE       #20 0x559a9ab8e808 <unknown>\nE       #21 0x559a9ab5b27f <unknown>\nE       #22 0x559a9abb2e88 <unknown>\nE       #23 0x559a9abb3059 <unknown>\nE       #24 0x559a9abc3843 <unknown>\nE       #25 0x7f679b260044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695689287890,"stop":1695689287973,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1695689287973,"stop":1695689287973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1695690847574,"stop":1695690848413,"duration":839},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1695690848414,"stop":1695690848414,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x559a9abc46b3 <unknown>\n#1 0x559a9a89a1e7 <unknown>\n#2 0x559a9a8922f3 <unknown>\n#3 0x559a9a882d17 <unknown>\n#4 0x559a9a884191 <unknown>\n#5 0x559a9a883053 <unknown>\n#6 0x559a9a88206c <unknown>\n#7 0x559a9a881fde <unknown>\n#8 0x559a9a880be4 <unknown>\n#9 0x559a9a88106a <unknown>\n#10 0x559a9a89c8ce <unknown>\n#11 0x559a9a91cad5 <unknown>\n#12 0x559a9a9030c2 <unknown>\n#13 0x559a9a91c322 <unknown>\n#14 0x559a9a902e93 <unknown>\n#15 0x559a9a8d5934 <unknown>\n#16 0x559a9a8d671e <unknown>\n#17 0x559a9ab89cb8 <unknown>\n#18 0x559a9ab8dbf0 <unknown>\n#19 0x559a9ab9819c <unknown>\n#20 0x559a9ab8e808 <unknown>\n#21 0x559a9ab5b27f <unknown>\n#22 0x559a9abb2e88 <unknown>\n#23 0x559a9abb3059 <unknown>\n#24 0x559a9abc3843 <unknown>\n#25 0x7f679b260044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05af10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6bf2e82969270ee8fd37f419dc0f1e7c\")>\nlink = 'https://stroyrem-nn.ru/?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742e6a8250>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x559a9abb3059 \\\\u003Cunknown>\\\\n#24 0x559a9abc3843 \\\\u003Cunknown>\\\\n#25 0x7f679b260044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x559a9abc46b3 <unknown>\nE       #1 0x559a9a89a1e7 <unknown>\nE       #2 0x559a9a8922f3 <unknown>\nE       #3 0x559a9a882d17 <unknown>\nE       #4 0x559a9a884191 <unknown>\nE       #5 0x559a9a883053 <unknown>\nE       #6 0x559a9a88206c <unknown>\nE       #7 0x559a9a881fde <unknown>\nE       #8 0x559a9a880be4 <unknown>\nE       #9 0x559a9a88106a <unknown>\nE       #10 0x559a9a89c8ce <unknown>\nE       #11 0x559a9a91cad5 <unknown>\nE       #12 0x559a9a9030c2 <unknown>\nE       #13 0x559a9a91c322 <unknown>\nE       #14 0x559a9a902e93 <unknown>\nE       #15 0x559a9a8d5934 <unknown>\nE       #16 0x559a9a8d671e <unknown>\nE       #17 0x559a9ab89cb8 <unknown>\nE       #18 0x559a9ab8dbf0 <unknown>\nE       #19 0x559a9ab9819c <unknown>\nE       #20 0x559a9ab8e808 <unknown>\nE       #21 0x559a9ab5b27f <unknown>\nE       #22 0x559a9abb2e88 <unknown>\nE       #23 0x559a9abb3059 <unknown>\nE       #24 0x559a9abc3843 <unknown>\nE       #25 0x7f679b260044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"56f3ec0e473a4a1e","name":"Screenshot","source":"56f3ec0e473a4a1e.png","type":"image/png","size":5862},{"uid":"e61901bba56df7fe","name":"HTML source","source":"e61901bba56df7fe.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1695690848733,"stop":1695690848733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1695690848733,"stop":1695690848789,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"YA Metric"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_ym"},{"name":"suite","value":"test_ym"},{"name":"subSuite","value":"TestYaMetric"},{"name":"host","value":"a710f57ebf7d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ym.test_ym"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/?_ym_status-check=40023215&_ym_lang=ru'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":34,"unknown":0,"total":35},"items":[{"uid":"aba04cd3b5b3a1a6","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/aba04cd3b5b3a1a6","status":"passed","time":{"start":1695604585266,"stop":1695604594662,"duration":9396}},{"uid":"b68850dba721c0b8","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/b68850dba721c0b8","status":"passed","time":{"start":1695517882540,"stop":1695517888754,"duration":6214}},{"uid":"e4251b900ad766e1","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/e4251b900ad766e1","status":"passed","time":{"start":1695431680799,"stop":1695431689879,"duration":9080}},{"uid":"4f71961786e8317e","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/4f71961786e8317e","status":"passed","time":{"start":1695406962648,"stop":1695406972074,"duration":9426}},{"uid":"7d81551f954099f9","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/7d81551f954099f9","status":"passed","time":{"start":1695344973552,"stop":1695344980149,"duration":6597}},{"uid":"ae69ba296f710d83","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/ae69ba296f710d83","status":"passed","time":{"start":1695258579258,"stop":1695258585573,"duration":6315}},{"uid":"34b6714f8319e165","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/34b6714f8319e165","status":"passed","time":{"start":1695172764224,"stop":1695172773507,"duration":9283}},{"uid":"ecc737271fcc2cc5","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/ecc737271fcc2cc5","status":"passed","time":{"start":1695085970075,"stop":1695085977501,"duration":7426}},{"uid":"676ae7ffd11b2b45","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/676ae7ffd11b2b45","status":"passed","time":{"start":1695064587960,"stop":1695064595906,"duration":7946}},{"uid":"4257b2211d46c3f6","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/4257b2211d46c3f6","status":"passed","time":{"start":1695061141558,"stop":1695061148135,"duration":6577}},{"uid":"a108f134ae31bbb1","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/a108f134ae31bbb1","status":"passed","time":{"start":1694999191241,"stop":1694999197305,"duration":6064}},{"uid":"d0c4f31f01af2c61","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/d0c4f31f01af2c61","status":"passed","time":{"start":1694930197704,"stop":1694930206277,"duration":8573}},{"uid":"ea61397d382e91","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/ea61397d382e91","status":"passed","time":{"start":1694913101136,"stop":1694913108872,"duration":7736}},{"uid":"1310c8baa7ab289","reportUrl":"https://Nat754.github.io/StroyremAutomation/64//#testresult/1310c8baa7ab289","status":"passed","time":{"start":1694826389938,"stop":1694826397678,"duration":7740}},{"uid":"a589096857890977","reportUrl":"https://Nat754.github.io/StroyremAutomation/63//#testresult/a589096857890977","status":"passed","time":{"start":1694740138285,"stop":1694740146130,"duration":7845}},{"uid":"69aa4c96b19dbbd4","reportUrl":"https://Nat754.github.io/StroyremAutomation/62//#testresult/69aa4c96b19dbbd4","status":"passed","time":{"start":1694653586205,"stop":1694653592548,"duration":6343}},{"uid":"e29404f3e590c8","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/e29404f3e590c8","status":"passed","time":{"start":1694638579009,"stop":1694638585405,"duration":6396}},{"uid":"7c935c084d936084","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/7c935c084d936084","status":"passed","time":{"start":1694581532290,"stop":1694581542014,"duration":9724}},{"uid":"a7803351f19cd4b6","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/a7803351f19cd4b6","status":"passed","time":{"start":1694567280031,"stop":1694567286177,"duration":6146}},{"uid":"5ab81a37f48bf2a","reportUrl":"https://Nat754.github.io/StroyremAutomation/60//#testresult/5ab81a37f48bf2a","status":"passed","time":{"start":1694505561173,"stop":1694505570718,"duration":9545}}]},"tags":["smoke_test"]},"source":"1fb0a59170a559f2.json","parameterValues":["'https://stroyrem-nn.ru/?_ym_status-check=40023215&_ym_lang=ru'"]}