{"uid":"f06dd2fdfe813ed3","name":"ym_is_present_smoke","fullName":"tests.test_ym.test_ym.TestYaMetric#test_ym_is_present_smoke","historyId":"e22d15c60f90362114fcbba18591994b","time":{"start":1695690849614,"stop":1695690849956,"duration":342},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x555ed48196b3 <unknown>\n#1 0x555ed44ef1e7 <unknown>\n#2 0x555ed44e72f3 <unknown>\n#3 0x555ed44d7d17 <unknown>\n#4 0x555ed44d9191 <unknown>\n#5 0x555ed44d8053 <unknown>\n#6 0x555ed44d706c <unknown>\n#7 0x555ed44d6fde <unknown>\n#8 0x555ed44d5be4 <unknown>\n#9 0x555ed44d606a <unknown>\n#10 0x555ed44f18ce <unknown>\n#11 0x555ed4571ad5 <unknown>\n#12 0x555ed45580c2 <unknown>\n#13 0x555ed4571322 <unknown>\n#14 0x555ed4557e93 <unknown>\n#15 0x555ed452a934 <unknown>\n#16 0x555ed452b71e <unknown>\n#17 0x555ed47decb8 <unknown>\n#18 0x555ed47e2bf0 <unknown>\n#19 0x555ed47ed19c <unknown>\n#20 0x555ed47e3808 <unknown>\n#21 0x555ed47b027f <unknown>\n#22 0x555ed4807e88 <unknown>\n#23 0x555ed4808059 <unknown>\n#24 0x555ed4818843 <unknown>\n#25 0x7f17c6db4044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05abd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b075b7f72c02edbd1a1208483e951125\")>\nlink = 'https://stroyrem-nn.ru/user/account?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742f5de390>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x555ed4808059 \\\\u003Cunknown>\\\\n#24 0x555ed4818843 \\\\u003Cunknown>\\\\n#25 0x7f17c6db4044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x555ed48196b3 <unknown>\nE       #1 0x555ed44ef1e7 <unknown>\nE       #2 0x555ed44e72f3 <unknown>\nE       #3 0x555ed44d7d17 <unknown>\nE       #4 0x555ed44d9191 <unknown>\nE       #5 0x555ed44d8053 <unknown>\nE       #6 0x555ed44d706c <unknown>\nE       #7 0x555ed44d6fde <unknown>\nE       #8 0x555ed44d5be4 <unknown>\nE       #9 0x555ed44d606a <unknown>\nE       #10 0x555ed44f18ce <unknown>\nE       #11 0x555ed4571ad5 <unknown>\nE       #12 0x555ed45580c2 <unknown>\nE       #13 0x555ed4571322 <unknown>\nE       #14 0x555ed4557e93 <unknown>\nE       #15 0x555ed452a934 <unknown>\nE       #16 0x555ed452b71e <unknown>\nE       #17 0x555ed47decb8 <unknown>\nE       #18 0x555ed47e2bf0 <unknown>\nE       #19 0x555ed47ed19c <unknown>\nE       #20 0x555ed47e3808 <unknown>\nE       #21 0x555ed47b027f <unknown>\nE       #22 0x555ed4807e88 <unknown>\nE       #23 0x555ed4808059 <unknown>\nE       #24 0x555ed4818843 <unknown>\nE       #25 0x7f17c6db4044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695689287890,"stop":1695689287973,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clear_allure_results_folder","time":{"start":1695689287973,"stop":1695689287973,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1695690848791,"stop":1695690849613,"duration":822},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1695690849613,"stop":1695690849613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=117.0.5938.92)\nStacktrace:\n#0 0x555ed48196b3 <unknown>\n#1 0x555ed44ef1e7 <unknown>\n#2 0x555ed44e72f3 <unknown>\n#3 0x555ed44d7d17 <unknown>\n#4 0x555ed44d9191 <unknown>\n#5 0x555ed44d8053 <unknown>\n#6 0x555ed44d706c <unknown>\n#7 0x555ed44d6fde <unknown>\n#8 0x555ed44d5be4 <unknown>\n#9 0x555ed44d606a <unknown>\n#10 0x555ed44f18ce <unknown>\n#11 0x555ed4571ad5 <unknown>\n#12 0x555ed45580c2 <unknown>\n#13 0x555ed4571322 <unknown>\n#14 0x555ed4557e93 <unknown>\n#15 0x555ed452a934 <unknown>\n#16 0x555ed452b71e <unknown>\n#17 0x555ed47decb8 <unknown>\n#18 0x555ed47e2bf0 <unknown>\n#19 0x555ed47ed19c <unknown>\n#20 0x555ed47e3808 <unknown>\n#21 0x555ed47b027f <unknown>\n#22 0x555ed4807e88 <unknown>\n#23 0x555ed4808059 <unknown>\n#24 0x555ed4818843 <unknown>\n#25 0x7f17c6db4044 <unknown>","statusTrace":"self = <tests.test_ym.test_ym.TestYaMetric object at 0x7f742f05abd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b075b7f72c02edbd1a1208483e951125\")>\nlink = 'https://stroyrem-nn.ru/user/account?_ym_status-check=40023215&_ym_lang=ru'\n\n    @allure.title(\"ym_is_present_smoke\")\n    @pytest.mark.parametrize('link', URLS_FOR_YM)\n    @pytest.mark.smoke_test\n    def test_ym_is_present_smoke(self, driver, link):\n        page = YmPage(driver)\n>       driver.get(link)\n\ntests/test_ym/test_ym.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f742f5de390>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x555ed4808059 \\\\u003Cunknown>\\\\n#24 0x555ed4818843 \\\\u003Cunknown>\\\\n#25 0x7f17c6db4044 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=117.0.5938.92)\nE       Stacktrace:\nE       #0 0x555ed48196b3 <unknown>\nE       #1 0x555ed44ef1e7 <unknown>\nE       #2 0x555ed44e72f3 <unknown>\nE       #3 0x555ed44d7d17 <unknown>\nE       #4 0x555ed44d9191 <unknown>\nE       #5 0x555ed44d8053 <unknown>\nE       #6 0x555ed44d706c <unknown>\nE       #7 0x555ed44d6fde <unknown>\nE       #8 0x555ed44d5be4 <unknown>\nE       #9 0x555ed44d606a <unknown>\nE       #10 0x555ed44f18ce <unknown>\nE       #11 0x555ed4571ad5 <unknown>\nE       #12 0x555ed45580c2 <unknown>\nE       #13 0x555ed4571322 <unknown>\nE       #14 0x555ed4557e93 <unknown>\nE       #15 0x555ed452a934 <unknown>\nE       #16 0x555ed452b71e <unknown>\nE       #17 0x555ed47decb8 <unknown>\nE       #18 0x555ed47e2bf0 <unknown>\nE       #19 0x555ed47ed19c <unknown>\nE       #20 0x555ed47e3808 <unknown>\nE       #21 0x555ed47b027f <unknown>\nE       #22 0x555ed4807e88 <unknown>\nE       #23 0x555ed4808059 <unknown>\nE       #24 0x555ed4818843 <unknown>\nE       #25 0x7f17c6db4044 <unknown>\n\n/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"32df732dc0b4763a","name":"Screenshot","source":"32df732dc0b4763a.png","type":"image/png","size":5862},{"uid":"3f3dd6fea4de4c51","name":"HTML source","source":"3f3dd6fea4de4c51.html","type":"text/html","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1695690850083,"stop":1695690850139,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup::0","time":{"start":1695690850083,"stop":1695690850083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"YA Metric"},{"name":"tag","value":"smoke_test"},{"name":"parentSuite","value":"tests.test_ym"},{"name":"suite","value":"test_ym"},{"name":"subSuite","value":"TestYaMetric"},{"name":"host","value":"a710f57ebf7d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ym.test_ym"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"link","value":"'https://stroyrem-nn.ru/user/account?_ym_status-check=40023215&_ym_lang=ru'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":30,"unknown":0,"total":31},"items":[{"uid":"455e058e3886f6f","reportUrl":"https://Nat754.github.io/StroyremAutomation/74//#testresult/455e058e3886f6f","status":"passed","time":{"start":1695604595576,"stop":1695604605350,"duration":9774}},{"uid":"8d9b7cc511802a87","reportUrl":"https://Nat754.github.io/StroyremAutomation/73//#testresult/8d9b7cc511802a87","status":"passed","time":{"start":1695517889646,"stop":1695517896468,"duration":6822}},{"uid":"c97aec55f9acdeab","reportUrl":"https://Nat754.github.io/StroyremAutomation/72//#testresult/c97aec55f9acdeab","status":"passed","time":{"start":1695431690832,"stop":1695431700914,"duration":10082}},{"uid":"f18a8fdd8f17430a","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/f18a8fdd8f17430a","status":"passed","time":{"start":1695406973063,"stop":1695406988211,"duration":15148}},{"uid":"4342bd1904df96d4","reportUrl":"https://Nat754.github.io/StroyremAutomation/71//#testresult/4342bd1904df96d4","status":"passed","time":{"start":1695344981026,"stop":1695344988271,"duration":7245}},{"uid":"7605c40caee14ce1","reportUrl":"https://Nat754.github.io/StroyremAutomation/70//#testresult/7605c40caee14ce1","status":"passed","time":{"start":1695258586487,"stop":1695258593326,"duration":6839}},{"uid":"3924f281d74277d4","reportUrl":"https://Nat754.github.io/StroyremAutomation/69//#testresult/3924f281d74277d4","status":"passed","time":{"start":1695172774462,"stop":1695172785408,"duration":10946}},{"uid":"8f49151a421197f3","reportUrl":"https://Nat754.github.io/StroyremAutomation/68//#testresult/8f49151a421197f3","status":"passed","time":{"start":1695085978402,"stop":1695085986849,"duration":8447}},{"uid":"cb74dce955c3e882","reportUrl":"https://Nat754.github.io/StroyremAutomation/67//#testresult/cb74dce955c3e882","status":"passed","time":{"start":1695064596890,"stop":1695064605236,"duration":8346}},{"uid":"a2f705d2233580a7","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/a2f705d2233580a7","status":"passed","time":{"start":1695061149022,"stop":1695061160799,"duration":11777}},{"uid":"8658c2673c52e035","reportUrl":"https://Nat754.github.io/StroyremAutomation/66//#testresult/8658c2673c52e035","status":"passed","time":{"start":1694999198169,"stop":1694999205192,"duration":7023}},{"uid":"b50f922093b4c6de","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/b50f922093b4c6de","status":"passed","time":{"start":1694930207148,"stop":1694930216280,"duration":9132}},{"uid":"c9d929ec621fcdba","reportUrl":"https://Nat754.github.io/StroyremAutomation/65//#testresult/c9d929ec621fcdba","status":"passed","time":{"start":1694913109801,"stop":1694913118846,"duration":9045}},{"uid":"7900b1e8e9633f16","reportUrl":"https://Nat754.github.io/StroyremAutomation/64//#testresult/7900b1e8e9633f16","status":"passed","time":{"start":1694826398590,"stop":1694826407128,"duration":8538}},{"uid":"a2036123e0eed6b8","reportUrl":"https://Nat754.github.io/StroyremAutomation/63//#testresult/a2036123e0eed6b8","status":"passed","time":{"start":1694740147070,"stop":1694740155952,"duration":8882}},{"uid":"7a276018651c756a","reportUrl":"https://Nat754.github.io/StroyremAutomation/62//#testresult/7a276018651c756a","status":"passed","time":{"start":1694653593407,"stop":1694653600449,"duration":7042}},{"uid":"5571a82dfaa66802","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/5571a82dfaa66802","status":"passed","time":{"start":1694638586268,"stop":1694638593748,"duration":7480}},{"uid":"e3016223fcc8a7da","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/e3016223fcc8a7da","status":"passed","time":{"start":1694581542988,"stop":1694581553045,"duration":10057}},{"uid":"ca96ea014668ace4","reportUrl":"https://Nat754.github.io/StroyremAutomation/61//#testresult/ca96ea014668ace4","status":"passed","time":{"start":1694567287118,"stop":1694567294497,"duration":7379}},{"uid":"af65262144529671","reportUrl":"https://Nat754.github.io/StroyremAutomation/60//#testresult/af65262144529671","status":"passed","time":{"start":1694505571639,"stop":1694505581939,"duration":10300}}]},"tags":["smoke_test"]},"source":"f06dd2fdfe813ed3.json","parameterValues":["'https://stroyrem-nn.ru/user/account?_ym_status-check=40023215&_ym_lang=ru'"]}